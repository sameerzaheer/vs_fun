<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WifUiBase</name>
    </assembly>
    <members>
        <member name="T:Claron.WIF.AlphaBlendTextBox">
            <summary>
            The AlphaBlendTextBox is a helper class to Annotation, providing a floating box containing
            text which, unlike the built-in .NET controls, can have a fully or partially transparent background
            and respond to mouse events over that background.
            </summary>
            <remarks>The class is placed in a separate file, rather than together with Annotation and Viewport
            since VS 2008 requires a "designable" class to be first in the source file.</remarks>
        </member>
        <member name="F:Claron.WIF.AlphaBlendTextBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Claron.WIF.AlphaBlendTextBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Claron.WIF.AlphaBlendTextBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Claron.WIF.Animation">
            <summary>
            The Animation class represents a sequence of animation frames that can be defined quickly
            interactively, then rendered in batch to produce output in one of a number of formats, either
            as a sequence of individual image files (JPEG, PNG, DICOM, etc.) or a single movie file
            (eg, MPEG AVI).
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Animation.OutputFormatStrings">
            <summary>
            An array of displayable strings for each matching OutputFormatEnum value
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Animation.RotationDegrees(System.UInt32)">
            <summary>
            Returns the degrees rotation of the indexed frame relative to the mid-pose.
            </summary>
        </member>
        <member name="M:Claron.WIF.Animation.FrameToPatient(System.Int32)">
            <summary>
            Return the mapping of the given frame to the patient (based on MidPoseToPatient)
            </summary>
            <param name="FrameI">The frame 0-based index. Clipped to the valid range.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Animation.StartSave(System.String,System.String)">
            <summary>
            Must be called before AddFrame. If the format is a sequence of files,
            a new sub-folder by the name "AnimName" would be created for saving the files.
            Otherwise a single animation file would be saved in the folder path.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Animation.EndSave">
            <summary>
            Must call for video files
            </summary>
        </member>
        <member name="M:Claron.WIF.Animation.NewImageFilepath(System.Boolean)">
             <summary>
            
             </summary>
             <param name="addName">Default value = False</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Animation.AddFrame(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Adds a new frame to the animation returning true, or fails and returns false.
            </summary>
            <param name="BM">The bitmap to add</param>
            <param name="addName">Default value = False</param>
            <returns>The full path of the file to which the frame was saved, or Nothing if failed</returns>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Animation.StatesFolder">
            <summary>
            The path to the folder containing saved states. Initialized to a default location
            </summary>
        </member>
        <member name="M:Claron.WIF.Animation.StateSave(System.String)">
            <summary>
            Stores the object's state in a specified file path.
            Overwrites any file that might be present at the same implied path.
            </summary>
            <param name="Name">The name of the state</param>
        </member>
        <member name="M:Claron.WIF.Animation.StateRestore(System.String)">
            <summary>
            Obtains an animation object with its initial state set to the named saved state.
            </summary>
            <param name="Name">The name of the state. Must have been previously saved.</param>
        </member>
        <member name="M:Claron.WIF.Animation.StateRestoreable(System.String)">
            <summary>
            Returns true iff a state with the given name is available for restoring (ie, it exists in teh StatesFolder).
            </summary>
        </member>
        <member name="M:Claron.WIF.Animation.StateDelete(System.String)">
            <summary>
            Deletes the saved state.
            </summary>
        </member>
        <member name="M:Claron.WIF.Animation.StatesSaved">
            <summary>
            Obtains the names of all the previously stored states in StatesFolder, sorted alphabetically
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.DicomFilesLocation">
            <summary>
            The index of the output format in the OutputFomats strings array
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.DicomFilesStudyUID">
             <summary>
            
             </summary>
        </member>
        <member name="P:Claron.WIF.Animation.SliceStackShown">
            <summary>
            The SliceStack being shown.
            </summary>
            <remarks>May returns Nothing if no stack is shown.</remarks>
        </member>
        <member name="P:Claron.WIF.Animation.DicomFilesSeriesUID">
             <summary>
            
             </summary>
        </member>
        <member name="P:Claron.WIF.Animation.OutputFormat">
            <summary>
            The index of the output format in the OutputFomats strings array
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.ResolutionW">
            <summary>
            Output frame width in pixels  (Clipped to [32,4096])
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.ResolutionH">
            <summary>
            Output frame height in pixels (Clipped to [32,4096])
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.SpanDegrees">
            <summary>
            The animation rotation span in degrees (Clipped to [0.5,360]), as set by user.
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.SpanDegreesActual">
            <summary>
            Half the animation rotation span in degrees, actual (integer multiple of DegreesIncrement).
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.DegreesIncrement">
            <summary>
            Angular increment between frames (clipped to [0.1,180])
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.FramesCount">
            <summary>
            The number of frames that will be generated in the animation (derived from other properties)
            </summary>
        </member>
        <member name="P:Claron.WIF.Animation.StartPoseToPatient">
            <summary>
            The mapping between the viewport or camera (client's choice) and the patient space
            </summary>
        </member>
        <member name="F:Claron.WIF.Animation.MotionEnum.HorizontalOneWay">
            <summary>
            Rotation about horizontal axis
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Animation.MotionEnum.HorizontalTwoWays">
            <summary>
            Rotation about horizontal axis
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Animation.MotionEnum.VerticalOneWay">
            <summary>
            Rotation about vertical axis
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Animation.MotionEnum.VerticalTwoWays">
            <summary>
            Rotation about vertical axis
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Animation.OutputFormatEnum.DicomSC">
            <summary>
            Same as DicomSC_rgb
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Annotation">
            <summary>
            Base class for drawing Annotations
            </summary>
        </member>
        <member name="F:Claron.WIF.Annotation._activeVp">
            <summary>
            Indicates the active viewport which the current Draw() is valid.
            This is used to differentiate Annotations attached to multiple viewports.
            </summary>
        </member>
        <member name="F:Claron.WIF.Annotation._managingVp">
            <summary>
            Indicates the viewport which is responsible for managing the lifetime of the Annotation
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.#ctor(Claron.WIF.Viewport)">
            <summary>
            Basic Constructor
            </summary>
            <param name="vp"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.#ctor(Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Constructor to specify whether Annotation is managed by Viewport
            </summary>
            <param name="vp"></param>
            <param name="managedByViewport"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.CreateContextMenuStrip">
            <summary>
            Creates a basic context menu
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.FontItemClick(System.Object,System.EventArgs)">
            <summary>
            Event handler for selecting a font menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.Draw(System.Drawing.Graphics)">
            <summary>
            Pure virtual definition for drawing this object.  During mouse interaction, drawing should be in screen space (Vi).
            </summary>
            <param name="g">Graphics context</param>
        </member>
        <member name="M:Claron.WIF.Annotation.Draw(Claron.WIF.Viewport,System.Drawing.Graphics)">
            <summary>
            Entry point from Viewport to draw annotations
            </summary>
            <param name="vp">The Viewport which this annotation is to be drawn on</param>
            <param name="g">Graphics context</param>
        </member>
        <member name="M:Claron.WIF.Annotation.RestoreState(Claron.WIF.Viewport,Claron.WIF.Viewport)">
            <summary>
            Method to be called during viewport deserialization to restore the state of the object
            </summary>
            <param name="vp">Viewport handle</param>
            <param name="other">old Viewport handle</param>
        </member>
        <member name="M:Claron.WIF.Annotation.Attach(Claron.WIF.Viewport)">
            <summary>
            Method used by Viewport to re-attach the annotation
            </summary>
            <param name="vp"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.Detach(Claron.WIF.Viewport)">
            <summary>
            Method used by Viewport to detach the annotation
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.SetEditPoint(Claron.WIF.Viewport,System.Int32)">
            <summary>
            Convenience method to set the currently edited point and set the edit state
            </summary>
            <param name="index"></param>
            <param name="vp"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.SetEditState(Claron.WIF.Viewport,Claron.WIF.Annotation.EditState)">
            <summary>
            Set the edit state using a viewport as a reference
            </summary>
            <param name="vp"></param>
            <param name="editState"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.GetPointVi(System.Int32)">
            <summary>
            Retrieves an existing point in Vi
            </summary>
            <param name="index">Points index</param>
            <returns>PointF (2D) Vi coordinate</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.ViToPr(System.Drawing.PointF)">
            <summary>
            Utility method for converting from Vi to Pr
            </summary>
            <param name="point">Input point</param>
            <returns>Converted coordinate in Pr as a Vector3</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.PrToVi(Claron.WIF.Vector3)">
            <summary>
            Utility method to convert from Pr to Vi.  Z component is valid.
            </summary>
            <param name="p">point</param>
            <returns>Coordinate converted from Pr To Vi</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.SetPoint(System.Int32,Claron.WIF.Vector3)">
            <summary>
            Updates an existing point
            </summary>
            <param name="index">index to the point of interest</param>
            <param name="point">value to be updated</param>
        </member>
        <member name="M:Claron.WIF.Annotation.SetPointVi(System.Int32,System.Drawing.PointF)">
            <summary>
            Updates an existing point from Vi to Pr
            </summary>
            <param name="index">index to the point of interest</param>
            <param name="point">point in Vi</param>
        </member>
        <member name="M:Claron.WIF.Annotation.SetPointsVi(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Utility method to set the points in Vi
            </summary>
            <param name="points">list of points in Vi to replace the current points</param>
        </member>
        <member name="M:Claron.WIF.Annotation.AddPointVi(System.Drawing.PointF)">
            <summary>
            Adds a point from Vi (during mouse interaction) to Pr
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.IsVisibleAtLocation">
            <summary>
            Method to test the various condition to whether this object is to be displayed
            </summary>
            <returns>flag indicating whether object is to be displayed</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.IsMouseInteractingInOtherAttachedViewport">
            <summary>
            Convenience method to indicate if mouse interaction is occuring in another attached viewport
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Annotation.CopyPoints(System.Collections.Generic.List{Claron.WIF.Vector3})">
            <summary>
            Utility method to copy a list of points
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.HitTest(Claron.WIF.Viewport,System.Drawing.Point,Claron.WIF.Annotation.HitType@,System.Int32@)">
            <summary>
            Entry point to Annotation Hit test
            </summary>
            <param name="vp"></param>
            <param name="point"></param>
            <param name="hitType"></param>
            <param name="index"></param>
        </member>
        <member name="M:Claron.WIF.Annotation.HitTest(System.Drawing.Point,Claron.WIF.Annotation.HitType@,System.Int32@)">
            <summary>
            Object hit test
            </summary>
            <param name="point">input point</param>
            <param name="hitType">returns the status of the hit test</param>
            <param name="index">returns the index of the point if the hit test was a point</param>
        </member>
        <member name="M:Claron.WIF.Annotation.IsPointOnSegment(Claron.WIF.Vector3[],Claron.WIF.Vector3,Claron.WIF.Annotation.HitType@,System.Int32@)">
            <summary>
            Utility method for detecting if a point intersects a connected line between the input Vi points
            </summary>
            <param name="viPoints">input Vi points</param>
            <param name="p">Vi test point</param>
            <param name="hitType">returned hit type</param>
            <param name="index">index of the point hit</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Annotation.ResetMouseInteractionState">
            <summary>
            Utility method to reset the mouse interaction states by nulling the mouse interaction collection
            and resetting the flag which indicates the points to be drawn are valid
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.ResetMouseInteractionStateAndFireCompletedEvent">
            <summary>
            Utility method to reset the mouse interaction states by nulling the mouse interaction collection
            and resetting the flag which indicates the points to be drawn are valid.  This also fires the
            MouseInteractionComplete event.
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.FireMouseInteractionCompletedEvent">
            <summary>
            Fire the MouseInteractionCompleted event if requested
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.AdjustPenIfPointsAreInvalid">
            <summary>
            Covenience method to change the main pen style to the "invalid point pen style"
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.HandleMouseEvent(Claron.WIF.Viewport,System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Entry point to Annotation mouse event handler
            </summary>
            <param name="vp"></param>
            <param name="e0"></param>
            <param name="e1"></param>
            <param name="mouseUp"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Annotation.HandleMouseEvent(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Checks for right mouse button down and pops up a context menu
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
            <param name="mouseUp">flag indicating if mouse button is up</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.HandleRightMouseEvent(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Utility method to determine if just the right mouse button is pressed and invoke the context menu delegate
            </summary>
            <param name="e0"></param>
            <param name="e1">current mouse event</param>
            <param name="mouseUp">flag indicating whether this the mouse event includes mouse up</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.OneSegmentMouseEventHandler(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Utility method for handling the mouse events for an object with one segment
            </summary>
            <param name="ePrev">previous mouse event</param>
            <param name="e">current mouse event</param>
            <param name="mouseUp">flag indicating whether mouse button is up</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.InitializePoints(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Utility method to create the initial two points (during mouse interaction) for this object
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Annotation.IsPointValid(System.Drawing.PointF,Claron.WIF.Vector3@)">
            <summary>
            Indicates if the input Vi (GDI space) point is valid in the context of the current image.
            For 2D viewports, the point is inside the image.  For 3D viewports the point intersects a valid voxel for the current opacity.
            </summary>
            <param name="point">point in Vi</param>
            <param name="pr">output Pr value if valid</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Annotation.IsPointValid(System.Drawing.PointF)">
            <summary>
            Indicates if the input Vi (GDI space) point is valid in the context of the current image.
            For 2D viewports, the point is inside the image.  For 3D viewports the point intersects a valid voxel for the current opacity.
            </summary>
            <param name="point">point in Vi</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Annotation.ConvertAllPointsToVi">
            <summary>
            Utility method to convert all points to Vi in preparation for mouse interaction (_points -> _mouseInteractionPoints)
            </summary>
        </member>
        <member name="M:Claron.WIF.Annotation.MovePoint(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Utility method for updating the currently editing point (during mouse interaction)
            </summary>
            <param name="e">current mouse event</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Claron.WIF.Annotation.MovePoints(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Utility method for updating all the points (during mouse interaction)
            </summary>
            <param name="ePrev">prevous mouse event</param>
            <param name="e">current mouse event</param>
            <returns>true if handled</returns>
        </member>
        <member name="P:Claron.WIF.Annotation.DrawConstraint">
            <summary>
            A qualification delegate that can be used to apply external semantics to affect the visibility of a RulerLine 
            </summary>
        </member>
        <member name="E:Claron.WIF.Annotation.PointsInteracted">
            <summary>
            Event fired when the points have been modified via mouse interaction
            </summary>
        </member>
        <member name="E:Claron.WIF.Annotation.MouseInteractionCompleted">
            <summary>
            Event fired when the object has completed mouse interaction (create/edit/move).
            </summary>
        </member>
        <member name="E:Claron.WIF.Annotation.OnDeleted">
            <summary>
            Event fired when object is deleted from the context menu.  Object is invalid at this point.  
            Any references to sender should be removed.  Object has been removed from AnnotationBases
            collection at this point and has been disposed.  Any delegates registered for OnDeleted,
            PointsInteracted and MouseInteractionCompleted have been removed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.ContextMenuEventHandler">
            <summary>
            Property to delegate for handing the context menu
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Cursor">
            <summary>
            The Cursor to be drawn for the Annotation
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Color">
            <summary>
            Set/Get the color for the graphical textual items
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Weight">
            <summary>
            Set/Get the line weight (pen width) for the graphical items
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Pen">
            <summary>
            Set/Get the pen
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Label">
            <summary>
            Set/Get the label associate with this object
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.State">
            <summary>
            Set and get the state of this object
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.EditingState">
            <summary>
            Set/Get the editing state of this object
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Font">
            <summary>
            Set/Get the font for this object
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.ShadowColor">
            <summary>
            Set/Get the shadow color for the graphical and textual items
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Visible">
            <summary>
            Set/Get the visibility of this object
            </summary>
        </member>
        <member name="P:Claron.WIF.Annotation.Points">
            <summary>
            Set/Get the points in Pr which define this object
            </summary>
        </member>
        <member name="T:Claron.WIF.Annotation.DrawConstraintQualifier">
            <summary>
            Qualifier callback used to determine visibility of a Annotation
            </summary>
            <param name="vp">the viewport instance in which the polyline is drawn</param>
            <param name="a">the Annotation instance</param>
            <returns>true if the polyline should be drawn; false if it should be skipped</returns>
        </member>
        <member name="T:Claron.WIF.Annotation.PointsInteractedEventArgs">
            <summary>
            Event args for PointsInteractedDelegate
            </summary>
        </member>
        <member name="F:Claron.WIF.Annotation.PointsInteractedEventArgs.PointsValid">
            <summary>
            Indicates whether the Points are valid or not
            </summary>
        </member>
        <member name="T:Claron.WIF.Annotation.DeletedEventArgs">
            <summary>
            Event args for OnDeletedDelegate
            </summary>
        </member>
        <member name="T:Claron.WIF.AnnotationArrow">
            <summary>
            AnnotationArrow represents an overlay graphic of a line with an arrow head.
            </summary>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.#ctor(Claron.WIF.Viewport)">
            <summary>
            Basic constructor
            </summary>
            <param name="vp"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.#ctor(Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Constructor to specify viewport management if necessary
            </summary>
            <param name="vp"></param>
            <param name="managedByViewport"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.SetPointsVi(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Convenience method to set the points in Vi for AnnotationArrow
            </summary>
            <param name="points">list of points in Vi to replace the current points</param>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.RestoreState(Claron.WIF.Viewport,Claron.WIF.Viewport)">
            <summary>
            Method to be called during viewport deserialization to restore the state of AnnotationArrow
            </summary>
            <param name="vp">Viewport handle</param>
            <param name="other">old Viewport handle</param>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.Draw(System.Drawing.Graphics)">
            <summary>
            Implements the abstact Draw method
            </summary>
            <param name="g">Graphics context</param>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.HitTest(System.Drawing.Point,Claron.WIF.Annotation.HitType@,System.Int32@)">
            <summary>
            Object hit test for AnnotationArrow
            </summary>
            <param name="point">input point</param>
            <param name="hitType">returns the status of the hit test</param>
            <param name="index">returns the index of the point if the hit test was a point</param>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.MovePoint(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Update the current editing point (during mouse interaction) for AnnotationArrow
            </summary>
            <param name="e">current mouse event</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.MovePoints(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Update all the points (during mouse interaction) for AnnotationArrow
            </summary>
            <param name="ePrev">prevous mouse event</param>
            <param name="e">current mouse event</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Claron.WIF.AnnotationArrow.HandleMouseEvent(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Handle mouse events for AnnotationArrow
            </summary>
            <param name="ePrev">previous mouse event</param>
            <param name="e">current mouse event</param>
            <param name="mouseUp">flag indicating mouse up is included in this event</param>
            <returns>true if handled</returns>
        </member>
        <member name="P:Claron.WIF.AnnotationArrow.ArrowStyle">
            <summary>
            Set/Get style of the arrow head
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationArrow.Points">
            <summary>
            Set/Get the points for AnnotationArrow
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationArrow.AnchorBase">
            <summary>
            Set/Get whether to anchor the Nock (base) of the arrow to fractional coordinate space
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationArrow.Cursor">
            <summary>
            Cursor for AnnotationArrow
            </summary>
        </member>
        <member name="T:Claron.WIF.AnnotationCircle">
            <summary>
            Class for creating circle annotations.
            </summary>
        </member>
        <member name="F:Claron.WIF.AnnotationCircle._rectW">
            <summary>
            Rectangle width used to draw center and radius points.
            </summary>
        </member>
        <member name="M:Claron.WIF.AnnotationCircle.#ctor(Claron.WIF.Viewport)">
            <summary>
            Creates a new circle annotation.
            </summary>
        </member>
        <member name="F:Claron.WIF.AnnotationCircle._canModifyRadius">
            <summary>
            Property to get/set whether the radius can be modified.
            </summary>
        </member>
        <member name="M:Claron.WIF.AnnotationCircle.Draw(System.Drawing.Graphics)">
            <summary>
            Implements the abstract Draw method
            </summary>
            <param name="g">Graphics context</param>
        </member>
        <member name="M:Claron.WIF.AnnotationCircle.HitTest(System.Drawing.Point,Claron.WIF.Annotation.HitType@,System.Int32@)">
            <summary>
            Hit test for AnnotationCircle
            </summary>
            <param name="point"></param>
            <param name="hitType"></param>
            <param name="index"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationCircle.HandleMouseEvent(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Handle mouse events for AnnotationCircle.
            </summary>
            <param name="ePrev">previous mouse event</param>
            <param name="e">current mouse event</param>
            <param name="mouseUp">flag indicating mouse up is included in this event</param>
            <returns>true if handled</returns>
        </member>
        <member name="P:Claron.WIF.AnnotationCircle.Points">
            <summary>
            Override assignment of Points
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationCircle.CanModifyRadius">
            <summary>
            Property to get/set whether the radius can be modified.
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationCircle.Cursor">
            <summary>
            Cursor for AnnotationCircle
            </summary>
        </member>
        <member name="T:Claron.WIF.AnnotationRuler">
            <summary>
            AnnotationRuler represents an overlay graphic of a line with two user-movable end points, P1 and P2,
            and an optional text in the middle. It is designed to be used for distance measurement, 
            or an extent marker for clippers. 
            </summary>
        </member>
        <member name="F:Claron.WIF.AnnotationRuler.BasicFormatter">
            <summary>
            Default formatter for AnnotationRuler
            </summary>
        </member>
        <member name="M:Claron.WIF.AnnotationRuler.#ctor(Claron.WIF.Viewport)">
            <summary>
            Basic constructor
            </summary>
            <param name="vp"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationRuler.#ctor(Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Constructor used to specify viewport management if necessary
            </summary>
            <param name="vp"></param>
            <param name="managedByViewport"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationRuler.SetPointVi(System.Int32,System.Drawing.PointF)">
            <summary>
            Updates an existing point (during mouse interaction) from Vi to Pr for AnnotationRuler
            </summary>
            <param name="index"></param>
            <param name="point"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationRuler.SetPoint(System.Int32,Claron.WIF.Vector3)">
            <summary>
            Updates a specific point for AnnotationRuler
            </summary>
            <param name="index"></param>
            <param name="point"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationRuler.SetPointsVi(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Override method to set the points in Vi for AnnotationRuler
            </summary>
            <param name="points">list of points in Vi to replace the current points</param>
        </member>
        <member name="M:Claron.WIF.AnnotationRuler.Draw(System.Drawing.Graphics)">
            <summary>
            Implements the abstact Draw method
            </summary>
            <param name="g">Graphics context</param>
        </member>
        <member name="M:Claron.WIF.AnnotationRuler.HandleMouseEvent(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Handle mouse events for AnnotationRuler
            </summary>
            <param name="ePrev">previous mouse event</param>
            <param name="e">current mouse event</param>
            <param name="mouseUp">flag indicating mouse up is included in this event</param>
            <returns>true if handled</returns>
        </member>
        <member name="P:Claron.WIF.AnnotationRuler.LengthFormatter">
            <summary>
            Property to define the ruler formatter delegate
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationRuler.Length">
            <summary>
            Property to return the length of the ruler
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationRuler.Points">
            <summary>
            Set/Get AnnotationRuler points
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationRuler.Cursor">
            <summary>
            Cursor for AnnotationRuler
            </summary>
        </member>
        <member name="T:Claron.WIF.AnnotationAngle">
            <summary>
            AnnotationAngle represents an overlay graphic of a two lines to provide angle measurements.
            </summary>
        </member>
        <member name="F:Claron.WIF.AnnotationAngle.BasicFormatter">
            <summary>
            Default formatter for AnnotationAngle
            </summary>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.#ctor(Claron.WIF.Viewport)">
            <summary>
            Basic constructor
            </summary>
            <param name="vp"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.#ctor(Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Constructor used to specify viewport management if necessary
            </summary>
            <param name="vp"></param>
            <param name="managedByViewport"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.SetPoint(System.Int32,Claron.WIF.Vector3)">
            <summary>
            Updates a specific point for AnnotationAngle
            </summary>
            <param name="index"></param>
            <param name="point"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.SetPointVi(System.Int32,System.Drawing.PointF)">
            <summary>
            Updates an existing point (during mouse interaction) from Vi to Pr for AnnotationAngle
            </summary>
            <param name="index">index to the point of interest</param>
            <param name="point">point in Vi</param>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.SetPointsVi(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Override method to set the points in Vi for AnnotationRuler
            </summary>
            <param name="points">list of points in Vi to replace the current points</param>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.MovePoints(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Utility method for updating all the points (during mouse interaction) for AnnotationAngle
            </summary>
            <param name="ePrev">prevous mouse event</param>
            <param name="e">current mouse event</param>
            <returns>true if handled</returns>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.RestoreState(Claron.WIF.Viewport,Claron.WIF.Viewport)">
            <summary>
            Method to be called during viewport deserialization to restore the state of AnnotationAngle
            </summary>
            <param name="vp">Viewport handle</param>
            <param name="other">old Viewport handle</param>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.Draw(System.Drawing.Graphics)">
            <summary>
            Implements the abstact Draw method
            </summary>
            <param name="g">Graphics context</param>
        </member>
        <member name="M:Claron.WIF.AnnotationAngle.HandleMouseEvent(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Handle mouse events for AnnotationAngle
            </summary>
            <param name="ePrev">previous mouse event</param>
            <param name="e">current mouse event</param>
            <param name="mouseUp">flag indicating mouse up is included in this event</param>
            <returns>true if handled</returns>
        </member>
        <member name="P:Claron.WIF.AnnotationAngle.AngleValueFormatter">
            <summary>
            Property to define the angle formatter delegate
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationAngle.ArcStyle">
            <summary>
            Set/Gets the style of the arc marker
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationAngle.Angle">
            <summary>
            Gets the value of the angle
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationAngle.Points">
            <summary>
            Set/Get the points for AnnotationAngle
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationAngle.Cursor">
            <summary>
            Cursor for AnnotationAngle
            </summary>
        </member>
        <member name="M:Claron.WIF.AnnotationText.#ctor(Claron.WIF.Viewport)">
            <summary>
            Basic constructor
            </summary>
            <param name="vp"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationText.#ctor(Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Constructor used to specify viewport management if necessary
            </summary>
            <param name="vp"></param>
            <param name="managedByViewport"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationText.IsMouseOverBottomRightCorner(System.Drawing.Point)">
            <summary>
            Checks whether mouse is over Bottom right corner of the TextBox.
            This is used in adjusting the size of the TextBox
            </summary>
            <param name="e"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.AnnotationText.RestoreState(Claron.WIF.Viewport,Claron.WIF.Viewport)">
            <summary>
            Method to be called during viewport deserialization to restore the state of AnnotationText
            </summary>
            <param name="vp">Viewport handle</param>
            <param name="other">old Viewport handle</param>
        </member>
        <member name="M:Claron.WIF.AnnotationText.SetEditState(Claron.WIF.Viewport,Claron.WIF.Annotation.EditState)">
            <summary>
            AnnotationText specific method to set the edit state
            </summary>
            <param name="vp"></param>
            <param name="editState"></param>
        </member>
        <member name="M:Claron.WIF.AnnotationText.HitTest(System.Drawing.Point,Claron.WIF.Annotation.HitType@,System.Int32@)">
            <summary>
            Hit test for AnnotationText
            </summary>
            <param name="point">input point</param>
            <param name="hitType">returns the status of the hit test</param>
            <param name="index">returns the index of the point if the hit test was a point</param>
        </member>
        <member name="M:Claron.WIF.AnnotationText.HandleMouseEvent(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Mouse handler for AnnotationText
            </summary>
            <param name="e0"></param>
            <param name="e1"></param>
            <param name="mouseUp"></param>
            <returns></returns>
        </member>
        <member name="E:Claron.WIF.AnnotationText.ChangedEvent">
            <summary>
            To be deprecated.  Use PointsInteracted event instead.
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationText.TextBox">
            <summary>
            Handle to underlying AlphaBlendTextBox.  It is not recommended to use this property directly.
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationText.PointsSpace">
            <summary>
            Set/Get coordinate space for the text anchor point
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationText.Points">
            <summary>
            Set the location of the text
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationText.SnapshotMode">
            <summary>
            Get/Set Snapshot mode
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationText.Label">
            <summary>
            Get/Set AnnotationText label property
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationText.Font">
            <summary>
            Get/Set AnnotationText font property
            </summary>
        </member>
        <member name="P:Claron.WIF.AnnotationText.Color">
            <summary>
            Get/Set AnnotationText color property
            </summary>
        </member>
        <member name="T:Claron.WIF.AnnotationText.CoordinateSpace">
            <summary>
            Specify the space in which point are drawn.  Set the z component to double.NaN for Fractional and Screen to show Text
            on all slices for Viewport.IsFlatSlabType.  To designate that the text is to be displayed on a specific image, set the
            z coordinate to the z value of the image's PatientRCS value.
            </summary>
        </member>
        <member name="T:Claron.WIF.Collage">
             <summary>
             <para>Collage represents an array of cross-correlated viewports tiled within
             a rectangular display region. </para>
            
            <para> The Collage usually manages a combination of full-volume and slab viewports providing
             cross-correlated views of one or more slice-stacks. One slice stack is taken to be the
             main reference slice stack to which all other slice stacks are mapped to using a set
             of space mappers. The viewports can be tiled in an arbitrary layout.
             In each layout, the tiles are indexed left-to-right, top-to-bottom, and each of
             the viewports is set to a specific type, which defines its initialized state and
             the range of modifications the user is allowed to make in its viewing parameters.</para>
            
             <para>The Collage creates and maintains the Viewport and Camera objects it needs, but they
             are also accessible to the application. The user can interact directly with the Collage
             and its contained viewports, or the application can modify the contents of the Collage
             programmatically.</para>
            
             <para>The general state of the collage is a combination of its own properties and the
             properties of its viewports and their input cameras. The Collage display is
             refreshed when needed at a rate of 60Hz (the speed of the event loop of Windows).
             Thus, a change to one of the parameters affecting what should be shown is
             automatically reflected by the Collage shortly afterwards.
             The application may also control the refresh mechanism by modifying the
             properties of the global RefreshPicturesTimer, which affects all Collage objects
             (even new ones being instantiated).</para>
            
             <para>The client can override the default behavior of the Collage by using the events fired
             before or after the behavior was set.
             </para>
             
             <para>A Collage object is referenced by UI controls and the global referesh timer and will 
             thus not be garbage-collected automatically as other WIF objects. To allow GC, the client needs
             to explicitly call Discard.</para>
             
             <para>When displaying 3D image data (SliceStack) the collage maintains a  
             "focus" space (RCS) with which viewports move, rotate and zoom in a cross-correlated 
             fashion. The focus space may be controlled by user interactions with the viewports.
             When a Lumen object as assigned to the Collage, the focus space is attached
             to a location along the lumen's centerline.</para>
            
             <para>There is an advantage to having odd camera output width and height in having a center pixel
             (and column or row), which doesn't change with resolution changes, and around which pixel
             distances are symmetrical, which is especially useful for lumen-related display.
             For the above reasons, the Viewport sets the output camera size to odd. To
             eliminate a camera->screen zoom operation which blurs the output image and takes a
             substantial amount of time, the Collage ensures the PictureBox width and height are odd.
             If the panel is even-sized, the outPictureBox would be 1 pixel larger. The extra
             line or row is then hidden beyond the right or bottom of the panel.</para>
             </summary>
        </member>
        <member name="F:Claron.WIF.Collage.PolylineEditActivationDistancePixels">
            <summary>
            Controls the maximum distance from the cursor an editable polyline needs to be
            before it is activated for editing.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.DefaultThreeDRenderMode">
            <summary>
            Determines what render mode is set when a 3D viewport is created or reset by the Collage
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.LinkedGroups">
            <summary>
            A collection of collages to link.
            Example: Collage.LinkedGroups("Group1") = New CollagesLink(Collage0, Collage1)
            References to Collage groups needs to be released when not needed to eliminate memory hogging.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SyncCollages">
            <summary>
            Sync collage linking.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.Remoter">
            <summary>Indicates whether remoter objects are used, supporting client-server operation.
            Note: remoter object lies at the server side.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._IsSwivelBatchRun">
            <summary>
            The slice stacks handled by the collage.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._ssList">
            <summary>
            The slice stacks handled by the collage.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._ssShownList">
            <summary>
            The slice stack(s) being shown (one, or multiple composited).
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._f2p">
            <summary>
            The focus to patient scan mapper.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._f2pMappedOutside">
            <summary>
            Boolean to hold whether the focus to patient mapper center in target
            is mapped outside of the slice stack.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Collage._f2pOnReset">
            <summary>
            Hold a copy of the patient scan mapper at the time viewports reset
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._forceFastRefresh">
            <summary>
            Property to force fast refresh if required. The EnsureInteractivity
            property must also be set to true for this property to have any
            effect.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.MouseInteractionSuspended">
            <summary>
            If true, mouse events are ignored by the collage
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._maximizeViewportOnMouseDoubleClick">
            <summary>
            Property to get/set whether mouse double click events should maximize the clicked viewport.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.RefreshSuspended">
            <summary>
            if true, the collage will not initiate any viewport refreshing (timer ticks are ignored)
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Collage._InteractionModeUpdatingSuspended">
            <summary>
            If set to true, the collage will not modify the interaction mode of the viewports
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Collage.ToolStripAlwaysShowOrientation">
            <summary>
            If false, orientation toolbar is automatically shown only for 3D viewports.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.RefreshDisabled">
            <summary>
            When set to true, timer calls to refresh this collage are ignored
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.OneBigViewportContainer">
            <summary>
            The container of OneBigViewport. If not set, or set to Nothing, then the form containing the collage
            is used by default.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportMaximize(Claron.WIF.Viewport)">
            <summary>
            Maximizes the size of the given viewport to cover all of the collage area.
            <see cref="P:Claron.WIF.Collage.OneBigViewport"/>
            </summary>
            <param name="Vp"></param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportUnMaximize">
            <summary>
            Restores the specified layout in case a viewport is maximized 
            (<see cref="P:Claron.WIF.Collage.OneBigViewport"/> and <see cref="M:Claron.WIF.Collage.ViewportMaximize(Claron.WIF.Viewport)"/>)
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._clippers">
            <summary>
            Array storing clippers for each viewport.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ClipperGet(Claron.WIF.Viewport)">
            <summary>
            Returns the clipper for the given viewport.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ClipperSet(Claron.WIF.Viewport,Claron.WIF.Clipper)">
            <summary>
            Sets the clipper for the given viewport.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._posteriorOnRightInSagittalViewport">
            <summary>
            If true then the posterior of the patient is displayed on the right in the sagittal viewport.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStackAddAndShow(Claron.WIF.SliceStack,System.Boolean)">
            <summary>
            Shows a slice stack in all viewports of the collage
            If the SS is not already in the SliceStacks list, it is added to that list.
            The viewport polylines are cleared when a new slice stack is shown.
            </summary>
            <param name="value"></param>
            <param name="PreserveView">If true, the viewports will not be reset and their overlays
            will be preserved when a new SS is shown</param>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStackAddAndShow(Claron.WIF.SliceStack)">
            <summary>
            Shows a slice stack in all viewports of the collage
            If the SS is not already in the SliceStacks list, it is added to that list.
            The viewport polylines are cleared when a new slice stack is shown.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._preventResetViewports">
            <summary>
            Set to True to prevent resetting of viewports when adding and showing a new slice stack.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStackReplaceAndShow(Claron.WIF.SliceStack,System.Boolean)">
            <summary>
            Replaces all slice stacks in the list of slice stacks being handled
            by the collage with the given one and shows it in all viewports.
            If tissues have dimensions different than the slicestack, they are discarded (since
            rendering will lead to an exception anyhow).
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStacksClear">
            <summary>
            Clears the list of slice stacks handled by the collage
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStackRemoveAllWithSeriesInstanceUid(System.String)">
            <summary>
            Removes all slice stacks with the given series instance UID.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._ssAutoCycleTimer">
            <summary>
            AutoSliceStackCycling timer
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._viewportImages">
            <summary>
            The images in the viewports.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._viewportImageSet">
            <summary>
            The images to draw when flipping.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.AutoCycleSliceStacksTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Periodically updates the viewports with the images showing the flipping of the slice tacks.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._fusionType">
            <summary>
            The fusion type.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._compositingRadius">
            <summary>
            Compositing radius for local rigid view.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.UpdateViewportCompositingRadii">
            <summary>
            Updates the compositing radii for the viewports.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.GetViewportFocalPointInFixedSliceStackGridIndexCoordinates">
            <summary>
            Returns the focal point of the viewports in the fixed slice stack grid index
            coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.GetViewportFocalPointInPatientScanCoordinates">
            <summary>
            Returns the focal point of the viewports in patient scan coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.GetViewportFocalPointInFixedSliceStackRCSCoordinates">
            <summary>
            Returns the focal point of the viewports in the fixed slice stack RCS coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.CalculateLocalRigidTransformationAtFocalPoint">
            <summary>
            Calculates the local rigid transformation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.CalculateLocalRigidTransformationAtFocalPoint(System.Double[],System.Double,System.Boolean)">
            <summary>
            Calculates a local rigid transformation which aligns the fixed with the moving slice stack.
            </summary>
            <param name="fp">The focal point in slice stack RCS coordinates of the first slice stack.</param>
            <param name="radius">Radius to use in calculating the local rigid transformation.</param>
            <param name="doRotation">Whether to do rotations in the calculated transformation.</param>
            <returns>The space mapper similarity representing the local rigid transformation.</returns>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStackAdd(Claron.WIF.SliceStack)">
            <summary>
            Adds a slice stack to the list.
            </summary>
            <param name="ss">The SliceStack to add</param>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStackRemove(Claron.WIF.SliceStack)">
            <summary>
            Removes a slice stack.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SliceStackPresent(Claron.WIF.SliceStack)">
            <summary>
            Returns true if a slice stack is contained in the list of slice
            stacks being handled by the collage.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.Panel(System.Int32)">
            <summary>
            Returns the Panel object (sub-region of the collage containing a viewport) at the given
            index in the Panels list.
            Panels are created and indexed (top/left to bottom/right) when a layout is set.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.Panel(System.Double,System.Double)">
            <summary>
            Returns the panel at (or near) the given fractional position
            </summary>
            <param name="X0to1">The fractional X position in the collage, clamped</param>
            <param name="Y0to1">The fractional Y position in the collage, clamped</param>
        </member>
        <member name="M:Claron.WIF.Collage.Panel(System.Windows.Forms.PictureBox)">
            <summary>
            Returns the Panel object (sub-region of the collage containing a viewport) containing
            the given PictureBox (usually the outPictureBox of a viewport). If none is found,
            returns Nothing
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.PanelsFixSplitters(System.Boolean)">
            <summary>
            Allow or disallow the moving of the panel splitters (to resize the viewports) by the user
            </summary>
            <param name="ToFixed">Fixed (true) or movable (false)</param>
        </member>
        <member name="M:Claron.WIF.Collage.IsMouseOverGet(Claron.WIF.Viewport)">
            <summary>
            True iff the mouse is over a particular Viewport (looks after null references properly)
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportGet(System.Int32)">
            <summary>
            The viewport with index i.
            Viewports are indexed as the layout is initially set, and keep their index even as they get
            reassigned to different panels.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportGet(System.Windows.Forms.PictureBox)">
            <summary>
            The viewport displaying in the given PictureBox (or Nothing if none is found).
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportGet(System.Windows.Forms.Control)">
            <summary>
            The viewport assigned to the given panel/container (or Nothing if none is found).
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportGet(System.String,System.String)">
            <summary>
            Gets the first viewport with the given value in the given key of the Viewport's AssociatedData.
            If no such viewport exists, Nothing is returned.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportGet(System.String)">
            <summary>
            Gets the first viewport with the Name equals the given string.
            If no such viewport exists, Nothing is returned.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportGet(Claron.WIF.Viewport.TypeEnum)">
            <summary>
            Gets the first viewport with the given type.
            If no such viewport exists, Nothing is returned.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportGet(System.Double,System.Double)">
            <summary>
            Returns the viewport at (or near) the given fractional position.
            </summary>
            <param name="X0to1">The fractional X position in the collage, clamped</param>
            <param name="Y0to1">The fractional Y position in the collage, clamped</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ContainsViewport(Claron.WIF.Viewport)">
            <summary>
            Returns true if the given viewport is one of the viewports maintained by the collage.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportsGet(System.Int32)">
            <summary>
            Accesses a viewport using its index.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportIGet(System.Windows.Forms.PictureBox)">
            <summary>
            Returns the index of the viewport associated with the given PictureBox, or -1 if none.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportIGet(Claron.WIF.Viewport)">
            <summary>
            Returns the index of the viewport associated with the given viewport, or -1 if none.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._IsSharedZoomAbsolute">
            <summary>
            If set to True then the same zoom factor will be used for all viewports.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.Tissue3DGet(System.Int32)">
            <summary>
            Assign a tissue region at a given indexed slot, to be applied to 3D views (when enabled).
            The setting can be overridden at a specific viewport by setting the tissue at the
            viewport's camera input. Only InCamera (cameras(0)) of the viewport is impacted.
            This tissue setting will be applied by default
            when viewports are created or reset (eg, when modifying layouts).
            If the BaseRGB property of the tissue is not set, it is set to its default setting
            DefaultTissueRGBs(i0to6).
            </summary>
            <param name="i">index: 0 to 6, anything higher will be ignored</param>
        </member>
        <member name="M:Claron.WIF.Collage.Tissue3DSet(System.Int32,Claron.WIF.Tissue)">
            <summary>
            Assign a tissue region at a given indexed slot, to be applied to 3D views (when enabled).
            The setting can be overridden at a specific viewport by setting the tissue at the
            viewport's camera input. Only InCamera (cameras(0)) of the viewport is impacted.
            This tissue setting will be applied by default
            when viewports are created or reset (eg, when modifying layouts).
            If the BaseRGB property of the tissue is not set, it is set to its default setting
            DefaultTissueRGBs(i0to6).
            </summary>
            <param name="i">index: 0 to 6, anything higher will be ignored</param>
            <param name="value"></param>
        </member>
        <member name="M:Claron.WIF.Collage.TissueColorwashSet(System.Int32,Claron.WIF.Tissue)">
            <summary>
            Assign a tissue region at a given indexed slot, to be applied as colorwash to
            flat slab views (when enabled). Only InCamera (cameras(0)) of the viewport is impacted.
            The setting can be overridden at a specific viewport by setting the tissue at the
            viewport's camera input.
            This tissue setting will be applied by default
            when viewports are created or reset (eg, when modifying layouts).
            If the BaseRGB property of the tissue is not set, it is set to its default setting
            DefaultTissueRGBs(i0to6).
            <param name="value"></param>
            </summary>
            <param name="i">index of tissue (for future reference)</param>
        </member>
        <member name="M:Claron.WIF.Collage.TissuesColorwash">
            <summary>
            Returns all the colorwash tissues that are not nothing
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.TissueEnabled(System.Int32,System.Boolean)">
            <summary>
            Enables or disables the effect of a tissue at a given index in all viewport cameras 
            where it is referenced.
            Can also enable or disable all tissues in all cameras (when null is passed instead of a tissue).
            </summary>
            <param name="i">index: for 3D camera higher than 6, will be ignored</param>
            <param name="ToValue">The value, true or false, to set the TissueEnabled property</param>
        </member>
        <member name="M:Claron.WIF.Collage.TissueEnabled(Claron.WIF.Tissue,System.Boolean)">
            <summary>
            Enables or disables the effect of a tissue in all viewport cameras where it is referenced.
            Can also enable or disable all tissues in all cameras (when null is passed instead of a tissue).
            </summary>
            <param name="Tis">If null, the all tissues in all cameras are enabled or disabled.</param>
            <param name="ToValue">The value, true or false, to set the TissueEnabled property</param>
        </member>
        <member name="M:Claron.WIF.Collage.TissueColorwashEnabled(System.Int32)">
            <summary>
            Returns an indication of whether the TissueColorwash with index I exists and
            is visible in any of the viewports.
            </summary>
            <param name="Index">The index, 0-6, of the tissue</param>
        </member>
        <member name="M:Claron.WIF.Collage.TissuesClear">
            <summary>
            Sets all the tissues3D and tissuesColorwash, as well as all camera tissues to Nothing
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.LumenDisplayPixelMmSet(System.Double)">
            <summary>
            Sets the pixel size for all viewports displaying the lumen
            (ribbon or cross-section).
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.#ctor(System.Windows.Forms.Panel,Claron.WIF.Layout,System.Boolean)">
            <summary>
            Creates a new Collage with an initial layout (which may be custom).
            </summary>
            <param name="Container">The panel hosting the collage's viewports.</param>
            <param name="InitialLayout">The collage's initial layout descriptor</param>
            <param name="UseRemoters">Optional: if true, remoter helper objects will be used for objects created
            If Nothing - standalone mode.
            If "", remoting objects are used, but in the same process for ease of debugging</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.#ctor(System.Windows.Forms.Panel,Claron.WIF.Layout.PresetEnum,System.Boolean)">
            <summary>
            Creates a new Collage with an initial preset layout.
            </summary>
            <param name="Container">The panel hosting the collage's viewports.</param>
            <param name="LayoutPreset">Optional: the collage's initial layout</param>
            <param name="UseRemoters">Optional: if true, remoter helper objects will be used for objects created
            by the collage. If Collage.StartRemoting was called, those objects will be created
            in the server process.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.InitCollage(System.Windows.Forms.Panel,Claron.WIF.Layout)">
            <summary>
            Reset the collage to its initial state
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.InitClearCanvas">
            <summary>
            Helper function that triggers loading of the ClearCanvasDicom DLL
            Only sideeffect is that when ClearCanvas is used for real data loading that the DLL load delay is hidden.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.Reset(System.Windows.Forms.Panel,Claron.WIF.Layout)">
            <summary>
            Resets the state of the collage - recommended to be called instead of New if possible.
            Must be called from the same thread which created the Container panel
            </summary>
            <param name="Container">The panel control in which the collage will display.</param>
            <param name="InitialLayout">The initial layout.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.SetNewLayout(Claron.WIF.Layout,System.Boolean)">
            <summary>
            Changes the layout of the collage to match the layout descriptor provided
            </summary>
            <param name="NewLayout">The layout descriptor to apply.</param>
            <param name="TryToPreserveViewports">If true, a viewport will be preserved whenever 
            there is a single viewport of the same type in both the current and new layouts
            rather then be discarded.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportsReset(Claron.WIF.Viewport.TypeEnum[])">
            <summary>
            Assigns types to the viewports and initializes their presentation accordingly
            </summary>
            <param name="VpTypes">A list of the viewport type to assign to each panel, ordered by panel index.
            If "blank" or unspecified, no viewport will be assigned to that panel.
            If PreassignedPanel, the viewport currently assigned to the panel will be preserved (the viewport must exist).
            If the list is empty, the current type assignments is assumed.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportsReset(System.Collections.Generic.Dictionary{System.Windows.Forms.Panel,Claron.WIF.Viewport.TypeEnum})">
            <summary>
            Resets the state of the viewports to its default (startup) and, optionally,
            sets the type of viewports associated with specific panels.
            The Lumen and Tissue settings assigned at the Collage level are applied to
            the viewports as appropriate
            </summary>
            <param name="VpTypeByPanel">The types to set for each panel. If none is set (count=0), the types remain unchanged.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.Discard">
            <summary>
            Must be called to free up internal resources, or it will remain in memory!
            </summary>
            <remarks>Ensures event handlers and delegates are freed as well, or the collage
            will remain in memory nevertheless</remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ResetAsyncProperties(System.Boolean)">
            <summary>
            Reset properties related to asynchronous rendering in client/server mode,
            placing them in a state for maximum remoting performance
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.GetHashCode">
            <summary>
            Returns the hash code of the collage object. The hash code is
            calculated excluding the slice stacks being referenced by the collage.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SaveStateWithReferencedData(System.String,System.String)">
            <summary>
            Stores the state of the collage in a file, and, if not already previously stored,
            the SliceStackShown and referenced Bitvols. If SliceStackShown was loaded from image files
            and not subsequently modified, it is referenced there, and is not stored again.
            </summary>
            <param name="StateFilePath">The file in which to store the collage state</param>
            <param name="ReferencedDataDirectory">The path to the directory in which to keep referenced data</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.SaveStateWithReferencedData(System.String,System.String,System.String@,System.Collections.Generic.List{System.String}@,System.String@)">
            <summary>
            Stores the state of the collage in a file, and, if not already previously stored,
            the SliceStackShown and referenced Bitvols. If SliceStackShown was loaded from image files
            and not subsequently modified, it is referenced there, and is not stored again.
            </summary>
            <param name="StateFilePath">The file in which to store the collage state</param>
            <param name="ReferencedDataDirectory">The path to the directory in which to keep referenced data</param>
            <param name="SerializedStackFolder">The path of the folder in which the referenced 
            image files were stored (on return)</param>
            <param name="SerializedSliceFileNames">The names of the image files in SerializedStackFolder</param>
            <param name="SerializedBvsFolder">The path of the folder in which the bitvols were stored</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.SaveStateWithoutReferencedData(System.String)">
            <summary>
            Stores the state of the collage excluding the slice stack and the bitvols.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SaveStateWithoutReferencedData(System.IO.Stream)">
            <summary>
            Stores the state of the collage excluding the slice stack and the bitvols.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.UpdateLayout">
            <summary>
            Update the layout object to reflect the current state of the panels and viewports
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.RestoreState(System.String,System.String)">
            <summary>
            Restores the state of the collage from a file containing a binary serialized Collage
            </summary>
            <param name="filePath">The file containing the state.</param>
            <param name="ObjectUid">Part of the remoter resialization filename, ignored if local restore</param>
            <returns>A boolean variable indicating if it has successfully RestoreState or not. If
            it failed to restore, an error message box is shown to the user.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.RestoreState(System.String)">
            <summary>
            Restores the state of the collage from a file containing a binary serialized Collage
            </summary>
            <param name="filePath">The file containing the state.</param>
            <returns>A boolean variable indicating if it has sucessfully RestoreState or not. If
            it failed to restore, an error message box is </returns>
        </member>
        <member name="M:Claron.WIF.Collage.RestoreState(System.IO.Stream,System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,Claron.WIF.SliceStack,System.Boolean)">
            <summary>
            Restores the state of the collage using the given input stream and formatter. An optional
            slice stack can be given to the subroutine to set the slice stack for the collage.
            </summary>
            <param name="stream">The stream to restore from.</param>
            <param name="formatter">The formatter to use.</param>
            <param name="sliceStack">The slice stack to show after the collage has been restored
            (default value = null).</param>
            <param name="closeStreamAfterRestore">If set to true then the stream will be closed after the state
            has been restored, otherwise it will be left open.</param>
            <returns>Whether the restore was successful. If it wasn't successful, an error message is displayed
            to inform the user.</returns>
        </member>
        <member name="M:Claron.WIF.Collage.StateSaveUi(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Saves only the data independent UI elements of all Viewports in the collage that the user may have changed interactively.
            I.e. this is a lightweight shallow state save.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.StateRestoreUi(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Restores only the data independent UI elements of all Viewports in the collage that the user may have changed interactively.
            I.e. this is a lightweight shallow state restore.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.RestoreMasksAndTissues(System.String)">
            <summary>
            Restores the bitvols (masks, tissues) previously stored by reference when
            the collage state was saved. Other properties of the tissues are not restored.
            </summary>
            <param name="SerializedBvsFolder">The path to the folder in which the bitvols of the masks and tissues
            were stored</param>
        </member>
        <member name="M:Claron.WIF.Collage.RestoreSsFromReference(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Restore SliceStackShown using the saved file paths.
            Returns whether SliceStackShown was actually set. May throw exceptions if cannot find one or more
            of the files needed.
            </summary>
            <param name="SsSerializedStackFolder">The path to the folder containing the images</param>
            <param name="SsSerializedSliceFileNames">The names of the image files in the folder</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportRotateByVirtualTrackball(Claron.WIF.Viewport,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Applies a rotation to the viewport to change the appearance of its contents
            as if the mouse was controlling a virtual trackball, as per the viewport's interaction mode
            </summary>
            <param name="VP">The viewport over which the mouse is moving.
            If its interaction mode is set to one of RotateHorizontal, RotateVertical or Twist, the mode
            will apply. Otherwise, Rotate3D mode is assumed.</param>
            <param name="CurrMouseXY">Current mouse position in viewport coordinates</param>
            <param name="PrevMouseXY">Previous mouse position in viewport coordinates</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportRotationSet(Claron.WIF.Viewport,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Sets the viewport's camera rotation. If the viewport ToFocus property is not nothing,
            rotates the Focus to create the desired rotation (ie, all other viewports associated with the
            focus will be rotated correspondingly).
            </summary>
            <param name="VP">The viewport to set</param>
            <param name="XinPatient">A vector in the patient's coordinates pointing in the desired
            viewport's X direction. Does not need to be a unit vector.</param>
            <param name="YinPatient">A vector in the patient's coordinates, perpendicular to
            XinPatient and pointing in the desired viewport's Y direction.
            Does not need to be a unit vector.</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportJoystickMove(Claron.WIF.Viewport,System.Double)">
            <summary>
            Moves the camera in the a viewport forwards or backwards using the mouse cursor
            as a flight joystick to direct the movement.
            </summary>
            <param name="StepMm"></param>
            <param name="VP"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportShowImage(Claron.WIF.Viewport,Claron.WIF.ImageU12,System.Boolean)">
            <summary>
            Show a standalone (2D) image in a viewport, modifying, if needed, the viewport's camera
            properties to ensure the image is shown (all other settings are unaffected).
            Use ViewportZoom to reset the zoom/pan to show the full image
            Note that the InSliceStack property of that camera may be modified.
            </summary>
            <param name="VP">A viewport of type TwoD</param>
            <param name="Img"></param>
            <param name="ResetViewingParameters">If true, the image zoom, pan and windowing (if relevant) will be reset
            to show the full image at its header-stored windowing</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportShowImage(System.Int32,Claron.WIF.ImageU12,System.Boolean)">
            <summary>
            Show a standalone (2D) image in a viewport, modifying, if needed, the viewport's camera
            properties to ensure the image is shown (all other settings are unaffected).
            Use ViewportZoom to reset the zoom/pan to show the full image
            Note that the InSliceStack property of that camera may be modified.
            </summary>
            <param name="ViewportI">The index of a viewport of type TwoD</param>
            <param name="Img">The image to show</param>
            <param name="ResetViewingParameters">If true, the image zoom, pan and windowing (if relevant) will be reset
            to show the full image at its header-stored windowing</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportShowImage(Claron.WIF.Viewport,Claron.WIF.ImageArgb)">
            <summary>
            Show a standalone (2D) ARGB image in a viewport, bypassing its camera.
            </summary>
            <param name="VP">A viewport of type TwoD</param>
            <param name="Img"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportShowImage(Claron.WIF.Viewport,Claron.WIF.ImageArgb,System.Boolean)">
            <summary>
            Show a standalone (2D) ARGB image in a viewport, bypassing its camera.
            </summary>
            <param name="VP">A viewport of type TwoD</param>
            <param name="Img"></param>  
            <param name="ResetViewingParameters">If true, the image zoom, pan and windowing (if relevant) will be reset
            to show the full image </param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportPositionToShowSlice(Claron.WIF.Viewport,System.Double)">
            <summary>
            Moves and rotates the viewport to ensure a given slice is shown at the center of the camera
            grid, oriented in its original orientation. Zoom and pan settings are unaffected (the view will
            move in depth only). If the viewport is associated with the focus, the focus would be moved
            as needed.
            </summary>
            <param name="VP">The affected viewport </param>
            <param name="SliceI">The index of the slice in the slice stack shown in the viewport (can be
            fractional for intermediate positions).</param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Collage.DefaultAutoComputeWCWW">
            <summary>
            The default policy for applying an automatic window-level computation on reset for all Collage instances. 
            </summary>
            <remarks>May be over-ridden using the instance variable Collage.AutoComputeWCWW</remarks>
        </member>
        <member name="F:Claron.WIF.Collage.AutoComputeWCWW">
            <summary>
            The default policy for applying an automatic window-level computation on reset for this Collage instance
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportWindowingReset(Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Resets the windowing center and width of the given viewport to its default setting.
            Does not propagate the settings to other viewports.
            </summary>
            <param name="VP"></param>
            <param name="_AutoComputeWCWW"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportWindowingReset(Claron.WIF.Viewport,Claron.WIF.Camera,System.Boolean)">
            <summary>
            Resets the windowing center and width of the given viewport to its default setting.
            Does not propagate the settings to other viewports.
            </summary>
            <param name="VP"></param>
            <param name="cam">target camera</param>
            <param name="_AutoComputeWCWW"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoom(Claron.WIF.Viewport,System.Double,Claron.WIF.Vector3)">
            <summary>
            Modifies the portion of the data seen in the viewport.
            The fixed point is either the focus (if viewport.ToFocus isnot Nothing) or the viewport
            center.
            If the viewport is associated with the focus RCS (viewport.ToFocus isnot Nothing)),
            all other viewport associated with the focus are affected as well.
            Similarly for a lumen type viewports.
            </summary>
            <param name="VP">The viewport to zoom</param>
            <param name="zoomFactor">A zoom factor of 1 corresponds to seeing the full data
            available for rendering. Higher factors correspond to more magnified views. </param>
            <param name="FixedPointVi">The location in the viewport (in index coordinates) that would stay
            fixed during the zoom (zoom center). If the vector is invalid or FocusAtViewportCenter
            is true then this parameter is ignored and the fixed point will be the focus or, when not
            referencing the focus, viewport center. </param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomDrag(Claron.WIF.Viewport,System.Double)">
            <summary>
            Modifies the given viewport's zoom factor as a result of dragging a given number of pixel unit
            </summary>
            <param name="VP"></param>
            <param name="PixelUnits">The number of pixel units the cursor was dragged (eg, in the Y direction)</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomDrag(Claron.WIF.Viewport,System.Double,Claron.WIF.Vector3)">
            <summary>
            Modifies the given viewport's zoom factor as a result of dragging a given number of pixel unit
            </summary>
            <param name="VP"></param>
            <param name="PixelUnits">The number of pixel units the cursor was dragged (eg, in the Y direction)</param>
            <param name="ZoomCenterVi">The location, in viewport index coordinates, around which to
            zoom. If invalid, zooms around the focus or center (in 3D or if no focus)</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomByRegionDiameter(Claron.WIF.Viewport,System.Double)">
            <summary>
            Sets the zoom factor of the viewport to show a region of the given diameter
            (either in width or height, whichever is smaller)
            </summary>
            <param name="VP">The viewport to zoom</param>
            <param name="DiameterMm">The diameter of the region to be shown</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomByRegionWidth(Claron.WIF.Viewport,System.Double)">
            <summary>
            Sets the zoom factor of the viewport to show a region of the given width
            </summary>
            <param name="VP">The viewport to zoom</param>
            <param name="WidthMm">The max width of the region to be shown</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomByRegionHeight(Claron.WIF.Viewport,System.Double)">
            <summary>
            Sets the zoom factor of the viewport to show a region of the given height
            </summary>
            <param name="VP">The viewport to zoom</param>
            <param name="HeightMm">The max height of the region to be shown</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoom(Claron.WIF.Viewport,System.Double)">
            <summary>
            Modifies the portion of the data seen in the viewport.
            The fixed point is either the focus (if viewport.ToFocus isnot Nothing) or the viewport's
            center.
            If the viewport is associated with the focus RCS (viewport.ToFocus isnot Nothing)),
            all other viewport associated with the focus are affected as well.
            Similarly for a lumen type viewports.
            </summary>
            <param name="VP">The viewport to zoom</param>
            <param name="zoomFactor">A zoom factor of 1 corresponds to seeing the full data
            available for rendering. Higher factors correspond to more magnified views. </param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportsZoomPanOnBodyOrMask(Claron.WIF.Viewport)">
            <summary>
            Looks for preferably the Body mask in the associated data of the SliceStackShown
            (data tag string "Claron.WIF.SegmenterCouch.BodyMask")
            if not found it looks for an active mask in the given Viewport and other key Viewport.
            If successful the bounding box of the body (or mask) BitVol is computed.
            The generic fall back is the whole grid bounding box.
            That box is then used to reset the view. The zoom is set to fit to the box and the pan is set to get the box center into the Viewport center.
            The current focus2potient is not modified, so the current slice of each slab Viewport remains fixed.
            </summary>
            <param name="vpToFitBodyTo">The Viewport on which to do the box fitting. Assumed to be a 2d viewport.</param>
        </member>
        <member name="M:Claron.WIF.Collage.Viewport3dZoomPanOnBox(Claron.WIF.Viewport,Claron.WIF.Box)">
            <summary>
            Sets the pan and zoom of a 3D Viewport to show a specific region of the input slice stack
            bound by a given box.
            </summary>
            <param name="vp3d">The Viewport to affect.</param>
            <param name="boxSi">The bounds of the region to show in slicestack index coordinates</param>
        </member>
        <member name="M:Claron.WIF.Collage.Viewport3dZoomPanOnBoxPr(Claron.WIF.Viewport,Claron.WIF.Box)">
            <summary>
            Sets the pan and zoom of a 3D Viewport to show a specific region of the input slice stack
            bound by a given box.
            </summary>
            <param name="vp3d">The Viewport to affect.</param>
            <param name="boxPr">The bounds of the region to show in Patient Rcs coordinates</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomOnto3dMaskAndSpheres">
            <summary>
            Computes the bounding box of all masks used in the first 3d Viewport and all spheres shown in that Viewport.
            In case neither is preset it uses the volume data bounding box.
            It then zooms and centers all 3d (Is3DType) and 2d (IsFlatSlabType) Viewports onto that box,
            and sets the Focus2Patient to point onto the box center.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomOnto3dMasksSpheresVisibleSurfaces">
            <summary>
            Computes the bounding box of all masks used in the first 3d Viewport and all spheres and visible surfaces shown in that Viewport.
            In case neither is preset it uses the volume data bounding box.
            It then zooms and centers all 3d (Is3DType) and 2d (IsFlatSlabType) Viewports onto that box,
            and sets the Focus2Patient to point onto the box center.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomOnto3dMaskAndSpheresButKeepFocus">
            <summary>
            Computes the bounding box of all masks used in the first 3d Viewport and all spheres shown in that Viewport.
            In case neither is preset it uses the volume data bounding box.
            It then zooms all 3d (Is3DType) and 2d (IsFlatSlabType) Viewports onto that box.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomOnto3dMasksSpheresVisibleSurfacesButKeepFocus">
            <summary>
            Computes the bounding box of all masks used in the first 3d Viewport and all spheres and visible surfaces shown in that Viewport.
            In case neither is preset it uses the volume data bounding box.
            It then zooms all 3d (Is3DType) and 2d (IsFlatSlabType) Viewports onto that box.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomToShowModalityValues">
            <summary>
            Modifies the portion of the data seen in the flat viewports: zoom in just enough to see the Hu values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ZoomFlatSlabsToShowBox(Claron.WIF.Viewport,Claron.WIF.Box)">
            <summary>
            Modifies the portion of the data seen in the flat Viewports: zoom in to see all in the given box.
            Setup by the Viewport given as reference, the other flat Viewports will use the same scale factor.
            </summary>
            <param name="vpRef">the reference Viewport to compute the optimal scale for.</param>
            <param name="boxPr">The box that should be fully visible.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ZoomPanToShowBox(Claron.WIF.Box,System.Boolean)">
            <summary>
            Modifies the portion of the data seen in the Collage: zoom in to see all in the given box and pan/scroll to center on the box.
            Scale factors are computed independently for each Viewport.
            </summary>
            <param name="boxPr">The box that should be fully visible.</param>
            <param name="MoveFocusToBoxCenter">If set, the focus of the collage would be moved to the Box's center</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ZoomPanToShowBox(Claron.WIF.Box)">
            <summary>
            Modifies the portion of the data seen in the Collage: zoom in to see all in the given box and pan/scroll to center on the box.
            Scalefactors are computed independently for each vievport.
            </summary>
            <param name="boxPr">The box that should be fully visible.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportZoomFactor(Claron.WIF.Viewport)">
            <summary>
            Returns the ratio between the current viewing scale of the viewport and the
            scale required to show the full data. Corresponds to the
            parameter "ZoomFactor" supplied to ViewportZoom.
            If cannot be computed, returns 1.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportPanFactor(Claron.WIF.Viewport)">
            <summary>
            Returns the position of the center of the data bounding box
            relative to the viewport's center, scaled such that -1 is at the left/top edge
            and 1 is at the right/bottom edge.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportPan(Claron.WIF.Viewport,Claron.WIF.Vector3)">
            <summary>
            Sets the position of the center of the data bounding box
            within the viewport, scaled such that -1 is at the left/top edge
            and 1 is at the right/bottom edge. The center's Z position remains unchanged.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportPanDrag(Claron.WIF.Viewport,System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Pans a Viewport by an increment vector in a given Viewport's index space.
            </summary>
            <param name="onVp">The viewport</param>
            <param name="dX">Increment size in viewport X direction</param>
            <param name="dY">Increment size in viewport Y direction</param>
            <param name="dZ">Increment size in viewport Z direction</param>
            <param name="isInSliceStackSpacing">Set the increment to be in stack voxel spacing,
            otherwise in camera voxel spacing (Z = slab thickness dimension). Default value = False</param>
            <param name="stopAtSliceStackBoundary"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.MoveFocusLocationKeepingOtherViewInPlace(Claron.WIF.Vector3)">
            <summary>
            Move the focus location such that, it will try to keep back ground image of slab viewports
            as unchanged as possible.
            </summary>
            <param name="NewFocus"></param>
        </member>
        <member name="M:Claron.WIF.Collage.MoveFocusLocation(Claron.WIF.Vector3)">
            <summary>
            Relocates the focus position in the PatientScan RCS.
            Like Focus2Patient.CenterInTarget = NewLocPr, but also looks after the implications.
            </summary>
            <param name="NewLocPr">New position</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.FocusRecenterInViewports">
            <summary>
            Changes the display so that the current focus point is at the center of all viewports
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.FocusSetInViewport(Claron.WIF.Viewport,System.Int32,System.Int32)">
            <summary>
            Places the 3D focus point of the collage to a given (XY) position in a viewport.
            May have no effect if the given position has no corresponding 3D location (eg, 3D viewport
            background).
            </summary>
            <param name="VP">The viewport</param>
            <param name="ViX">X coordinate in the viewport (as in mouse position)</param>
            <param name="ViY">Y coordinate in the viewport (as in mouse position)</param>
            <returns>False iff the 2D position has no 3D mapping (eg, background),
            in which case the function has no effect.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.FocusMoveToViewportX(Claron.WIF.Viewport,System.Int32)">
            <summary>
            Moves the focus location to a given Viewport index X coordinate, keeping
            the Y coordinate unchanged.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.FocusMoveToViewportY(Claron.WIF.Viewport,System.Int32)">
            <summary>
            Moves the focus location to a given Viewport index Y coordinate, keeping
            the X coordinate unchanged.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportResetZoomPan(Claron.WIF.Viewport)">
            <summary>
            Sets the viewport's zoom factor to 1 (or 0.3 mm/pixel if lumen-related)
            and pans to show the data center in the center
            of the viewport (shift in XY only).
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.RefreshInCameraMappersFromFocusAsNeeded">
            <summary>
            Ensures that the InCameras ToPatientScan mappers reflect the state of the
            collage. The focuse is not allowed to move.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.RefreshInCameraMappersFromFocusAsNeeded(System.Boolean)">
            <summary>
            Ensures that the InCameras ToPatientScan mappers reflect the state of the
            collage.
            </summary>
            <param name="AllowFocusToMove">Determines whether the focus point (true) or the viewport (false)
            will be moved when needed to ensure the focus is seen in the viewport.</param>
        </member>
        <member name="M:Claron.WIF.Collage.RefreshInCameraMappersFromFocusAsNeeded(Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Ensures that the InCameras ToPatientScan mapper reflect the state of the
            viewport.ToFocus and Focus2Patient for a given slab viewport.
            When FocusAtViewportCenter is false, it also ensures that the focus appears
            in the viewport, either by moving the focus point, or by modifying vp.ToFocus.
            </summary>
            <param name="vp">The viewport for </param>
            <param name="AllowFocusToMove">Determines whether the focus point (true) or the viewport (false)
            will be moved when needed to ensure the focus is seen in the viewport.</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportSetToPatientScan(Claron.WIF.Viewport,Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Sets the mapping between a given viewport RCS and the PatientScan RCS, either
            directly or using the Focus2Patient mapper if the viewport ToFocus property is set.
            </summary>
            <param name="Vp"></param>
            <param name="VpToPatientScan">The desired mapping</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.FocusZoomOn(System.Double)">
            <summary>
            Set the pivot point of all the 3D viewports to be the focus point and zoom them
            to the given pixels/mm ratio
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.FocusCenter3DViewportsOn">
            <summary>
            Set the pivot/center point of all the 3D viewports to be the focus point
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.FocusCenterViewportsOn">
            <summary>
            Center all viewports on the focus point.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportSetPerspective(Claron.WIF.Viewport,System.Boolean,System.Boolean)">
            <summary>
            Sets a 3D viewport perspective on or off, modifying the camera position for suitable
            interactive controls
            </summary>
            <param name="VP"></param>
            <param name="ToTrue"></param>
            <param name="EndoluminalIfPerspective">If true, will set endoluminal mode together with perspective. Default value = True</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportSetSlabThickness(Claron.WIF.Viewport,System.Double)">
            <summary>
            Sets the thickness of a slab viewport. If a ribbon viewport,
            sets the thickness of other ribbon viewports to the same thickness.
            </summary>
            <param name="VP"></param>
            <param name="Mm"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.FocusUpdateReferenceMarkers">
            <summary>
            Sets the cross markers in all viewports to match the position of the focus point.
            It also sets the type of each cross marker.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportModifyWindowing(Claron.WIF.Viewport,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Modifies, based on mouse movement, the windowing/opacity/threshold
            used by the camera in the given viewport (and other viewports if they all reference the focus).
            </summary>
            <param name="VP">The viewport over which the mouse is moved</param>
            <param name="MouseDX">The mouse dragging displacement in X</param>
            <param name="MouseDY">The mouse dragging displacement in Y</param>
            <param name="StrictlyWindowing">If true the windowing parameters will be affected,
            otherwise the opacity tweaking will be affected if the rendering mode is shaded or
            the iso-surface threshold if the rendering mode is iso-surface.</param>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportInvertWindowing(Claron.WIF.Viewport)">
            <summary>
            Inverts the windowing setting of the given, and all related, viewports
            </summary>
            <param name="VP"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportsSetInvertedWindowing(System.Boolean)">
            <summary>
            Sets the windowing transform in all viewports to either normal (default) or inverted
            (low image values brighter than higher ones).
            </summary>
            <param name="value">New inverted setting for the viewports</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportsSwapPanels(Claron.WIF.Viewport,Claron.WIF.Viewport)">
            <summary>
            Switches the assignments of viewports to panels.
            </summary>
            <param name="VP0">One viewport</param>
            <param name="VP1">The other viewport to swap panels with</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportSetMIPPresetWindowing(Claron.WIF.Viewport,System.Int32)">
            <summary>
            Selects the windowing preset for MIP, moving the index forwards or backward by an increment.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ViewportSet2DPresetWindowing(Claron.WIF.Viewport,System.Int32)">
            <summary>
            Selects the windowing preset for 2D/slab, moving the index forwards or backward by an increment.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.Set2DWindowingToPreset(System.Int32)">
            <summary>
            Selects the windowing preset for 2D/slab to one of the pre-defined types.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.GetSnapshot">
            <summary>
            Returns a bitmap representing snapshot of the screen contents of the collage.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.SaveSnapshotAsJpeg(System.String)">
            <summary>
            Saves a snapshot of the screen contents of the collage and saves it
            as a JPEG picture.
            </summary>
            <param name="FullPath">The path to the file to save.</param>
            <remarks>Will raise an exception if something went wrong.</remarks>
        </member>
        <member name="M:Claron.WIF.Collage.SaveSnapshotAsJpeg(System.String,System.Byte[]@)">
            <summary>
            Saves a snapshot of the screen contents of the collage and saves it
            as a JPEG picture.
            </summary>
            <param name="FullPath">The path to the file to save.</param>
            <param name="buffer">Optional buffer to return the contents of the
            JPEG file as a buffer.</param>
            <remarks>Will raise an exception if something went wrong.</remarks>
        </member>
        <member name="M:Claron.WIF.Collage.SaveSnapshotAsJpegBuffer">
            <summary>
            Saves a snapshot of the screen contents of the collage and saves it
            as a JPEG buffer.
            </summary>
            <remarks>Will raise an exception if something went wrong.</remarks>
        </member>
        <member name="M:Claron.WIF.Collage.GetEncoder(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns the encoder based on the given input image format.
            </summary>
            <param name="format">The image format.</param>
        </member>
        <member name="M:Claron.WIF.Collage.TakeSnapshotSvrMip">
            <summary>
            Returns a snapshot bitmap showing the data rendered in both shaded and MIP.
            The caller should dispose of the bitmap.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.TakeSnapshotSvr6Mip6">
            <summary>
            Returns a snapshot bitmap showing the data rendered in both shaded and MIP from the 6 main
            directions (front/back, left/right, top/bottom).
            The caller should dispose of the bitmap.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ToolStripItem(Claron.WIF.Collage.ToolStripEnum,System.String)">
            <summary>
            Returns an item (usually a button) in one of the toolstrips by its Text property. If
            the item cannot be found, Nothing is returned.
            </summary>
            <param name="Strip">The toolstrip to search</param>
            <param name="ItemText">The text property of the item, not case sensitive.</param>
        </member>
        <member name="M:Claron.WIF.Collage.ToolStripButtonsHide(Claron.WIF.Collage.ToolStripEnum,System.String[])">
            <summary>
            Hides buttons in a pop up viewport toolstrips.
            </summary>
            <param name="Strip"></param>
            <param name="ButtonsText">The text property of each button to hide. Case insensitive.</param>
        </member>
        <member name="M:Claron.WIF.Collage.ToolStripButtonsShow(Claron.WIF.Collage.ToolStripEnum,System.String[])">
            <summary>
            Ensures certain buttons in a pop up viewport toolstrips is visible (available).
            </summary>
            <param name="Strip"></param>
            <param name="ButtonsText">The text property of each button to hide. Case insensitive.</param>
        </member>
        <member name="M:Claron.WIF.Collage.ToolStripButtonsShowAll(Claron.WIF.Collage.ToolStripEnum)">
            <summary>
            Makes all possible buttons in a pop up viewport toolstrips available
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ToolStripButtonsHideAll(Claron.WIF.Collage.ToolStripEnum)">
            <summary>
            Makes all possible buttons in a pop up viewport toolstrips unavailable
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ToolStripRefreshLayout">
            <summary>
            Refreshes the button availability, and their layout and location in
            the current primary and secondary strips. Makes these toolstrips visible.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.SetToolstripButtonsOpacity(System.Double)">
            <summary>
            Sets the icon on the buttons of the current primary and secondary toolstrips
            to the given alpha opacity (0 to 1)
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.ResetToolStripButtonAvailability">
            <summary>
            Sets the availability of buttons in the viewport pop-up toolstrips to their default
            setting.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.PresetItem_Click(System.Object,System.EventArgs)">
            <summary>
            Select the preset named sender.text in category sender.tag and apply to the viewport
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.ToolStripUpdateButtonsFromState(System.Windows.Forms.ToolStripItemCollection,Claron.WIF.Viewport)">
            <summary>
            This function updates the properties of visible buttons (but not their availability!).
            </summary>
            <param name="ToolControls"></param>
            <param name="VP"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.IsAnyViewport3D">
            <summary>
            Returns true if one of the viewports being shown is 3D type
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.PresetEditorValidationTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            This timer ensures that the preset shown in the form reflects what is being shown
            in the viewport.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.HandleMouseWheel(System.Int32,Claron.WIF.Viewport,System.Boolean)">
            <summary>
            Process MouseWheel events if the mouse cursor is over the Collage (ignored otherwise).
            Should only be called by the client when a control on the form (eg, scroll bar) incorrectly
            received the event when it should have been sent to the collage because the mouse cursor
            is actually over the collage. Otherwise, mouse wheel rotation is handled by the collage
            automatically when received by one of the PictureBoxes of its viewports.
            </summary>
            <param name="deltaClicks">Change in wheel position.</param>
            <param name="vp">the viewport</param>
            <param name="isZoomModeNotScrollMode">A flag to overwrite the default scroll behaviour with zoom behaviour (i.e. if Ctrl is pressed during scrolling)</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.KeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Process KeyDown events. Needs to be called by the container form, since KeyDown is a "global" event.
            Set the form's KeyPreview property to True to ensure the events are captured by the form.
            </summary>
            <param name="e">Event args as received by the container</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.KeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Process KeyUp events. Needs to be called by the container form, since KeyUp is a "global" event
            </summary>
            <param name="e">Event args as received by the container</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.CursorAnnotationRefresh(Claron.WIF.Viewport,System.Int32,System.Int32)">
            <summary>
            Refreshes the the display of the cursor annotation
            </summary>
            <param name="OnVP">Viewport it's on</param>
            <param name="X">X of cursor in Vi</param>
            <param name="Y">Y of cursor in Vi</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.CursorAnnotationRefresh">
            <summary>
            Refreshes the the display of the cursor annotation in its current location and visibility state
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.PolylineSetToRoi(Claron.WIF.Polyline,Claron.WIF.Viewport)">
            <summary>
            Converts a given polyline to an editable "region of interest" on a viewport.
            </summary>
            <param name="Pl">The polyline to convert. May or may not be already added to the viewport</param>
            <param name="OnVP">The viewport in which to create the ROI</param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Collage._isBeingRefreshed">
            <summary>
            Refresh variables.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Collage.IsBeingRefreshed">
            <summary>
            True during the RefreshAsNeeded() call of the Collage, false otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Claron.WIF.Collage._refreshDone">
            <summary>
            Used to hold whether a refresh was done since the last collage refresh.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage._frameNumber">
            <summary>
            The frame number for the collage. Incremented whenever a refresh is done.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.RefreshAsNeeded">
            <summary>
            The main function for drawing or modifying the collage appearance on the screen.
            </summary>
            <remarks>No reentry allowed - calls to Refresh within refresh will return immediately</remarks>
        </member>
        <member name="M:Claron.WIF.Collage.RefreshAsNeededProcessKeys">
            <summary>
            Checks the state of the keyboard and responds to special keys (not generating KeyDown events)
            with auto-repeat.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusMarkerVicinityPixels">
            <summary>
            Defines the distance from the focus marker location/cross hair in which the
            cursor is considered to be "over" it.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.MouseIsOverFocusPoint">
            <summary>
            Returns true iff the current mouse cursor is near or on the focus point in the current viewport.
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.MouseIsOverFocusCrossHairX">
            <summary>
            Returns true iff the current viewport has a cross-hairs marker and the current mouse cursor
            is near or on the vertical line of the cross hair (controlling/showing the X position).
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.MouseIsOverFocusCrossHairY">
            <summary>
            Returns true iff the current viewport has a cross-hairs marker and the current mouse cursor
            is near or on the horizontal line of the cross hair (controlling/showing the Y position).
            </summary>
        </member>
        <member name="M:Claron.WIF.Collage.RefreshPicturesTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Main update function, which gets call by the tick event of RefreshPicturesTimer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Claron.WIF.Collage.MouseClick">
            <summary>
            Occurs when a mouse button is pressed and released in a short time without moving the cursor before Collage has performed FocusPoint operations.
            See MouseClickEventHandler for details.
            </summary>
        </member>
        <member name="E:Claron.WIF.Collage.MouseClicked">
            <summary>
            Occurs when a mouse button is pressed and released in a short time without moving the cursor
            after Collage has finished processing FocusPoint operations.  See MouseClickedEventHandler for details.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.CurrToolStrip">
            <summary>
            Gets the current toolstrip from the CollageToolStrips Form.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ToolStripSecondary">
            <summary>
            Gets the current toolstrip from the CollageToolStrips Form.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Focus2Patient">
            <summary>
            The focus to patient scan mapper (itself, not a copy).
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.FocusPr">
            <summary>
            The focus position in the Patient RCS.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.FocusInSliceStackRCS">
            <summary>
            The focus position in the shown SliceStack's RCS. Not guaranteed to be within
            the bounding box of the slice stack. An invalid vector is return if no slice stack is shown.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Focus2PatientMappedOutside">
            <summary>
            Returns true if the focus to patient mapper center in target is
            mapped outside of the slice stack.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Focus2PatientOnReset">
            <summary>
            Hold a copy of the patient scan mapper at the time viewports reset
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Focus2PatientSinceReset">
            <summary>
            Return the transformation on the Focus2Patient mapper since the time viewports reset
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.MaximizeViewportOnMouseDoubleClick">
            <summary>
            Property to get/set whether mouse double click events should maximize the clicked viewport.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ViewportReferencePlanesClippedToSize">
             <summary>
             Applies to all 3D Viewports with active reference planes shown as
             texturemapped rectangles.
            
             When TRUE, clips the reference rectangles to the size
             of the data visible in the referenced Viewport.
            
             When FALSE, extends the reference rectangles to the edge of the dataset,
             and adds a rectangular Polyline onto the rectangle indicating the
             edge of the references Viewport.
             </summary>
             <value></value>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.FocusAtViewportCenter">
             <summary>
             When TRUE, upon any focus point location change, the views in all slab Viewports
             (Axial, Sagittal, coronal) are panned such that the focus point remains
             in the middle (optionally with offset - see FocusAtViewportCenterOffsetFraction).
            
             When FALSE, the view remains static and the focus point is allowed to move.
             If the focus point moves to the edge of the view, or beyond, then the view is automatically
             panned to ensure the focus remains in the view.
             </summary>
             <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.FocusCenterCorSagOffsetFraction">
            <summary>
            Adds a fraction coordinate offset to the location of the viewport 
            focus relative to the XY center (Z is ignored) in coronal and sagittal viewports.
            A (-0.5,0.5,0) offset would place the focus
            at the upper/left corner, and (0.5,0.5,0) at the lower/right corner.
            Useful in surgical navigation for better showing more of one side (usually ahead)
            of the tooltip.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.FocusViewMarginMm">
            <summary>
            When FocusAtViewportCenter is false, controls the size of the margin
            around the focus point that should remain visible in slab views.
            Smaller values and low zoom levels allow the focus point to get closer
            to the edge of the view, and vice-versa.
            If the value is 0 or negative, the focus is allowed to be outside the viewport altogether.
            When the viewport dimension (x or y) is smaller than twice the margin,
            the focus is placed at the center. Setting a high value is, therefore, equivalent
            to setting FocusAtViewportCenter to true.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ZoomCenteredOnMouse">
            <summary>
            When set and zoom is activated by mouse drag while FocusAtViewportCenter is false,
            slab/2D viewports zoom around the mouse down position.
            Otherwise (default) zoom is centered on the focus point or the view center when the viewport
            ToFocus is not set.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.FocusOnSlabsMarkerType">
            <summary>
            Determines whether the appearance of the focus location and axes on flat slab viewports.
            If set to a value other than Hidden, will make the marker visible.
            </summary>
            <value></value>
        </member>
        <member name="P:Claron.WIF.Collage.FocusOn3dMarkerType">
            <summary>
            Determines whether the appearance of the focus location and axes on 3D viewports.
            If set to a value other than Hidden, will make the marker visible.
            </summary>
            <value></value>
        </member>
        <member name="P:Claron.WIF.Collage.DragFocusOnSlabsEnabled">
            <summary>
            When FocusAtViewportCenter is False, controls whether hovering over the
            focus point reference on slab viewports sets the viewport mode to
            DragFocus (true) or ZoomOnFocus (false).
            When FocusAtViewportCenter is true, it is ignored.
            </summary>
            <value></value>
        </member>
        <member name="P:Claron.WIF.Collage.OneBigViewport">
            <summary>
            The viewport being shown in OneBigViewportContainer, or null for
            normal layout presentation.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.IsOneBigViewport">
            <summary>
            Indicates whether the collage is in a temporary mode showing a single big viewport
            (usually activated by a double-click of the left mouse button).
            Can only be set to False to exit the mode (True is ignored). To enter the mode,
            set OneBigViewport to the viewport to be enlarged.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.IsViewportMaximized">
            <summary>
            Synonyn for IsOneBigViewport (to maintain naming consistency with ViewportMaximize)
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Mask">
            <summary>
            The Mask property sets the VOI property (binary clipping Bitvol)
            of all the viewport cameras in the collage.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.MaskEnabled">
            <summary>
            Sets the VOIEnabled property of all cameras of all viewports in the collage,
            and highlights the boundary of the mask in the flat slab viewports.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.MaskColorwashOnSlabsVisible">
            <summary>
            Controls whether the slab viewports show a dark colorwash outside
            the mask region (see Mask property).
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Clipper">
            <summary>
            Returns the clipper for the first viewport in the collage.
            When the property is used to set the Clipper value the clippers for all
            the viewports are set to the same value.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Discarded">
            <summary>
            Indicates whether the collage was discarded (Discard was called), to allow it to
            be freed up.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.IsMouseDragging">
            <summary>
            Is the mouse button down over a viewport and the mouse
            moved since the button was pressed
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ToolStripEnabled">
            <summary>
            Controls globally whether the pop-up toolstrip is shown over viewports.
            When globally enabled, can also be individually controlled for each viewport (see Viewport.ToolStripEnabled).
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ToolStripCursorDragLockEnabled">
            <summary>
            Controls whether the mouse cursor is locked inside a tool button when dragging
            over it. True by default.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.EnsureInteractivity">
            <summary>
            Controls whether image quality is allowed to degrade to ensure fast screen updates.
            The collage itself usually sets this property to true when the user draggs on the viewport
            or toolstrip.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ForceFastRefresh">
            <summary>
            Property to force fast refresh if required. The EnsureInteractivity
            property must also be set to true for this property to take
            effect.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.IsOnlyViewportWithInputFocusUpdatedDuringInteraction">
            <summary>
            When set to true, during user interactions, only the viewport with which the
            user interacts is updated. The updating of the other viewports is suspended until
            the interaction is completed. Default - false.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.PosteriorOnRightInSagittalViewport">
            <summary>
            If true then the posterior of the patient is displayed on the right in the sagittal viewport.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.SlabsInDefaultOrientation">
            <summary>
            When set to true, rotates the focus point and the ToFocus properties of
            the slab viewports to their default orientation.
            </summary>
            <returns>True when all the slabs are in their default orientation. If no slice
            stack is shown, returns false.</returns>
        </member>
        <member name="P:Claron.WIF.Collage.InteractionModeUpdatingSuspended">
            <summary>
            If set to true, the collage will not modify the interaction mode of the viewports
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.SliceStackShown">
            <summary>
            Property to get/set the slice stack to be shown.
            When set, replaces all slice stacks in the list of slice stacks being handled
            by the collage.
            </summary>
            <remarks>Resets FusionType to None and the SliceStacksShownFused property so that it
            contains only the slice stack to be shown. May return Nothing if no stack is shown.</remarks>
        </member>
        <member name="P:Claron.WIF.Collage.SliceStackShownI">
            <summary>
            The index of the currently shown slice stack in the list of slice stacks shown.
            Returns -1 if no slice stack is shown. Silently clamps to the valid range when set.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.NoSliceStackShown">
            <summary>
            Indicates when there is not slice stack data is input to any of
            the viewports
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.NoDataInput">
            <summary>
            Indicates when there is no input (SliceStack or 2D images) to any of
            the viewports
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.SliceStackShownInList">
            <summary>
            Property to get/set the slice stack to be shown amongst those in the SliceStack
            list. If set to a ss that is not already on the list, the ss gets added.
            </summary>
            <remarks>Resets FusionType to None and the SliceStacksShownFused property so that it
            contains only the slice stack to be shown. May return Nothing if no stack is shown.</remarks>
        </member>
        <member name="P:Claron.WIF.Collage.SliceStacksShownFused">
            <summary>
            The slice stacks to be shown fused.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.SliceStacks">
            <summary>
            Returns the slice stacks handled by the collage.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.SliceStackCyclingModeEnabled">
            <summary>
            Sets whether the collage is put in a special slice-stack cycling mode, where
            the camera outputs are cached per slice stack. This eliminates the need for
            the images to be re-rendered when the same slice stack is redisplayed in a
            subsequent cycle through the slice stack.
            </summary>
            <remarks>Extra memory is consumed by the image caching, so it is recommended to
            disable this mode at times other than cycling through slice stacks</remarks>
        </member>
        <member name="P:Claron.WIF.Collage.VOICyclingModeEnabled">
            <summary>
            TO Prevent RE-rendring when same VOI(Tissue) is Redisplayed
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.AutoSliceStackCyclingEnabled">
            <summary>
            Turns on/off auto cycling.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.AutoSliceStackCyclingIntervalSeconds">
            <summary>
            Auto cycling interval in seconds.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.FusionType">
            <summary>
            Property to get/set the fusion type.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.PanelsCount">
            <summary>
            Returns the number of panels managed by the Collage.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Container">
            <summary>
            The control (usually a panel) that contains the Collage.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.LayoutPreset">
            <summary>
            The collage layout preset (may be custom).
            When changing it, viewports are reassigned, and their state preserved, when possible.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:Claron.WIF.Collage.Layout">
            <summary>
            The currently applied layout object.
            If set to a new layout, current viewports will be preserved to the degree possible.
            (see also SetNewLayout)
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.IsMouseOver">
            <summary>
            True iff the mouse is over any Viewport
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ViewportWithMouseOver">
            <summary>
            The viewport over which the mouse pointer is now, or null if the pointer is not
            over any viewport.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.ViewportWithInputFocus">
            <summary>
            The viewport currently being interactively manipulated by user input.
            May be Nothing if no viewport is manipulated.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Viewports">
            <summary>
            Gets a copy of the viewports array.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ViewportsCount">
            <summary>
            The number of viewports managed by the Collage (layout-dependent)
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.IsSharedZoomAbsolute">
            <summary>
            Controls whether slab viewports sharing a focus space will have the same absolute
            pixel spacing, or a relative one (same ZoomFactor).
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.Lumen">
            <summary>
            The lumen that will be visible in all viewports that show ribbon or cross section.
            The lumen's centerline X axis would be aligned with the viewport's X (RibbonCoronal),
            Z (Ribbon Sagittal) or Y (Panoramic). 
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.LumenRollRadians">
            <summary>
            The roll angle of the coronal lumen ribbon view around the centerline
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.LumenFocusPositionMm">
            <summary>
            Distance from Lumen start of the current "focus" location
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.LumenCrossSectionSpacingMm">
            <summary>
            The size of each pixel in the multi-viewport display of the lumen.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.LastUpdateTicksLumenDisplay">
            <summary>
            The value of GlobalAutoIncrementCounter() at the last time the Lumen display setting was updated.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.OrientationFigurineVisible">
            <summary>
            Controls whether all viewports containing 3D information display an orientation figurine.
            It is also possible to control each viewport individually using its OverlayOrientationFigurineEnabled
            property.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.IsoSurfaceModeAvailableInToolstrip">
            <summary>
            Controls whether IsoSurface rendering mode will be available in the ToolStrip control
            (default = True)
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ToolStripButtonsBackColor">
            <summary>
            Set the color for both the toolstrips primary and secondary. And gets only from the one on the left.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.ToolStripShowAtVpFractionMain">
            <summary>
            Sets/Gets the Fraction of the viewport width at which the MainToolStrip(one on the top left) is shown.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.ToolStripShowAtVpFractionOrientation">
            <summary>
            Sets/Gets the Fraction of the viewport width at which the OrientationToolStrip(one on the bottom right) is shown.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.ToolStripMainLocation">
            <summary>
            Sets/Gets the location of the MainToolStrip
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.LastMouseEventArgs">
            <summary>
            Returns the mouse event parameters at the last time it moved over the ViewportWithInputFocus.
            Note that the X and Y values are in viewport index coordinates (Vi).
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.ClipperDimensionRatio">
            <summary>
            Ratio to be used while calcuating the other 2 dimension of the clipper
            (User only specifies one dimension by drawing a line on the viewport, 
            other 2 will be decided depending on this variable)
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.AutoFocusOnViewport">
            <summary>
            Property to get/set whether a viewport's picture box should receive focus automatically
            whenever the mouse enters the picture box's bounds.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.CursorAnnotationMode">
            <summary>
            Controls the behavior of the CursorAnnotation, a context-sensitive text overlay that
            appears next to the cursor when
            the mouse hovers (ie, no button down, no movement) over a locatino on a viewport.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Collage.RefreshDone">
            <summary>
            Returns true if the collage was refreshed since the last collage refresh.
            </summary>
        </member>
        <member name="P:Claron.WIF.Collage.FrameNumber">
            <summary>
            The frame number for the collage. Incremented whenever a refresh is done.
            </summary>
        </member>
        <member name="T:Claron.WIF.Collage.MouseDownEventHandler">
            <summary>
            Fires when a mouse button is pressed.
            Fires only over an active viewport, before any action is taken by the Collage.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="e">Event parameters.</param>
            <param name="CancelCollageHandling">If set to true on return, no further processing of the event is done by the Collage.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseWheelEventHandler">
            <summary>
            Fires when using the mouse wheel.
            Fires only over an active viewport, before any action is taken by the Collage.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="DeltaClicks">Change in wheel position.</param>
            <param name="CancelCollageHandling">If set to true on return, no further processing of the event is done by the Collage.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseMoveEventHandler">
            <summary>
            Fires when the mouse cursor changes position or after the image under the cursor is refreshed.
            Fires only over an active viewport, before any action is taken by the Collage.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="e">Event parameters.</param>
            <param name="CancelCollageHandling">If set to true on return, no further processing of the event is done by the Collage.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseUpEventHandler">
            <summary>
            Fires when a mouse button is released.
            Fires only over an active viewport, before any action is taken by the Collage.
            If the user clicked, this event is fired after the MouseClick and MouseClicked events.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="e">Event parameters.</param>
            <param name="CancelCollageHandling">If set to true on return, no further processing of the event is done by the Collage.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseClickEventHandler">
            <summary>
            Fires when a mouse button is pressed and released in a short time without moving the cursor before Collage has performed FocusPoint operations.
            Fires only over an active viewport, before any action is taken by the Collage.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="e">Event parameters.</param>
            <param name="CancelCollageHandling">If set to true on return, no further processing of the event is done by the Collage.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseDoubleClickEventHandler">
            <summary>
            Fires when the user double-clicks on a viewport.
            Fires only over an active viewport, before any action is taken by the Collage.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="e">Event parameters.</param>
            <param name="CancelCollageHandling">If set to true on return, no further processing
            of the event is done by the Collage.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseWheelRotateEventHandler">
            <summary>
            Fires when user rotates the mouse wheels.
            </summary>
            <param name="OnVP"></param>
            <param name="e">Event parameters.</param>
            <param name="CancelCollageHandling">If set to true on return, no further processing of the event is done by the Collage.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseClickedEventHandler">
            <summary>
            Fires when a mouse button is pressed and released in a short time without moving the cursor
            after Collage has finished processing FocusPoint operations.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="e">Event parameters.</param>
            <param name="CancelCollageHandling">If true, no further processing by Collage is performed.  Note that if both MouseClick and MouseClicked events are registered,
            MouseClicked.CancelCollageHandling takes precedence.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseStoppedEventHandler">
            <summary>
            Fires when the mouse cursor is over a viewport and has stopped moving.
            Useful for providing user contextual information when "hovering" over a point.
            </summary>
            <param name="OnVP">The viewport under the cursor. Never Nothing.</param>
            <param name="e">Mouse state parameters.</param>
            <param name="CancelCollageHandling"></param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseEnterEventHandler">
            <summary>
            Fires when the mouse enters a viewport interaction region.
            </summary>
            <param name="OnVP">The viewport the cursor entered. Never Nothing.</param>
        </member>
        <member name="T:Claron.WIF.Collage.MouseLeaveEventHandler">
            <summary>
            Fires when the mouse cursor exited the viewport region.
            </summary>
            <param name="OnVP">The viewport the cursor left. Never Nothing.</param>
        </member>
        <member name="T:Claron.WIF.Collage.ViewportPaintEventHandler">
            <summary>
            Fires when a viewport's outPictureBox is painted, allowing the client to add
            arbitrary graphics to the viewport before it is shown to the user (using e.Graphics).
            The graphics drawn during this event will appear on top of all the graphics drawn
            by the collage.
            </summary>
        </member>
        <member name="T:Claron.WIF.Collage.TissueColorwashOutlineEditedEventHandler">
            <summary>
            Fires when the user finished editing the outline of an editable tissue colorwash in a flat
            slab viewport. Allow the application to process the change so as to modify
            the tissue BitVol accordingly.
            </summary>
            <param name="OnVP">The viewport on which the colorwash was edited</param>
            <param name="TissueEdited">The tissue represented by the edited colorwash region</param>
            <param name="OutlineBefore">A polyline representing the boundary before the editing</param>
            <param name="OutlineAfter">A polyline showing the result of the edit</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.PolylineEditedEventHandler">
            <summary>
            Fires when the user finished editing a polyline other than the built-in
            tissue colorwash outline (see TissueColorwashOutlineEdited).
            </summary>
            <param name="OnVP">The viewport on which the polyline was edited</param>
            <param name="PlEdited">The polyline edited (after the edit)</param>
        </member>
        <member name="T:Claron.WIF.Collage.ToolStripButton_MouseDownEventHandler">
            <summary>
            Fires when the user presses a mouse button on a predefined ToolStrip
            button (in CollageToolStrips.vb).
            The button action description is stored in the text field of the button.
            </summary>
            <param name="VP">The viewport hosting the toolstrip</param>
            <param name="Button">The clicked toolstrip button.</param>
            <param name="e"></param>
            <param name="CancelCollageHandling">If set to True by the event handler, will
            cause the collage to skip further processing of this event.</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.ToolStripButton_MouseUpEventHandler">
            <summary>
            Fires when the user releases a mouse button on a predefined ToolStrip
            button (in CollageToolStrips.vb).
            The button action description is stored in the text field of the button.
            </summary>
            <param name="VP">The viewport hosting the toolstrip</param>
            <param name="Button">The clicked toolstrip button.</param>
            <param name="e"></param>
            <param name="CancelCollageHandling">If set to True by the event handler, will
            cause the collage to skip further processing of this event.</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.ToolStripButton_MouseMoveEventHandler">
            <summary>
            Fires when the user moves the mouse over a tool strip button.
            The button action description is stored in the text field of the button.
            </summary>
            <param name="VP">The viewport hosting the toolstrip</param>
            <param name="Button">The clicked toolstrip button.</param>
            <param name="e"></param>
            <param name="CancelCollageHandling">If set to True by the event handler, will
            cause the collage to skip further processing of this event.</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.ToolStripButton_ClickEventHandler">
            <summary>
            Fires when the user clicks on a predefined ToolStrip button (in CollageToolStrips.vb),
            before the ToolStripButton_MouseUp event.
            The button action description is stored in the text field of the button.
            </summary>
            <param name="VP">The viewport hosting the toolstrip</param>
            <param name="Button">The clicked toolstrip button.</param>
            <param name="ClickedMouseButton">Mouse button clicked</param>
            <param name="CancelCollageHandling">If set to True by the event handler, will
            cause the collage to skip further processing of this event.</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.InteractionModeSelectedEventHandler">
            <summary>
            Fires repeatedly as the collage examines and refreshes a viewport's interaction
            mode (over 10Hz).
            The collage selects the mode based on its own rules, then triggers this event, allowing
            the client to modify the mode it selected before it is actually applied to the viewport.
            </summary>
            <param name="onVp">The viewport whose mode was selected</param>
            <param name="mode">Input/output: The interaction mode that was selected by the collage and will be applied to the
            viewport on returning from the call (unless modified by the client).</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.ClientManagedMouseDragEventHandler">
            <summary>
            When interaction mode is WIF.Viewport.InteractionModeEnum.ClientManagedMouseDrag, allows the control to be taken by Client application 
            </summary>
            <param name="vp">The viewport whose mode was selected</param>
            <param name="dX">delta x </param>
            <param name="dY">delta y</param>
            <param name="e">current mouse values</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.BeforeRefreshEventHandler">
            <summary>
            Fires immediately when the function RefreshAsNeeded() is called.
            The client can use this event to decide to cancel the refresh or change the state of the viewports
            before the refresh proceeds. NOTE: Calls to RefreshAsNeeded during the event processing
            are ignored to prevent endless recursion.
            There is no point in calling Collage.RefreshAsNeeded() from within the event handler,
            since that would couse an infinite loop so Collage.RefreshAsNeeded() guards against reentry.
            </summary>
            <param name="CancelRefresh">If set to true on return, the collage is not refreshed.</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.BeforeRefreshAsNeededProcessKeysEventHandler">
            <summary>
            Fires immediately when the function RefreshAsNeededProcessKeys() is called.
            The client can use this event to decide to cancel the key processing or change
            the behaviour of the key processing.
            NOTE: Calls to RefreshAsNeeded during the event processing
            are ignored to prevent endless recursion.
            </summary>
            <param name="CancelRefresh">If set to true on return, the keys are not processed</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.BeforeRefreshViewportsEventHandler">
            <summary>
            Fires inside RefreshAsNeeded after the state of the viewports was set (eg, copied state from
            one viewport to others), but before the actual viewports' RefreshAsNeeded(render and display)
            are called.
            The client can use this event to override the default Collage behavior or to cancel the
            viewport refresh while still propagating changes across viewports.
            NOTE: Calls to RefreshAsNeeded during the event processing
            are ignored to prevent endless recursion.
            </summary>
            <param name="CancelRefresh">If set to true on return, the viewports are not refreshed.</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.BeforeRefreshViewportEventHandler">
            <summary>
            Fired just before an individual viewport is refreshed.
            NOTE: Calls to RefreshAsNeeded during the event processing
            are ignored to prevent endless recursion.
            </summary>
            <param name="VP"></param>
            <param name="CancelRefresh">If set to true on return, the viewport is not refreshed.</param>
        </member>
        <member name="T:Claron.WIF.Collage.BeforeRefresh3dViewportEventHandler">
            <summary>
            Fired just before an individual 3D viewport is refreshed. The client can use this event
            to manipulate the rendering parameters (eg, shadows) according to whether a fast refresh
            or a final one is done.
            NOTE: Calls to RefreshAsNeeded during the event processing
            are ignored to prevent endless recursion.
            </summary>
            <param name="FastRefreshNeeded">Set to true during interactive updates, where rendering is optimized
            for speed rather than maximum quality.</param>
            <param name="VP"></param>
            <param name="CancelRefresh">If set to true on return, the viewport is not refreshed.</param>
        </member>
        <member name="T:Claron.WIF.Collage.AfterRefreshEventHandler">
            <summary>
            Fires at the end of RefreshAsNeeded when at least one of the PictureBoxes has been updated.
            The client can use this event to add contents to a viewport before it gets shown or to modify
            its own state as a response to a change in a viewport/camera state.
            NOTE: Calls to RefreshAsNeeded during the event processing
            are ignored to prevent endless recursion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Collage.OverlayVisibilityEventHandler">
            <summary>
            Fires when OverlayVisibility changes
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOnSlabsMarkerTypeEnum.CrossArrows">
            <summary>
            Cross of arrows pointing in the positive axis direction
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOnSlabsMarkerTypeEnum.CrossHairs">
            <summary>
            A simple cross-hairs
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOnSlabsMarkerTypeEnum.DistanceMarks">
            <summary>
            A pattern of distance tick marks and circles centered on the marker origin
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOnSlabsMarkerTypeEnum.Hidden">
            <summary>
            Not shown
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOn3dMarkerTypeEnum.CrossArrows">
            <summary>
            Cross of arrows pointing in the positive axis direction
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOn3dMarkerTypeEnum.CrossHairs">
            <summary>
            Cross-hairs pointing in the positive axis directions, extending across
            the data bounding box.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOn3dMarkerTypeEnum.ArrowToZ">
            <summary>
            Arrow pointing from the marker space origin towards the Z direction. Usually
            used with a lumen to show the viewing point location and direction.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FocusOn3dMarkerTypeEnum.Hidden">
            <summary>
            Not shown
            </summary>
        </member>
        <member name="T:Claron.WIF.Collage.FusionTypeEnum">
            <summary>
            Enum for fusion type.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FusionTypeEnum.MagentaGreenEffect">
            <summary>
            MagentaGreenEffect: For use with two camera inputs, the first camera
            input is used to generate the red/blue components of the output, and
            the second camera is used to generate the green component of the
            output.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FusionTypeEnum.AutoCycle">
            <summary>
            AutoCycle: Auto cycle between slice stacks being shown.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FusionTypeEnum.LocalRigid">
            <summary>
            LocalRigid: For use with two camera inputs, the second slice stack replaces the first
            within a circular region, after doing a local rigid correction.
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FusionTypeEnum.AlphaBlending">
            <summary>
            AlphaBlending: Can be used with multiple camera inputs, 
            over the first camera ARGB output 
            overlays additional cameras
            the transparency of the fusion (blending) is dictated by the camera's AlphaBlendingFactor 
            used by fusion, typically Pet/NM over CT
            </summary>
        </member>
        <member name="F:Claron.WIF.Collage.FusionTypeEnum.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="T:Claron.WIF.Collage.ICoupler">
            <summary>
            The coupler interface labels associated data values that need to be "coupled"
            to the collage.  After restoring state on the collage, any associated data values
            that implement this interface will have the collage property set to the
            deserializing Collage instance. <see>RestoreState</see>
            </summary>
        </member>
        <member name="T:Claron.WIF.SliceStackLoader">
            <summary>
            This class helps in Progressively loading the Single or multiple slicestacks
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.Load(System.String)">
            <summary>
            Loads single slicestack progressively in standalone mode.
            </summary>
            <param name="folderPath"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.LoadThread">
            <summary>
            Thread to load single slicestack progressively in standalone mode
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.LoadRemote(System.String)">
            <summary>
            Loads single slicestack progressively in client/server mode.
            </summary>
            <param name="folderPath"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.LoadRemoteThread">
            <summary>
            Thread to load single slicestack progressively in client/server mode
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.LoadMultiple(System.String)">
            <summary>
            Loads multiple slicestacks progressively in standalone mode.
            </summary>
            <param name="folderPath"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.LoadMultipleThread">
            <summary>
            Thread to load multiple slicestacks progressively in standalone mode
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.LoadMultipleRemote(System.String)">
            <summary>
            Loads multiple slicestacks progressively in client/server mode.
            </summary>
            <param name="folderPath"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.LoadMultipleRemoteThread">
            <summary>
            Thread to load multiple slicestacks progressively in client/server mode
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SliceStackLoader.UpdateCollageFocusAndZoom">
            <summary>
            Updates the screen
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Layout">
             <summary>
             <para>Layout describes a binary tree arrangement of split panels, with Viewports
             of specific types residing in the leaf node. The description is independent
             of implementation details, allowing it to be transmitted across systems and
             versions.</para>
            
             <para>Layouts are recursive: each layout is either a single viewport or split into two sub-layouts
             Child0 (top/left) and Child1 (bottom/right).</para>
            
             <para>The class provides a number of preset tiling formats and a function for
             generating a grid (MxN) to simplify the use of the class.
             Once the layout is set, the viewport type assignments can be
             modified using SetViewportTypes.
             </para>
             </summary>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.SetViewport(Claron.WIF.Viewport.TypeEnum)">
            <summary>
            Sets the layout to a single viewport of the given type
            </summary>
            <param name="viewportType"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.SetSplitter(System.Windows.Forms.Orientation,System.Single)">
            <summary>
            Sets the layout to be a split one at the given orientation.
            </summary>
            <param name="splitterOrientation"></param>
            <param name="splitFraction"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.#ctor">
            <summary>
            Creates a new layout of type "Custom" with single blank viewport.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.#ctor(Claron.WIF.Layout.PresetEnum)">
            <summary>
            Creates a new layout with a preset organization of viewports
            </summary>
            <param name="Preset"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.#ctor(System.Int32,System.Int32,Claron.WIF.Viewport.TypeEnum)">
            <summary>
            Creates a new MxN custom layout of equally-sized viewports of the same type.
            The splitters are set first between rows, then between the viewports in each row.
            </summary>
            <param name="Columns">The number of viewport columns</param>
            <param name="Rows">The number of viewport rows to create</param>
            <param name="ViewportType">The type of viewport to set all the viewports to.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.#ctor(System.Int32,System.Int32,Claron.WIF.Viewport.TypeEnum[])">
            <summary>
            Creates a new MxN custom layout of equally-sized viewports of the same type.
            The splitters are set first between rows, then between the viewports in each row. Each viewport can have its own type.
            </summary>
            <param name="Columns">The number of viewport columns</param>
            <param name="Rows">The number of viewport rows to create</param>
            <param name="ViewportTypes">The types of viewports to set, one per viewport in
            row major order.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.copy">
            <summary>
            Returns a deep copy (including children if any)
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.ViewportsCount">
            <summary>
            Returns the number of viewport sub-nodes that are direct or indirect children of the node.
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.ViewportsTypes">
            <summary>
            Returns a list of the viewport types in node (panel) order (top/left to bottom/right)
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.AddSubtreeViewportsTypes(System.Collections.Generic.List{Claron.WIF.Viewport.TypeEnum}@)">
            <summary>
            Adds the the viewport types to a given list in traversal order
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.SetViewportTypes(Claron.WIF.Viewport.TypeEnum[])">
            <summary>
            Sets the viewport types of the nodes in the layout in node order (top/left to bottom/right).
            The layout type is set to "custom".
            Usage example:
              Dim lo As New Layout(WIF.Layout.PresetEnum.ThreeOnRight)
              lo.SetViewportTypes(New Viewport.TypeEnum() {Viewport.TypeEnum.Coronal, _
                    Viewport.TypeEnum.ThreeD, Viewport.TypeEnum.Sagittal, Viewport.TypeEnum.Axial})
              collage.Layout = lo
            </summary>
            <param name="Types">An array of the types to set, with at least one element.
            If it is shorter than the number of nodes, the last type on the list is repeated for
            all the following ones.</param>
        </member>
        <member name="M:Claron.WIF.Layout.SetSubtreeViewportsTypes(Claron.WIF.Viewport.TypeEnum[],System.Int32@)">
            <summary>
            Adds the the viewport types to a given list in traversal order
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.ToStr">
            <summary>
            Returns a multi-line string descriptor of the layout hierarchy for debuggnig.
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.GetHashCode">
            <summary>
            Returns the hash code for the layout object.
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.CreatePanelsTree(System.Windows.Forms.Panel,System.Collections.Generic.List{System.Windows.Forms.Panel},System.Int32)">
            <summary>
            Creates a hierarchy of split panels to reflect the layout nodes, and
            adds the "leaf" panels to the given list of panels in a left/top to right/bottom order
            (fixed for a given layout).
            </summary>
            <param name="RootPanel">The panel to split into the layout</param>
            <param name="PanelsList">The list of panels to which the newly created leaf panels will be added</param>
            <param name="PanelsSplitterWidth">The width, in screen pixels, to set for the splitter in each
            split panel</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.ReflectPanelsTree(System.Windows.Forms.Panel)">
            <summary>
            Updates the layout to reflect the state of the given panels hierarchy
            </summary>
            <param name="RootPanel"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.AssignViewportTypes(System.Collections.Generic.List{Claron.WIF.Viewport.TypeEnum})">
            <summary>
            Assigns viewport type to all the leaf nodes in order, destroying the list provided as parameter
            </summary>
            <param name="vpTypes">An ordered list of viewport types to be assigned to the layout panels.
            Cleared on return!!</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.AssignViewportTypes(Claron.WIF.Viewport.TypeEnum[])">
            <summary>
            Assigns viewport type to all the leaf nodes in order they are listed in the parameters
            </summary>
            <param name="vpTypes">A list of viewport types to be assigned to the layout panels in order
            of their creation (left->right, top->bottom)</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.SimilarTo(Claron.WIF.Layout)">
            <summary>
            Checks whether another layout is the same as this one when ignoring
            the SplitterFraction field
            </summary>
            <param name="Other"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.ViewportsToPreserve(Claron.WIF.Layout)">
            <summary>
            Returns a list of viewport types which can be preserved if switching to a new layout
            </summary>
            <param name="newLayout">target layout where the viewports will be preserved</param>
            <returns>List of viewport types</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.SetSplitterFractionsAs(Claron.WIF.Layout)">
            <summary>
            Sets the splitter fractions in this layout to be the same as another (where
            their splitter hierarchy is the same.
            </summary>
        </member>
        <member name="M:Claron.WIF.Layout.SetPanelsSplitterDistances(System.Windows.Forms.Panel)">
            <summary>
            Sets the splitter distances in all the split containers under a given panel according to the
            layout specifications.
            </summary>
            <param name="RootPanel">The (top level) screen panel holding the layout</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Layout.BuildPreset(Claron.WIF.Layout.PresetEnum)">
            <summary>
            Creates layout node trees for a given preset.
            </summary>
            <param name="preset"></param>
            <remarks> The code demonstrates how to build a tree for a custom layout.</remarks>
        </member>
        <member name="P:Claron.WIF.Layout.Preset">
            <summary>
            Represents the current layout preset
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.One">
            <summary>
            One 3D viewport
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.ThreeOnRight">
            <summary>
            panel 0 on left half, 1 to 3 top to bottom on right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.ThreeOnRightXyz">
            <summary>
            panel 0 on left half, 1 to 3 top to bottom on right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.ThreeOnBottom">
            <summary>
            panel 0 on top half, 1 to 3 left to right on bottom
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.Two3DsAndThreeOnRight">
            <summary>
            0 and 1 side by side, then 2, 3, 4 on right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.SideBySideSlabs">
            <summary>
            axial, coronal, sagittal views on left vs. right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.SideBySideAxial">
            <summary>
            axial view left vs. right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.SideBySideCoronal">
            <summary>
            coronal view left vs. right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.SideBySideSagittal">
            <summary>
            sagittal view left vs. right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.TwoByTwo">
            <summary>
            3D on upper left + three axial/coronal/sagittal slabs
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.TwoByTwoXYZ">
            <summary>
            3D on upper left, slice-stack XY, XZ and YZ in the other three
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.ThreeSlabsACS">
            <summary>
            axial on left, coronal and sagittal on right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.ThreeSlabsXYZ">
            <summary>
            Slice-stack XY on left (0), XZ (1) and YZ (2) on right
            </summary>
        </member>
        <member name="F:Claron.WIF.Layout.PresetEnum.Custom">
            <summary>
            Not a preset - custom-created by the client
            </summary>
        </member>
        <member name="T:Claron.WIF.CollageRemoter">
            <summary>
            Represent a remote (server-side) object, owned by a client-side collage object, which
            manages fields kept on the server.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollageRemoter.LoadCollageState(System.String)">
            <summary>
            Loads collage state for client with given userName, and Tag(1..to 6)
            </summary>
            <param name="collageStateName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.CollageRemoter.SaveCollageState(System.String,System.Byte[],System.Collections.Generic.List{Claron.WIF.BitVol},System.Collections.Generic.List{Claron.WIF.BitVol},System.Byte[])">
            <summary>
            Saves the collage state for client with given userName, and Tag
            </summary>
            <param name="zipCollageStateByteArray"></param>
            <param name="collageStateName"></param>
            <param name="bvToSaveList"></param>
            <param name="maskToRestoreList"></param>
            <param name="zipCollageStateImageByteArray"></param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.CollagesLink">
            <summary>
            Represents a group of collages that have some of their visualization properties
            linked, so that a change of that property in one of them would affect the others as well.
            Typically used for side-by-side comparison of SliceStacks.
            Used with the shared property LinkedGroups of the Collage Class.
            When focus space location or orientation are linked, the PatientScan RCSs used by
            the different collages can be rigidly or elastically mapped to each other using
            the mappers in ScanRcs0ToScanRcs.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._flatSlabsWindowing">
            <summary>
            Property to get/set whether the window center and width should be
            synchronized.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._flatSlabsZoom">
            <summary>
            Property to get/set whether the zoom level should be synchronized.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._focusLocationInPatientRcs">
            <summary>
            Property to get set whether the focus location should be
            synchronized.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._focusOrientationInPatientRcs">
            <summary>
            Property to get set whether the focus orientation should be
            synchronized.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._focus2PatientMappers">
            <summary>
            Holds the collage focus to patient scan mappers as they were when
            the CollagesLink is initialized. Used to restore the focus to patient
            mappers for each collage when synching is turned off.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._collages">
            <summary>
            The collages to synchronize.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._scanRcs0ToScanRcs">
            <summary>
            A list of mappers which maps from the patient scan RCS of the slice stack
            shown in collage 0 to the once used by other collages in the _collages list.
            The first mapper is obviously an identity mapper. All
            mappers are defined in the coordinate system of the patient scan RCS
            of the first collage slice stack.
            </summary>
        </member>
        <member name="F:Claron.WIF.CollagesLink._Focus2PatientSyncLastUpdateTicks">
            <summary>
            Last tick at which the Focus2Patient mappers of the collages were
            synchronized.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.#ctor(Claron.WIF.Collage[])">
            <summary>
            Creates a new object linking the collages given as parameters.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.#ctor(Claron.WIF.Collage,Claron.WIF.Collage,Claron.WIF.ISpaceMapper)">
            <summary>
            Creates a new CollageLink object which links the two given collages
            with the given mapper.
            </summary>
            <param name="collage0">The first collage.</param>
            <param name="collage1">The second collage.</param>
            <param name="mapper">The mapper which maps from the patient scan RCS
            of the first collage to the patient scan RCS of the second
            collage.</param>
        </member>
        <member name="M:Claron.WIF.CollagesLink.SyncCollages">
            <summary>
            Synchronizes the collages.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.SyncFlatSlabWindowing">
            <summary>
            Sets the windowing center/width of all cameras in all the viewports
            of the collages in the given list to latest one modified.
            an camera is synchronized if generates an "windowed" image and its slicestack has the same modality   
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.SyncZoomAndFocus2PatientMappers(System.Boolean)">
            <summary>
            Synchronizes the Focus2Patient mappers of the given collages.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.SyncZoomAndFocus2PatientMappers(Claron.WIF.Collage)">
            <summary>
            Synchronizes the Focus2Patient mappers of the given collages.
            </summary>
            <param name="refCollage">The reference collage.</param>
        </member>
        <member name="M:Claron.WIF.CollagesLink.SyncViewport2FocusMappers(Claron.WIF.Collage,Claron.WIF.Collage)">
            <summary>
            Synchronizes the focus point of the viewports in the collage objects.
            If a mapper is associated between the slice stacks being
            shown by the two collages then the focal point is mapped through that
            mapper.
            </summary>
            <param name="sCol">The source collage.</param>
            <param name="dCol">The destination collage.</param>
        </member>
        <member name="M:Claron.WIF.CollagesLink.SyncFocus2Patient(Claron.WIF.Collage,Claron.WIF.Collage)">
            <summary>
            Updates the focus to patient scan mapper from the source collage to
            the destination collage.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.MapFromSliceStack2SliceStack(Claron.WIF.SliceStack,Claron.WIF.SliceStack,Claron.WIF.Vector3)">
            <summary>
            Maps a point from one slice stack into another slice stack.
            </summary>
            <param name="ss0">The slice stack to map from.</param>
            <param name="ss1">The slice stack to map to.</param>
            <param name="vec">The vector to map.</param>
            <returns>The mapped position.</returns>
        </member>
        <member name="M:Claron.WIF.CollagesLink.MapFromSliceStack2ReferenceSliceStack(Claron.WIF.SliceStack,Claron.WIF.Vector3)">
            <summary>
            Maps from a slice stack to the reference slice stack (index 0).
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.MapFromReferenceSliceStack2SliceStack(Claron.WIF.SliceStack,Claron.WIF.Vector3)">
            <summary>
            Maps from a reference slice stack to the given slice stack.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollagesLink.GetMapperForSliceStack(Claron.WIF.SliceStack)">
            <summary>
            Returns the mapper which maps from the reference slice stack to the
            given slice stack.
            </summary>
            <param name="ss">The input slice stack.</param>
        </member>
        <member name="M:Claron.WIF.CollagesLink.SetMapperForSliceStack(Claron.WIF.SliceStack,Claron.WIF.ISpaceMapper)">
            <summary>
            Sets the mapper which maps from the reference slice stack to the
            given slice stack.
            </summary>
            <param name="ss">The input slice stack.</param>
            <param name="mapper"></param>
        </member>
        <member name="P:Claron.WIF.CollagesLink.FlatSlabsWindowing">
            <summary>
            Property to get/set whether the window center and width should be
            synchronized.
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.SyncRenderingPreset">
            <summary>
            Whether the RenderingPreset should be synchronized.
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.FlatSlabsZoom">
            <summary>
            Property to get/set whether the zoom level should be synchronized.
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.FocusLocationInPatientRcs">
            <summary>
            Property to get set whether the focus location should be
            synchronized.
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.FocusOrientationInPatientRcs">
            <summary>
            Property to get set whether the focus orientation should be
            synchronized.
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.IsAbsolute">
            <summary>
            Absolute (default) or Relative synchronization mode
            In case of Relative mode the viewport changes that get synchronized are limited by the once happenned since linking/Reset. Consider these changes as "delta".
            In case of Absolute mode the absolute values of the viewport presentation aspects get shared among linked collages (respectively, assuming the SS mapping).
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.Collages">
            <summary>
            The collages to synchronize.
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.ScanRcs0ToScanRcs">
            <summary>
            A list of mappers which maps from the reference slice stack to the
            slice stacks being shown in the collages in the _collages list.
            The first mapper maps from the reference slice stack to the slice
            stack being shown in the first collage, which is the reference slice
            stack also, and so the first mapper is an identity mapper. All
            mappers are defined in the coordinate system of the patient scan RCS
            of the first collage slice stack.
            </summary>
        </member>
        <member name="P:Claron.WIF.CollagesLink.IsFirstChance">
            <summary>
            Suggests the order in which this CollagesLink will be synchronized. If set to "true" this CollagesLink will be synchronized before other CollagesLink-s which are non-FirstChance.
            </summary>
        </member>
        <member name="T:Claron.WIF.CollageToolStrips">
            <summary>
            A form containing the pop-up tool-strips that appear inside Viewports during interaction
            with a Collage. The form does minimal or no processing of events raised by the
            toolstrips and the buttons they contain. The bulk of the event processing is done by
            the Collage.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.CollageToolStrips.ItemGet(System.Windows.Forms.ToolStrip,System.String)">
            <summary>
            Returns the first item in the strip with the given text, or Nothing if not found.
            </summary>
        </member>
        <member name="M:Claron.WIF.CollageToolStrips.ToolStrip_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            This event fires when the mouse moves outside of any specific button
            but is still associated with the toolstrip (eg, when dragging over the image).
            </summary>
        </member>
        <member name="F:Claron.WIF.ColorChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Claron.WIF.ColorChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Claron.WIF.ColorChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Claron.WIF.ColorChooserForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Claron.WIF.ColorChooserForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Claron.WIF.ColorChooserForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Claron.WIF.FolderBrowser">
            <summary>
            Encapsulates the shell folder browser dialog shown by SHBrowseForFolder
            Replaces the buggy FolderBrowserDialog .NET component.
            </summary>
        </member>
        <member name="M:Claron.WIF.FolderBrowser.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows the dialog
            </summary>
            <param name="owner">The window to use as the owner</param>
            <returns>True iff the user selected a folder</returns>
        </member>
        <member name="M:Claron.WIF.FolderBrowser.ShowDialog">
            <summary>
            Shows the dialog using active window as the owner
            </summary>
        </member>
        <member name="M:Claron.WIF.FolderBrowser.SetStatusText(System.String)">
            <summary>
            Sets the text of the staus area of the folder dialog
            </summary>
            <param name="text">Text to set</param>
        </member>
        <member name="M:Claron.WIF.FolderBrowser.EnableOkButton(System.Boolean)">
            <summary>
            Enables or disables the ok button
            </summary>
            <param name="bEnable">true to enable false to diasble the OK button</param>
        </member>
        <member name="M:Claron.WIF.FolderBrowser.SetSelection(System.String)">
            <summary>
            Sets the selection the text specified
            </summary>
            <param name="newsel">The path of the folder which is to be selected</param>
        </member>
        <member name="M:Claron.WIF.FolderBrowser.SetOkButtonText(System.String)">
            <summary>
            Sets the text of the OK button in the dialog
            </summary>
            <param name="text">New text of the OK button</param>
        </member>
        <member name="M:Claron.WIF.FolderBrowser.SetExpanded(System.String)">
            <summary>
            Expand a path in the folder
            </summary>
            <param name="path">The path to expand</param>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.InitializedEvent">
            <summary>
            Fired when the dialog is initialized
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.SelChangedEvent">
            <summary>
            Fired when selection changes
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.IUnknownObtainedEvent">
            <summary>
            Shell provides an IUnknown through this event. For details see documentation of SHBrowseForFolder
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.ValidateFailedEvent">
            <summary>
            Fired when validation of text typed by user fails
            </summary>
        </member>
        <member name="P:Claron.WIF.FolderBrowser.FolderDisplayName">
            <summary>
            The display name (w/o path) of the folder selected by the user
            </summary>
        </member>
        <member name="P:Claron.WIF.FolderBrowser.SelectedPath">
            <summary>
            The folder path that was selected by the user. Can be pre-set before showing the dialog.
            </summary>
        </member>
        <member name="P:Claron.WIF.FolderBrowser.Description">
            <summary>
            Text to be shown above the folder tree view
            </summary>
        </member>
        <member name="P:Claron.WIF.FolderBrowser.BrowseFlags">
            <summary>
            Sets the flags that control the behaviour of the dialog. Can be ORed together.
            </summary>
        </member>
        <member name="T:Claron.WIF.FolderBrowser.BrowseFlagsEnum">
            <summary>
            Flags that control display and behaviour of folder browse dialog
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.ReturnOnlyFSDirs">
            <summary>
            Same as BIF_RETURNONLYFSDIRS
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.DontGoBelowDomain">
            <summary>
            Same as BIF_DONTGOBELOWDOMAIN
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.ShowStatusText">
            <summary>
            Same as BIF_STATUSTEXT
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.ReturnFSancestors">
            <summary>
            Same as BIF_RETURNFSANCESTORS
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.EditBox">
            <summary>
            Same as BIF_EDITBOX
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.Validate">
            <summary>
            Same as BIF_VALIDATE
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.NewDialogStyle">
            <summary>
            Same as BIF_NEWDIALOGSTYLE
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.BrowseIncludeURLs">
            <summary>
            Same as BIF_BROWSEINCLUDEURLS
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.AddUsageHint">
            <summary>
            Same as BIF_UAHINT
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.NoNewFolderButton">
            <summary>
            Same as BIF_NONEWFOLDERBUTTON
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.BrowseForComputer">
            <summary>
            Same as BIF_BROWSEFORCOMPUTER
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.BrowseForPrinter">
            <summary>
            Same as BIF_BROWSEFORPRINTER
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.IncludeFiles">
            <summary>
            Same as BIF_BROWSEINCLUDEFILES
            </summary>
        </member>
        <member name="F:Claron.WIF.FolderBrowser.BrowseFlagsEnum.ShowShareable">
            <summary>
            Same as BIF_SHAREABLE
            </summary>
        </member>
        <member name="T:Claron.WIF.UnManagedMethods">
            <summary>
            A class that defines all the unmanaged methods used in the assembly
            </summary>
        </member>
        <member name="T:Claron.WIF.FolderSelChangedEventArgs">
            <summary>
            Provides data for folder selection changed event
            </summary>
        </member>
        <member name="P:Claron.WIF.FolderSelChangedEventArgs.CurSelFolderPidl">
            <summary>
            Return ITEMIDLIST for the currently selected folder
            </summary>
        </member>
        <member name="P:Claron.WIF.FolderSelChangedEventArgs.CurSelFolderPath">
            <summary>
            Gets the path of the folder which is currently selected
            </summary>
        </member>
        <member name="T:Claron.WIF.IUnknownObtainedEventArgs">
            <summary>
            Provides data for the IUnknownObtainedEvent.
            </summary>
        </member>
        <member name="P:Claron.WIF.IUnknownObtainedEventArgs.SiteUnknown">
            <summary>
            Object that corrensponds to the IUnknown obtained
            </summary>
        </member>
        <member name="T:Claron.WIF.ValidateFailedEventArgs">
            <summary>
            Provides data for validation failed event.
            </summary>
        </member>
        <member name="P:Claron.WIF.ValidateFailedEventArgs.InvalidText">
            <summary>
            The text which called validation to fail
            </summary>
        </member>
        <member name="P:Claron.WIF.ValidateFailedEventArgs.DismissDialog">
            <summary>
            Sets whether the dialog needs to be dismissed or not
            </summary>
        </member>
        <member name="T:Claron.WIF.Localized">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_DeleteGraphics">
            <summary>
              Looks up a localized string similar to Delete all rulers/arrows/texts/angles in this viewport.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_MoreToolsToolTip">
            <summary>
              Looks up a localized string similar to Angle using L click.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_PanLRUD">
            <summary>
              Looks up a localized string similar to Pan (L+M drag. Click to reset).
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_Print">
            <summary>
              Looks up a localized string similar to Print.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_ROI">
            <summary>
              Looks up a localized string similar to Region of interest (L-drag to draw)..
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_RulerArrowText">
            <summary>
              Looks up a localized string similar to Ruler/Arrow/Text using L/M/R click.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_Show_hide_overlays">
            <summary>
              Looks up a localized string similar to Overlays visibility (full-&gt;partial-&gt;hide) H-key to cycle.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_Twist">
            <summary>
              Looks up a localized string similar to Rotate.
            </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_Windowing">
             <summary>
               Looks up a localized string similar to Windowing (M drag on icon or on viewport. 
            L-Click to reset, R-Click to invert).
             </summary>
        </member>
        <member name="P:Claron.WIF.Localized.ToolStripButton_Zoom">
            <summary>
              Looks up a localized string similar to Zoom (L+R drag. Click to reset).
            </summary>
        </member>
        <member name="T:Claron.WIF.LogViewer">
            <summary>
            A simple pop-up form containing a text box for showing the contents of the Log
            object.
            </summary>
        </member>
        <member name="F:Claron.WIF.LogViewer._instance">
            <summary>
            The LogViewer class singleton instance.
            </summary>
        </member>
        <member name="M:Claron.WIF.LogViewer.Toggle">
            <summary>
            Toggles visibility of LogViewer window.
            </summary>
        </member>
        <member name="M:Claron.WIF.LogViewer.LogViewer_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Hides the log viewer instead of closing it.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.LogViewer.LogText(System.String)">
            <summary>
            Appends the given text string to the text in the text box in the
            LogViewer instance.
            </summary>
        </member>
        <member name="T:Claron.WIF.LogViewer.LogTextDelegate">
            <summary>
            Delegate for appending the given text string to the text in the
            text box in the LogViewer instance.
            </summary>
        </member>
        <member name="T:Claron.WIF.PresetEditor">
             <summary>
             Interactive editor for the properties of a RenderingPreset.
             The opacity and color mappings are stored in the preset as mappings from the
             normalized value range [0,1] to the color or range [0,1].
            
             The editor itself handles the values on the horizontal axis (X) in the resolution
             of the stored values (usually 0..4095), and shows the textual values as modality
             values. A histogram of the stored values is shown in the background either in linear
             or pseudo-logarithmic (compressed) scale. The mappings between the three value ranges
             (normalized, stored and modality) and the histogram are set by calling the function
             SetReferenceData with parameters taken from the referenced SliceStack.
            
             Since the width of the curve panel is usually insufficient for showing the modality value range
             (4096 values for CT) in full resolution, a selected range of values, controlled by a slider, is
             magnified to full resolution (ie, one pixel/value in X) and its width is set to half
             the width of the panel. The center of the magnified range is persisted in the preset being
             edited (ValueOfInterest property).
             </summary>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.PresetEditor.SetReferenceData(System.UInt64[],System.Int32,System.Double,System.Double)">
            <summary>
            Call this function to set the editor's display for a specific dataset.
            Pass Nothing to clear the histogram
            </summary>
            <param name="hist">A list of voxel counts in each value from StoredValueOf0 to StoredValueOf1</param>
            <param name="StoredValuesCount">The number (range) of stored values, eg, 4096 for full 12b</param>
            <param name="Stored2ModalityIntercept">The ratio between the modality and stored voxel values (see SliceStack).</param>
            <param name="Stored2ModalitySlope"></param>
        </member>
        <member name="P:Claron.WIF.PresetEditor.SelectedRangeEnabled">
            <summary>
            The selected range is needed only if there is not enough resolution in
            the opacity panel to show all the stored values.
            </summary>
        </member>
        <member name="P:Claron.WIF.PresetEditor.LogScaleHist">
            <summary>
            Gets or sets whether the histogram will be shown on a vertical log scale
            </summary>
        </member>
        <member name="P:Claron.WIF.PresetEditor.CurrentPreset">
            <summary>
            Gets or sets the currently displayed preset in the control
            </summary>
        </member>
        <member name="P:Claron.WIF.PresetEditor.SaveType">
            <summary>
            Describes whether and how the CurrentPreset should be saved
            </summary>
        </member>
        <member name="P:Claron.WIF.PresetEditor.SelectedPresetName">
            <summary>
            Gets the name entered by the user in the Name box. Returns null if CurrentPreset is null
            </summary>
        </member>
        <member name="P:Claron.WIF.PresetEditor.SelectedCategory">
            <summary>
            Returns the full path of the file implied by the users current selection of Name and Folder
            </summary>
        </member>
        <member name="T:Claron.WIF.SaveTypeEnum">
            <summary>
            Describes how the CurrentPreset can be saved
            </summary>
        </member>
        <member name="F:Claron.WIF.SaveTypeEnum.Save">
            <summary>
            Can save CurrentPreset using the Preset.Save method by specifying SelectedFolderPath as the folder path.
            </summary>
        </member>
        <member name="F:Claron.WIF.SaveTypeEnum.SaveAs">
            <summary>
            Can save CurrentPreset using the Preset.SaveAs method by specifying SelectedPresetName as the name
            and SelectedFolderPath as the path.
            </summary>
        </member>
        <member name="F:Claron.WIF.SaveTypeEnum.NoSave">
            <summary>
            Cannot save CurrentPreset with the typed Name at SelectedPresetFolder either because the preset
            is readonly or the name is invalid
            </summary>
        </member>
        <member name="T:Claron.WIF.PresetEditorForm">
            <summary>
            A simple pop-up form containing a preset editor control
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Claron.WIF.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Claron.WIF.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:Claron.WIF.CasesPathRemoter.GetStudyFolderNames(System.String)">
            <summary>
            Obtains the names of sub-folders of a given folder on the server
            </summary>
            <param name="ParentFolder">Path with or without a specific drive name</param>
            <returns>An array of the sub-folder names</returns>
        </member>
        <member name="T:Claron.WIF.ServerManager">
            <summary>
            Contains functions to choose correct server, and register remote objects etc.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ServerManager.StartRemoting(System.String)">
            <summary>
            Following this call, all new remoter objects will be created on the given server.
            The server cannot be switched or turned off afterwards (a new process needs to be started).
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ServerManager.StartLocalServerIfRequired">
            <summary>
            Starts local server if DeploymentMode = ClientAndLocalServer, mostly used for development purpose
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.SplashForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Claron.WIF.SplashForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Claron.WIF.SplashForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Claron.WIF.SurfaceContourSource">
            <summary>
            The common structure used to hold the surface and describe the style elements for displaying the
            calculated intersection contours.
            </summary>
        </member>
        <member name="M:Claron.WIF.SurfaceContourSource.op_Implicit(Claron.WIF.SurfaceContourSource)~Claron.WIF.Surface">
            <summary>
            Implicitly extract the surface from the source
            </summary>
            <param name="source">the container source</param>
            <returns>the encapsulated surface</returns>
        </member>
        <member name="M:Claron.WIF.SurfaceContourSource.op_Explicit(Claron.WIF.Surface)~Claron.WIF.SurfaceContourSource">
            <summary>
            Explicitly convert (i.e. cast) a surface object as a source using the default style settings
            </summary>
            <param name="surface">the surface to encapsulate</param>
            <returns>SurfaceContourSource instance with default style</returns>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.LengthUnitInMm">
            <summary>
            Scale factor used to convert the desired LengthUnit to millimeters (mm)
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.LengthUnit">
            <summary>
            The length unit used for display of statistics
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.Surface">
            <summary>
            The surface instance from which the contours are calculated.
            </summary>
            <remarks>This property is mandatory and should be set in the initialization phase of construction</remarks>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.StatisticsFormatter">
            <summary>
            The delegate that customizes how the statistics are formatted.
            </summary>
            <remarks>This property is optional</remarks>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.BrightColor">
            <summary>
            The optional color used to display the contour outline
            </summary>
            <remarks>This property is optional</remarks>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.DimColor">
            <summary>
            The color used to display the statistics graphics
            </summary>
            <remarks>This property is optional</remarks>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.TextSize">
            <summary>
            The size of the text used to display the statistics
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.PolylineNamePrefix">
            <summary>
            The prefix used to name the polyline names
            </summary>
            <remarks>This property is optional</remarks>
        </member>
        <member name="P:Claron.WIF.SurfaceContourSource.IsVisible">
            <summary>
            The visibility state for this source
            </summary>
        </member>
        <member name="T:Claron.WIF.SurfaceViewportHelper">
            <summary>
            Manage the last known state for the lesion as displayed on this viewport
            </summary>
            <remarks>
            A convenient usage pattern follows:
            <code>
             void UpdateBlobContours(Viewport vp, Surface surface, SliceStack ss, Vector3 posPr)
             {
               var helper = AssociatedDataShimSurfaceContourHelper.Bind(vp, () => 
                            new SurfaceContourHelper
                                {
                                  Viewport = vp, 
                                  Surface = surface,
                                  StatisticsFormatter = stats = string.Format( "Volume={0:N}", surface.Volume),
                                  DimColor = Lesion.Color.DimColor,
                                  BrightColor = Lesion.Color.BrightColor,
                                 }, surface.GuidHex);
               helper.UpdateBlobContours(ss, posPr);
             }
            
             public void ClearBlobContours(Collage collage)
             {
               foreach (var vp in collage.Viewports)
               {
                 AssociatedDataShimSurfaceContourHelper.Unbind(vp).Clear();
               }
             }
            </code>
            This bind creates the helper on demand and maintains its presence in the viewport.
            It is disposed when the viewport is disposed or when explicitly unbound to the
            viewport.
            </remarks>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.Clear">
            <summary>
            remove the polylines from the viewport
            </summary>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.IsNearContourCenter(Claron.WIF.Vector3)">
            <summary>
            Tests if the mouse is in the central spot of one of the contours of the Tissue
            </summary>
            <param name="posPr">candidate point (in patient RCS)</param>
            <returns>true if near; false otherwise</returns>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.IsNearContourBorder(Claron.WIF.Vector3)">
            <summary>
            True if the point is within 5mm of the contour border
            </summary>
            <param name="posPr">position in patient RCS (Pr).</param>
            <returns>true if constraint is met</returns>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.GetSurfaceContours(Claron.WIF.Vector3)">
            <summary>
            Retrieve the contours (in patient space) on the viewport 
            displaying the specified slice stack.
            </summary>
            <param name="posPr">a candidate point on the currently displayed slice in the viewport</param>
            <returns>an enumerable list of contours</returns>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.GetSurfacePolylines(Claron.WIF.SliceStack,Claron.WIF.Vector3)">
            <summary>
            Retrieve the polylines on the viewport displaying the
            provided slice stack.
            </summary>
            <param name="ss">the displayed slice stack</param>
            <param name="posPr">a candidate point on the currently displayed slice in the viewport</param>
            <returns>an enumerable list of polylines</returns>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.UpdateSurfaceContours(Claron.WIF.SliceStack,Claron.WIF.Vector3)">
            <summary>
            Update the contours (polylines) on the viewport displaying the
            provided slice stack.
            </summary>
            <param name="ss">the displayed slice stack</param>
            <param name="posPr">a candidate point on the currently displayed slice in the viewport</param>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.ShowStatistics(Claron.WIF.Vector3)">
            <summary>
            Display the statistics based on the following constraints:
            (1) only display statistics on axial views
            (2) only display statistics if the angle between axis Z of the slice and the axis Z of the
            Viewport Grid differ not more than by 1 degree
            (3) only display statistics when the axial view contains the largest contour on the lesion
            </summary>
            <param name="pointPr">a candidate point on the plane being displayed in the viewport</param>
            <returns>true when statistics should be displayed, false otherwise</returns>
        </member>
        <member name="M:Claron.WIF.SurfaceViewportHelper.ShowLargestSliceLine">
            <summary>
            Display the line of largest slice on the orthogonal views only if the angle
            between Z axis of the slice is orthogonal to the Z axis of the Viewport Grid
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceViewportHelper.Source">
            <summary>
            The surface and style used to draw the contours on this viewport
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceViewportHelper.Viewport">
            <summary>
            The viewport in which the contour should be displayed (on slab viewports)
            </summary>
            <remarks>This property is mandatory and should be set in the initialization phase of construction</remarks>
        </member>
        <member name="P:Claron.WIF.SurfaceViewportHelper.IsContourOnPlane">
            <summary>
            True if any contours are on the plane displayed by the viewport
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceViewportHelper.Timestamps">
            <summary>
            The collection of timestamps (LastUpdateTicks) that cover the WIF objects that affect
            the polyline representing the lesion intersection on the viewport.  If any of these change
            relative to the last calculation of the polyline, then the polyline is stale, and needs
            to be recalculated.
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceViewportHelper.IsStale">
            <summary>
            Determine based on the most recent timestamp (LastUpdateTicks) whether
            the cached timestamp is stale.
            </summary>
        </member>
        <member name="F:Claron.WIF.SurfaceCollageHelper.DefaultViewportSelector">
            <summary>
            Enable selection or de-selection of user/default viewports for surface contour display
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceCollageHelper.Source">
            <summary>
            The source definition for the surface and the style to use to draw the contours
            </summary>
            <remarks>This property is mandatory and should be set in the initialization phase of construction</remarks>
        </member>
        <member name="P:Claron.WIF.SurfaceCollageHelper.Collage">
            <summary>
            The collage in which the contour should be displayed (on slab viewports)
            </summary>
            <remarks>This property is mandatory and should be set in the initialization phase of construction</remarks>
        </member>
        <member name="T:Claron.WIF.SurfaceContourManager">
            <summary>
            A persistable manager of surfaces for display on a given collage
            </summary>
            <remarks>
            Typically, this is used as follows:
            <code>
              SurfaceContourManager.Bind(collage) // add the manager to the collage
              SurfaceContourManager.Bind(collage).Add(surface); // add a surface for display
              SurfaceContourManager.Bind(collage).Remove(surface); // remove a surface from display
              SurfaceContourManager.Unbind(collage) // remove the manager from the collage
            </code>
            </remarks>
        </member>
        <member name="M:Claron.WIF.SurfaceContourManager.Add(Claron.WIF.SurfaceContourSource)">
            <summary>
            Add (or replace) a surface for display
            </summary>
            <param name="source">the surface source to display</param>
        </member>
        <member name="M:Claron.WIF.SurfaceContourManager.Exists(Claron.WIF.Surface)">
            <summary>
            Reports the existence of a surface
            </summary>
            <param name="surface">the surface to report upon</param>
            <returns>true if surface is found</returns>
        </member>
        <member name="M:Claron.WIF.SurfaceContourManager.Remove(Claron.WIF.Surface)">
            <summary>
            Remove the surface from display
            </summary>
            <param name="surface">the surface to be removed</param>
        </member>
        <member name="P:Claron.WIF.SurfaceContourManager.Sources">
            <summary>
            The read-only list of sources being displayed
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceContourManager.ViewportSelector">
            <summary>
            Enables user based selection of viewports to display the surface contours
            </summary>
        </member>
        <member name="P:Claron.WIF.SurfaceContourManager.Item(Claron.WIF.Surface,Claron.WIF.Viewport)">
            <summary>
            The viewport specific helper managing display of the surface
            </summary>
            <param name="surface">the surface instance</param>
            <param name="vp">the viewport instance</param>
            <returns>the bound viewport helper</returns>
        </member>
        <member name="P:Claron.WIF.SurfaceContourManager.Collage">
            <summary>
            The collage on which surfaces are displayed
            </summary>
            <remarks>This is a mandatory property and should be set in the property initialization of the constructor. 
            The property is automatically set when using the factory method "Bind"</remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.CursorWifGet(Claron.WIF.UIUtils.CursorWifEnum)">
            <summary>
            Obtains one of pre-defined WIF cursors. The cursors are stored in resources as part of the DLL as embedded.
            </summary>
            <param name="val">The cursor enum</param>
            <returns></returns>
            <remarks>All the cursors are loaded once on the first call</remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.CursorWifSet(Claron.WIF.UIUtils.CursorWifEnum,System.Windows.Forms.Cursor)">
            <summary>
            Sets a pre-defined WIF cursor to a new cursor shape defined by the client
            </summary>
            <param name="val"></param>
            <param name="value"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.CursorWifReadAllFromAssembly">
            <summary>
            Reads all cursors from assembly into the UIUtils.LoadedCursors dictionary
            Note: even in x86 mode will access the AnyCPU assembly during development
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32)">
            <summary>
            Draw an 8-points string with a shadowed background.
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates of the left of the first letter to write</param>
            <param name="y">Y position in graphics coordinates of the top of the text</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.FontFamily)">
            <summary>
            Draw an 8-points string with a shadowed background.
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates of the left of the first letter to write</param>
            <param name="y">Y position in graphics coordinates of the top of the text</param>
            <param name="fontFamily">The font family used to draw the text</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="F:Claron.WIF.UIUtils.DefaultFontFamily">
            <summary>
            The default sans serif font family (typically "Arial")
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.SolidBrush)">
            <summary>
            Draw an 8-points string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="HAlignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.FontFamily,System.Drawing.SolidBrush)">
            <summary>
            Draw an 8-points string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="HAlignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="fontFamily">The font family used to draw the string</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.UInt32,System.Drawing.SolidBrush)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="HAlignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="SizePoints">Size of string</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.FontFamily,System.UInt32,System.Drawing.SolidBrush)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="HAlignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="fontFamily">The font family used to draw the string</param>
            <param name="SizePoints">Size of string</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.UInt32,System.Drawing.SolidBrush,System.Boolean,System.Boolean,System.Drawing.Pen)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="HAlignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="SizePoints">Size of string</param>
            <param name="brush">Default value = null</param>
            <param name="strongShadow">draws an extra strong text shadow. Default value = false</param>
            <param name="fillBackgroundRect">If true, a filled rectangular background is draw behind the text using UIUtils.TextBackgroundBrush.</param>
            <param name="backgroundRectOutlinePen">The pen to use for drawing an outline around the background rectangle</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.FontFamily,System.UInt32,System.Drawing.SolidBrush,System.Boolean,System.Boolean,System.Drawing.Pen)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="HAlignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="fontFamily">The font family used to draw the string</param>
            <param name="SizePoints">Size of string</param>
            <param name="brush">Default value = null</param>
            <param name="strongShadow">draws an extra strong text shadow. Default value = false</param>
            <param name="fillBackgroundRect">If true, a filled rectangular background is draw behind the text using UIUtils.TextBackgroundBrush.</param>
            <param name="backgroundRectOutlinePen">The pen to use for drawing an outline around the background rectangle</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.UInt32,System.Drawing.FontStyle,System.Double,System.Drawing.SolidBrush)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="SizePoints">Size of string</param>
            <param name="fontStyle">Font style (bold, italics, etc.) to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.UInt32,System.Drawing.FontFamily,System.Drawing.FontStyle,System.Double,System.Drawing.SolidBrush)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="fontFamily">The font family used to draw the string</param>
            <param name="SizePoints">Size of string</param>
            <param name="fontStyle">Font style (bold, italics, etc.) to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.FontFamily,System.UInt32,System.Drawing.FontStyle,System.Double,System.Drawing.SolidBrush)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="fontFamily">The font family</param>
            <param name="SizePoints">Size of string</param>
            <param name="fontStyle">Font style (bold, italics, etc.) to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.UInt32,System.Drawing.FontStyle,System.Double,System.Drawing.SolidBrush,System.Boolean,System.Boolean,System.Drawing.Pen)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="SizePoints">Size of string</param>
            <param name="fontStyle">Font style (bold, italics, etc.) to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <param name="strongShadow">draws an extra strong text shadow. Default value = false</param>
            <param name="fillBackgroundRect">If true, a filled rectangular background is draw behind the text using UIUtils.TextBackgroundBrush.</param>
            <param name="backgroundRectOutlinePen">The pen to use for drawing an outline around the background rectangle</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.FontFamily,System.UInt32,System.Drawing.FontStyle,System.Double,System.Drawing.SolidBrush,System.Boolean,System.Boolean,System.Drawing.Pen)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="fontFamily">The font family used to draw the string</param>
            <param name="SizePoints">Size of string</param>
            <param name="fontStyle">Font style (bold, italics, etc.) to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <param name="strongShadow">draws an extra strong text shadow. Default value = false</param>
            <param name="fillBackgroundRect">If true, a filled rectangular background is draw behind the text using UIUtils.TextBackgroundBrush.</param>
            <param name="backgroundRectOutlinePen">The pen to use for drawing an outline around the background rectangle</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.Font,System.Double,System.Drawing.SolidBrush)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="font">The font to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,Claron.WIF.Vector3,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.Font,System.Double,System.Drawing.SolidBrush)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="ptViIgnoringZ">XY Position in Viewport index coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="font">The font to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="F:Claron.WIF.UIUtils._textBackgroundBrush">
            <summary>
            The background brush for text.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.DrawShadowedString(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Drawing.Font,System.Double,System.Drawing.SolidBrush,System.Boolean,System.Boolean,System.Drawing.Pen)">
            <summary>
            Draw a string with a shadowed background
            </summary>
            <param name="G">The Graphics to use for drawing</param>
            <param name="S">The string</param>
            <param name="x">X Position in graphics coordinates</param>
            <param name="y">Y position in graphics coordinates</param>
            <param name="Halignment">Horizontal alignment of the string relative to the point</param>
            <param name="Valignment">Vertical alignment of the string relative to the point</param>
            <param name="font">The font to use</param>
            <param name="opacity0to1">Opacity of the text over the background</param>
            <param name="brush">Default value = null</param>
            <param name="strongShadow">draws an extra strong text shadow. Default value = false</param>
            <param name="fillBackgroundRect">If true, a filled rectangular background is draw behind the text using UIUtils.TextBackgroundBrush.</param>
            <param name="backgroundRectOutlinePen">The pen to use when drawing the outline of the background rect. If null
            then outline is not drawn. Default value = null.</param>
            <returns>The height, in pixels, taken by the drawn text (for drawing additional lines)</returns>
        </member>
        <member name="M:Claron.WIF.UIUtils.BitmapCopyAndModifyOpacity(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double)">
            <summary>
            Copies and modifies the alpha channel of a bitmap to a given opacity fraction
            </summary>
            <param name="SourceBitmap">The bitmap to be copied</param>
            <param name="TargetBitmap">The bitmap to receive the (possibly modified) copy. Must be of same format and dimensions.</param>
            <param name="Opacity0to1">The factor by which to multiply the alpha channel of the bitmal</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.PolylineFromPolygon(Claron.WIF.Polyline@,Claron.WIF.GridBox,System.Drawing.Pen,Claron.WIF.Vector3[])">
            <summary>
            Generates or updates a polyline representing a flat polygon, including a facing direction vector.
            The vertexes should be listed in clockwise direction when viewed from the outside (facing).
            </summary>
            <param name="Pl">The polyline to be created or updated (if exists and has the same number of points)</param>
            <param name="Pen"></param>
            <param name="RCS"></param>
            <param name="VertexesClockwiseWhenFacing"></param>
        </member>
        <member name="M:Claron.WIF.UIUtils.PolylinesFromBox(Claron.WIF.Polyline[]@,Claron.WIF.Box,Claron.WIF.GridBox,System.Drawing.Pen,System.Boolean)">
            <summary>
            Converts a box into a set of polylines for display on a viewport.
            </summary>
            <param name="Polys">An array of polylines to create (if doesn't exist) or update</param>
            <param name="bBox">The box coordinates</param>
            <param name="RCS">The coordinate system in which the box resides</param>
            <param name="Pen">The pen in which the box would be drawn</param>
            <param name="HideBackFaces"></param>
        </member>
        <member name="M:Claron.WIF.UIUtils.PolylinesFromBox(Claron.WIF.Polyline[]@,Claron.WIF.Vector3[],Claron.WIF.GridBox,System.Drawing.Pen,System.Boolean)">
             <summary>
            
             </summary>
             <param name="Polys"></param>
             <param name="bxPts">the bounding box points.</param>
             <param name="RCS"></param>
             <param name="Pen"></param>
             <param name="HideBackFaces"></param>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.Application_ThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
             <summary>
             Handles unhandled exceptions in a unified fashion.
            
             Recommended usage:
             At top-level component creation:
               SupportEmailAddress = "support@mycompany.com"
               AddHandler Application.ThreadException, AddressOf Application_ThreadException
               AddHandler AppDomain.CurrentDomain.UnhandledException, AddressOf CLR_UnhandledException
            
             </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.HandleException(System.Exception)">
             <summary>
            
             Creates and displays an error message.
            
             </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.MouseOverControl(System.Object)">
            <summary>
            Returns true it the mouse cursor/pointer is positioned over a given control
            (regardless of whether the control is visible).
            </summary>
            <param name="Ctrl">The control to test against</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.ButtonDown(System.Windows.Forms.Keys)">
            <summary>
            Returns true of the mouse or keyboard button is currently down
            </summary>
            <param name="ButtonCode"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.ButtonDown(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Returns true of the mouse or keyboard button is currently down
            </summary>
            <param name="ButtonCode"></param>
            <param name="Physical">Default value = False</param>
            <remarks>If physical is true, it refers to the actual physical button, otherwise it considers
            My.Computer.Mouse.ButtonsSwapped </remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.AnyMouseButtonsDown">
            <summary>
            Returns true iff any of the mouse buttons is currently down
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.MouseCursorMove(Claron.WIF.Viewport,Claron.WIF.Vector3)">
            <summary>
            Moves the mouse cursor on the screen so that it would be positioned
            over a given location in a viewport.
            </summary>
            <param name="vp">The viewport over which to position it</param>
            <param name="ToVi">The viewport index coordinate on which the mouse would be
            positioned. Silently clamped to viewport dimensions.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.CompactedPath(System.String,System.Windows.Forms.Control,System.Int64)">
            <summary>
            Truncates a file path to fit within a given pixel width by replacing path components with ellipses.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.CompactedPath(System.String,System.Int32)">
            <summary>
            Truncates a file path by replacing path components with ellipses.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.SnapshotOfScreen(System.Int32)">
            <summary>
            Returns a Bitmap object representing the full screen image (only one screen if there are multiple).
            The caller is responsible for disposing of the returned bitmap.
            </summary>
            <param name="ScreenNumber">Default value = 0</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.DisableDataDependentControls(System.Windows.Forms.Control)">
            <summary>
            Sets the Enabled property controls (other than labels) inside the given container
            (recursive into sub-containers) to false when data is not available.
            Controls with their Tag set to "data independent" are ignored.
            Useful to call at the beginning of applications, before the first data set is loaded.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.EnableDataDependentControls(System.Windows.Forms.Control)">
            <summary>
            Sets the Enabled property of controls inside the given container
            (recursive into sub-containers) to true when data becomes available.
            Controls with their Tag set to "data independent" are ignored.
            Useful to call when a new data set is loaded, or a state is restored.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlByTag(System.Windows.Forms.Control,System.String)">
            <summary>
            Returns a control contained (recursively) in the given container that has the
            given tag string, or nothing if not found.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.LoadSlicesWithProgressDisplay(System.String,System.Collections.Specialized.StringCollection,System.Windows.Forms.StatusStrip,System.Windows.Forms.ToolStripProgressBar,System.Windows.Forms.ToolStripStatusLabel,System.Int32)">
            <summary>
            Loads a list of DICOM files before creating a slice stack.
            </summary>
            <param name="folderPath">The full path of the folder from which to load.</param>
            <param name="fileNames">The names of the files to load from that folder (to concatenate to folderPath).
            If Nothing, then all the files in the folder.</param>
            <param name="OnlyEveryNth">Optional: Dilution ratio to reduce memory consumption.
            If larger than 1, then after the loading, filtering and sorting, the stack is
            diluted by keeping only every OnlyEveryNth slice and freeing the rest. Default value = 1</param>
            <param name="_progressBar"></param>
            <param name="_statusStrip"></param>
            <param name="_statusLabel"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlSetText(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the text of the control only if necessary.
            </summary>
            <param name="ctrl">The control to set the text of.</param>
            <param name="text"></param>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlsSetEnableState(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Boolean)">
            <summary>
            Sets the enable/disable state of control only if necessary.
            </summary>
            <param name="ctrls">The control to set the enable/disable state of.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlSetEnableState(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the enable/disable state of control only if necessary.
            </summary>
            <param name="ctrl">The control to set the enable/disable state of.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlSetEnableState(System.Windows.Forms.ToolStripButton,System.Boolean)">
            <summary>
            Sets the enable/disable state of the toolstrip button if necessary.
            </summary>
            <param name="button">The button to set the enable/disable state of.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlSetCheckState(System.Windows.Forms.ToolStripButton,System.Boolean)">
            <summary>
            Sets the check state of the toolstrip button if necessary.
            </summary>
            <param name="button">The toolstrip button to set the check state of.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlSetCheckState(System.Windows.Forms.CheckBox,System.Boolean)">
            <summary>
            Sets the check state of the check button if necessary.
            </summary>
            <param name="button">The check button to set the check state of.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.ControlSetCheckState(System.Windows.Forms.RadioButton,System.Boolean)">
            <summary>
            Sets the check state of the radio button if necessary.
            </summary>
            <param name="button">The radio button to set the check state of.</param>
            <param name="state">The new state.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.TopLevelControl(System.Windows.Forms.Control)">
            <summary>
            Returns the top of the parenting hierarchy for a given control (usually the application form).
            Unlike the similar TopLevelControl property of controls, this function is guaranteed to never
            return Nothing if its parameters is not nothing, and to work for WPF-hosted controls.
            </summary>
            <param name="C">The control whose top level we are looking for.</param>
            <returns>The highest level control, or Nothing if C is Nothing</returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.UIUtils.TextBackgroundBrush">
            <summary>
            The background brush for textg.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.Logo">
            <summary>
            The Logo image that can be added to viewports or images as needed.
            If not set otherwise by the application, the built-in Claron/WIF logo is used.
            Recommended image storage format for logos and icons is PNG.
            The property Tag can be set to any value of LogoAlignmentEnum to specify in which corner the logo shows up
            </summary>
        </member>
        <member name="T:Claron.WIF.UIUtils.AutoWaitCursor">
            <summary>
             This static utility class can be used to automatically show a wait cursor
             when the application is busy (ie the UI thread is not responding to messages
             sent to it from another thread). The class automatically monitors the application
             state, removing the need for manually changing the cursor anywhere, even in forms
             other than the startup (main) form.
             
             Note that when the UI thread enters a wait state for threads to join it doesn't block
             SendMessage, and will therefore appear as if the UI thread is still responsive.
             
             </summary>
             <example>
             To use, simply insert the following line in the startup (main) form of the application
            
             private void Form_Load(object sender, System.EventArgs e) {
                 ...
            			AutoWaitCursor.Start(me.Handle);
            			....
             }
             </example>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor._appStateMonitor">
            <summary>
            The application state monitor class (which monitors the application busy status).
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.Start">
            <summary>
            Starts the auto wait cursor monitoring the application.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.Start(System.IntPtr)">
            <summary>
            Starts the auto wait cursor monitoring the application.
            </summary>
            <param name="mainWindowHandle">The handle of the startup form of the application</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.Suspend">
            <summary>
            Stops the auto wait cursor monitoring the application.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationIdleTime">
            <summary>
            Returns the amount of time the application has been idle.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.IsStarted">
            <summary>
            Returns true if the auto wait cursor has been started.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.Cursor">
            <summary>
            Gets or sets the Cursor to use during Application busy periods.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.Enabled">
            <summary>
            Enables or disables the auto wait cursor.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.Delay">
            <summary>
            Gets or sets the period of Time to wait before showing the WaitCursor whilst Application is working
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.MainWindowHandle">
            <summary>
            Gets or sets the main window handle of the application (ie the handle of an MDI form).
            This is the window handle monitored to detect when the application becomes busy.
            </summary>
        </member>
        <member name="T:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor">
            <summary>
            Private class that monitors the state of the application and automatically
            changes the cursor accordingly.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._inactiveStart">
            <summary>
            The time the application became inactive.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._isStarted">
            <summary>
            If the monitor has been started.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._delay">
            <summary>
            Delay to wait before calling back
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._mainWindowHandle">
            <summary>
            The windows handle to the main process window.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._callbackThread">
            <summary>
            Thread to perform the wait and callback
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._isDisposed">
            <summary>
            Stores if the class has been disposed of.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._enabled">
            <summary>
            Stores if the class is enabled or not.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._mainThreadId">
            <summary>
            GUI Thread Id .
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._callbackThreadId">
            <summary>
            Callback Thread Id.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._oldCursor">
            <summary>
            Stores the old cursor.
            </summary>
        </member>
        <member name="F:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._waitCursor">
            <summary>
            Stores the new cursor.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.#ctor(System.Windows.Forms.Cursor,System.TimeSpan)">
            <summary>
            Default member initialising Constructor
            </summary>
            <param name="waitCursor">The wait cursor to use.</param>
            <param name="delay">The delay before setting the cursor to the wait cursor.</param>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.Dispose">
            <summary>
            On Disposal terminates the Thread, calls Finish (on thread) if Start has been called
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.Start">
            <summary>
            Starts the application state monitor.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.Suspend">
            <summary>
            Stops the application state monitor.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.SetWaitCursor">
            <summary>
            Set the Cursor to wait.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.RestoreCursor">
            <summary>
            Finish showing the Cursor (switch back to previous Cursor)
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._CreateMonitorThread">
            <summary>
            Prepares the class creating a Thread that monitors the main application state.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._ThreadCallbackLoop">
            <summary>
            Thread callback method.
            Loops calling SetWaitCursor and RestoreCursor until Disposed.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._IsApplicationBusy(System.TimeSpan,System.IntPtr)">
            <summary>
            Blocks until the application responds to a test message.
            If the application doesn't respond with the timespan, will return false,
            else returns true.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._WaitForIdle">
            <summary>
            Waits for the ResetEvent (set by Dispose and Reset),
            since Start has been called we *have* to call RestoreCursor once the thread is idle again.
            </summary>
        </member>
        <member name="M:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor._OnApplicationThreadExit(System.Object,System.EventArgs)">
            <summary>
            The application is closing, shut the state monitor down.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.Enabled">
            <summary>
            Enable/Disable the call to Start (note, once Start is called it *always* calls the paired Finish)
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.Delay">
            <summary>
            Gets or sets the period of Time to wait before calling the Start method
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.IsStarted">
            <summary>
            Returns true if the auto wait cursor has been started.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.MainWindowHandle">
            <summary>
            Gets or sets the main window handle of the application (ie the handle of an MDI form).
            This is the window handle monitored to detect when the application becomes busy.
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.Cursor">
            <summary>
            Gets or sets the Cursor to show
            </summary>
        </member>
        <member name="P:Claron.WIF.UIUtils.AutoWaitCursor.ApplicationStateMonitor.ApplicationIdleTime">
            <summary>
            Returns the amount of time the application has been idle.
            </summary>
        </member>
        <member name="T:Claron.WIF.UIUtils.SpecialWindowHandles">
            <summary>
            Note cases these as IntPtr.
            </summary>
        </member>
        <member name="T:Claron.WIF.ListViewExtensions">
            <summary>
            ListView extensions from:
            
            http://stackoverflow.com/questions/254129/how-to-i-display-a-sort-arrow-in-the-header-of-a-list-view-column-using-c
            </summary>
        </member>
        <member name="T:Claron.WIF.Viewport">
             <summary>
             Viewport represents a multi-layered region on the screen for user input/output.
            
             <para>Viewport is used for displaying the output of one or more Camera objects + overlays
             in a PictureBox control provided by the client.
             If there is more than one Camera, the Camera images are composited on top of each other
             back to front in index order (0 is in the back). Text and graphic objects are then
             composited on top of the images.</para>
            
             <para>The Viewport RCS is identical to the one used by the input Camera (Camera 0
             if there's more than one). The RCS units have no specific meaning and vary
             with the magnification. The Viewport grid in XY represents pixel units on the screen,
             and in Z represents the samples along each ray projected from that pixel.
             The Viewport's grid spacing may be different than the Camera's grid
             spacing - this is common during interactive updates. Note that the spatial region being
             viewed in the Viewport is dictated by the extent of the Camera grid, not the other way
             around, so to modify the zoom/pan factors, the InCamera's grid, not the
             Viewport's needs to be manipulated.</para>
            
             <para>Viewport does not respond to UI events, and does not raise events of its own.
             mouse events over the Viewport can be intercepted by handling the events of the OutPictureBox
             control. The client can override or extend the default overlay functions (for all Viewports)
             by assigning its own delegate function to one of the various Draw*Override delegates.
            
             </para>
             </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.InImageArgbZoomConstraint">
            <summary>
            The minimum zoom should be constrained to be a relative fraction of the image size e.g. 10%
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._InCameras">
            <summary>
            The actual array of cameras used by the viewport. Use caution if modifying it directly!
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport._InCameraForcedDimsXY">
            <summary>
            The camera grid x- and y-dims.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.UpdatePatientScanScaleArgb">
            <summary>
            Update view port grid's patient scan scale for ARGB image
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._Polylines">
            <summary>
            Polylines to draw over the image, accessed by their name.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesGet(System.String)">
            <summary>
            Access to an overlay Polyline by its name property.
            Will return null if not found.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesGetAny(System.String)">
            <summary>
            Returns all the overlay Polylines with names starting with a given string.
            </summary>
            <returns>A dictionary of the polylines indexed by their name.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesSet(System.String,Claron.WIF.Polyline)">
            <summary>
            Sets an overlay Polyline under a given name.
            If already set, the polyline by the same name is removed first.
            </summary>
            <param name="Name"></param>
            <param name="value"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesMatchingGet(System.String)">
            <summary>
            Retrieves Polylines by the pattern of their Name property.
            </summary>
            <param name="NamePattern">A string pattern as per the "Like" operator (*,?,#,[abc], etc.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesCount">
            <summary>
            Returns the number of overlay Polylines.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineAdd(Claron.WIF.Polyline,System.String)">
            <summary>
            Adds a new overlay Polyline (or replace if an existing one by that name was already added).
            </summary>
            <param name="PolylineToAdd">The Polyline to add.</param>
            <param name="Name">A name for the Polyline, must be unique in this viewport.
            If not provided, the Polyline's UID will be used.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineRename(Claron.WIF.Polyline,System.String)">
            <summary>
            Renames the given polyline.
            If another polyline already has the new name, it will be removed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineAddFromTissueColorwash(Claron.WIF.Tissue,System.Drawing.Point,System.String,Claron.WIF.GridBox)">
            <summary>
            Adds a new polyline created from the outline of a tissue colorwash region in the
            output image of InCamera, and returns the newly created polyline.
            </summary>
            <param name="Tis">The tissue from which to create the polyline. Must be used as input
            to InCamera and enabled there.</param>
            <param name="SeedVi">The location, in viewport grid (PictureBox) coordinates, of
            a seed location inside the region whose outer outline is to be converted to polyline. If
            the location is outside the tissue region (or any region if tissue is not provided),
            then the first colorwash region found in a raster scan starting from this position
            would be used (use (0,0) if there is only one region).</param>
            <param name="Name">The polyline name to use. If a polyline by that name exists, it would
            be replaced. If null or empty, a new name would be created.</param>
            <param name="RCS">The RCS in which the polyline would be placed. If null, PatientScan
            RCS would be used.</param>
            <returns>The newly created (and added) polyline, or null if it was not possible to create it.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesAddFromTissueColorwashOutline(Claron.WIF.Tissue,System.Drawing.Point,System.String,Claron.WIF.GridBox)">
            <summary>
            Adds a new polyline created from the outline of a tissue colorwash region in the
            output image of InCamera, and returns the newly created polyline.
            </summary>
            <param name="Tis">The tissue from which to create the polyline. Must be used as input
            to InCamera and enabled there.</param>
            <param name="OutlinePointVi">The location, in viewport grid (PictureBox) coordinates, of
            a location on the outline to be converted to polyline.</param>
            <param name="Name">The polyline name to use. If a polyline by that name exists, it would
            be replaced. If null or empty, a new name would be created.</param>
            <param name="RCS">The RCS in which the polyline would be placed. If null, PatientScan
            RCS would be used.</param>
            <returns>The newly created (and added) polyline, or null if it was not possible to create it.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.ColorwashOutlineToArrayVr(System.Byte[],System.Drawing.Point,System.Byte[]@)">
            <summary>
            Converts the contour labeled with value '3' in the colorwash image that starts at the given outline point into an array of Vr vectors.
            </summary>
            <param name="CwImage">The colorwash image array with the rasterized contour</param>
            <param name="OutlinePointVi">The start point</param>
            <param name="boundaryImage">If not null, the points in the outline will be set to 1 in this buffer</param>
            <returns>The vector version of the contour.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.NearestEditableColorwashOutline(System.Double,System.Double,System.Double,System.Drawing.Point@)">
            <summary>
            Given a location, searches the editable tissues colorwash images rendered by InCamera for the nearest
            colorwash outline point. Typically used for allowing editing of the colorwash region.
            </summary>
            <param name="XVi">Location X in viewport index</param>
            <param name="YVi">Location Y in viewport index</param>
            <param name="SearchRadiusPixels">For efficiency, search only up to this distance from location</param>
            <param name="outOutlinePointVi">Output location of the nearest outline point, if found</param>
            <returns>The nearest editable tissue, or null if none found</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.NearestColorwashOutline(Claron.WIF.Tissue,System.Double,System.Double,System.Double)">
            <summary>
            Finds the returns the nearest tissue colorwash outline point for a given tissue
            </summary>
            <param name="tis">The tissue</param>
            <param name="XVi">Vi X Coordinate for starting the search</param>
            <param name="YVi"></param>
            <param name="SearchRadiusPixels">Points farther away than this distance will be ignored. Use
            a negative value if the whole image should be searched</param>
            <returns>The nearest outline point, or a (-1,-1) if none found within the search radius</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineRemove(Claron.WIF.Polyline)">
            <summary>
            Remove a graphic Polyline from the list.
            </summary>
            <remarks>Does nothing if the Polyline is not on the list</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineRemove(System.String)">
            <summary>
            Remove an Polyline from the list by name.
            Does nothing if the Polyline is not on the list.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineRemoveAny(System.String)">
            <summary>
            Remove any Polyline from the list with a name starting with the given string.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesClear">
            <summary>
            Remove all the graphic Polylines from the list.
            </summary>
            <remarks>Does nothing if the Polyline is not on the list</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesFindNearest(System.Double,System.Double,Claron.WIF.Polyline@,System.Int32@,System.Double@,System.Boolean)">
            <summary>
            Locates the visible polyline point that is closest to a given
            position in PictureBox pixel coordinates. If more than one point is found at the same
            distance, the DrawOrder is considered (the one most in front is selected).
            Designed to support interactive polyline probing.
            </summary>
            <param name="XVi">The X coordinate in viewport index (as reported from mouse events)</param>
            <param name="YVi">The Y coordinate in viewport index (as reported from mouse events)</param>
            <param name="outNearestPolyline">The nearest polyline or null if none is visible.</param>
            <param name="outNearestPointI">The closest polyline point index in outNearestPolyline (if not null)</param>
            <param name="outDistance2DInPixels">Output - the distance to the nearest point on the closest
            polyline. If no polyline is found, the distance will be set to Double.MaxValue.</param>
            <param name="OnlyEditable">Whether to search only editable polygons.</param>
            <remarks>For now, only computes the distance to the points of the polyline. A more accurate
            calculation should use the full line segments.</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineNearestEditable(System.Double,System.Double,System.Double@)">
            <summary>
            Returns the visible and editable polyline that appears closest to a given
            position in PictureBox pixel coordinates. Supports interactive polyline probing.
            </summary>
            <param name="X">The X coordinate in pixels (as reported from mouse events)</param>
            <param name="Y">The Y coordinate in pixels (as reported from mouse events)</param>
            <param name="outDistance2DInPixels"></param>
            <returns>The closest polyline or null if none exists or the distance to it exceeds
            MaximumAllowedDistance2DInPixels</returns>
            <remarks>For now, only computes the distance to the points of the polyline. A more accurate
            calculation should use the full line segments.</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesLastUpdateTicks">
            <summary>
            Returns the update ticks of the last time any of the Polylines has been modified,
            or 0 if there are no Polylines.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylinesSetFromPrCurvesOnSsFaces(System.Collections.Generic.Dictionary{System.String,Claron.WIF.Curve}[],System.Single)">
            <summary>
            A convenience function for showing the results of 4vu atlas registration.
            Converts the given list of curve-name dictionaries into polylines for display,
            all having names starting with the letters "Anatomy".
            For each view direction (F,B,L,R) a different set of curves is assumed,
            and they are depth mapped onto the corresponding face of first slicestack in the first camera of the viewport.
            </summary>
            <param name="curvesPerViewDir">The array of string/curve dictionaries to be displayed on the viewport.</param>
            <param name="penStrokeWidth">Default = 0; larger values (2,3, ..) make the lines thicker.</param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.EditedPolyline">
            <summary>
            The polyline edited in the most recently executed PolylineEditingEnd(), in its post-edit state.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.EditedPolylineComplementary">
            <summary>
            When the original polyline being edit was a closed one, this is the complementary
            polyline (with the smaller area) to EditedPolyline,
            May be null if no such meaningful polyline
            was generated by PolylineEditingEnd (eg, when the original polyline was open).
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineDrawingNewStart(System.Int32,System.Int32,System.String,System.Drawing.Pen,Claron.WIF.GridBox)">
            <summary>
            Initiates interactive drawing/editing of a new polyline.
            </summary>
            <param name="XVi">Cursor position X in Vi, usually the mouse cursor position</param>
            <param name="YVi">Cursor position Y in Vi, usually the mouse cursor position</param>
            <param name="PlName">The name of the existing or new polyline</param>
            <param name="pen">The pen to use in the drawing</param>
            <param name="PolylineRcs">The RCS in which the polyline will be placed.</param>
            <returns>The newly created polyline</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineDrawingNewStart(System.Int32,System.Int32,Claron.WIF.Polyline)">
            <summary>
            Initiates interactive drawing/editing of the new polyline.
            </summary>
            <param name="XVi">Cursor position X in Vi, usually the mouse cursor position</param>
            <param name="YVi">Cursor position Y in Vi, usually the mouse cursor position</param>
            <param name="polyline">The new polyline</param>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineEditingStart(System.String,System.Int32,System.Int32)">
            <summary>
            Starts editing an existing polyline by drawing a correction polyline, which will be
            merged with the original polyline on completion.
            </summary>
            <param name="PlName">The name of the polyline to edit - must already exist in the viewport's polylines
            list, or an exception will be generated</param>
            <param name="XVi">Cursor position X in Vi, usually the mouse cursor position</param>
            <param name="YVi">Cursor position Y in Vi, usually the mouse cursor position</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineEditingRubberBand(System.Int32,System.Int32)">
            <summary>
            Moves the last point in the edited polyline to the (clamped) position.
            </summary>
            <param name="XVi">Cursor position X in Vi, usually the mouse cursor position</param>
            <param name="YVi">Cursor position Y in Vi, usually the mouse cursor position</param>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineEditingAddPoint(System.Int32,System.Int32)">
            <summary>
            Adds a point to the edited polyline.
            </summary>
            <param name="XVi">Cursor position X in Vi, usually the mouse cursor position</param>
            <param name="YVi">Cursor position Y in Vi, usually the mouse cursor position</param>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineEditingEnd">
            <summary>
            Concludes the polyline editing operation, returning the editing state to Idle.
            Returns the edited polyline, which can also be later accessed using the property EditedPolyline.
            When the edited polyline is closed (first and last point are the same, or ShowClosingLine is true),
            the edit splits it into two closed polylines. The one with the larger area is shown and saved
            in EditedPolyline, and the other one is saved in EditedPolylineComplement (but not shown).
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PolylineEditingCancel">
            <summary>
            Cancels the polyline editing operation, , returning the editing state to Idle.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._circles">
            <summary>
            Circles to draw over the image.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.Circle(System.String)">
            <summary>
            Returns a circle by its name. If no match is found, returns null.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.CircleAdd(Claron.WIF.Circle)">
            <summary>
            Adds a new overlay circle (or replace if an existing one by that name was already added).
            </summary>
            <param name="circleToAdd">The circle to add.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.CircleRemove(Claron.WIF.Circle)">
            <summary>
            Remove a graphic circle from the list.
            </summary>
            <remarks>Does nothing if the circle is not on the list</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.CircleRemove(System.String)">
            <summary>
            Remove a circle from the list by name.
            Does nothing if the Circle is not on the list.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.CirclesClear">
            <summary>
            Clears the circles.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.AddGraph(System.Double[],System.Double[],System.String,System.String,System.Boolean)">
            <summary>
            Interface functions for graph presentation on the Viewport
            </summary>
            <param name="xValues"></param>
            <param name="yValues"></param>
            <param name="xStr"></param>
            <param name="yStr"></param>
            <param name="showScale"></param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport._inMemoryPanel">
            <summary>
            Parent panel, used when RenderInMemory is used to avoid using PictureBoxes
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._pictureBitmap">
            <summary>
            Bitmap used when RenderInMemory is set to true to avoid using PictureBoxes
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ResizeGrids">
             <summary>
             Assuming a resizing of the output picturebox has occurred, adjusts the size of the grid boxs
             of the viewport and the camera to match the proportions of the picturebox.
            
             The camera output dimensions are set to be odd in order to ensure a specific pixel coordinate
             is at the center of the image. This is useful or required in various types of views which
             assign certain importance to the center (perspective, ribbon, etc.) and improve visual
             consistency when the image is shown at different zoom levels.
             
             Note that the RCS of the camera and the viewport are assumed identical, although they use
             different grid boxes to allow different XY resolutions (ie, zoom between camera and viewport).
             </summary>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.ReferenceMarkerVi">
            <summary>
            Returns the cross-reference marker position in viewport/camera grid XY coordinates.
            If the reference marker cannot be mapped (eg, the reference marker position is unknown),
            a point at (-1000,-1000) is returned.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ReferenceMarkerVf">
            <summary>
            Returns the cross-reference marker fractional position in the viewport
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.MouseState">
            <summary>
            The current state of the mouse in the viewport, or null if the mouse is not over the viewport
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.MouseStatePrevious">
            <summary>
            The state of the mouse in the viewport at the previous mouse down, move or up
            event, or null if the mouse was not over the viewport.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.ViewportReferenceAdd(Claron.WIF.Viewport,System.Drawing.Pen)">
            <summary>
            Adds a graphical reference to another viewport.
            If the viewport is already referenced, this is a no-op.
            </summary>
            <param name="Referenced">The viewport to reference</param>
            <param name="pen">The pen to use in drawing the graphics.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.ViewportReferenceAdd(Claron.WIF.Viewport)">
            <summary>
            Adds a graphical reference to another viewport.  If the viewport reference is one of the three orthogonal planes,
            default colors for the plane tint and graphics are assigned; otherwise, no color is assigned.
            If the viewport is already referenced, this is a no-op.
            </summary>
            <param name="vpReference">The viewport to reference</param>
        </member>
        <member name="M:Claron.WIF.Viewport.ViewportReferenceRemove(Claron.WIF.Viewport)">
            <summary>
            Removes a graphical reference to another viewport.
            If the viewport is not referenced, this is a no-op.
            </summary>
            <param name="Referenced">The viewport to reference</param>
        </member>
        <member name="M:Claron.WIF.Viewport.ViewportReferencesRemoveAll">
            <summary>
            Removes all the graphical references to other viewports.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ViewportReferencePolysSi">
            <summary>
            Returns the polygons for texturing referenced viewports,
            in SliceStack index coordinates.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesToNotReplicate">
            <summary>
            The list of properties NOT to replicate across cameras (default is to replicate)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.IsPropertyReplicatedToAllCameraGet(Claron.WIF.Viewport.CameraPropertiesEnum)">
            <summary>
            Controls whether a camera property is replicated from camera 0 to all the other
            cameras  of the viewport. By default all are set to true.
            </summary>
            <param name="prop"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.IsPropertyReplicatedToAllCameraSet(Claron.WIF.Viewport.CameraPropertiesEnum,System.Boolean)">
            <summary>
            Controls whether a camera property is replicated from camera 0 to all the other
            cameras of the viewport. By default all are set to true.
            </summary>
            <param name="prop">The camera property to replication or not</param>
            <param name="value"></param>
        </member>
        <member name="M:Claron.WIF.Viewport.OverlayModalityValuesShouldBeShown">
            <summary>
            Tests whether the properties and inputs indicate that overlay value text would
            be shown over pixels when the viewport is next refreshed.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ToPatientScaleToShowModalityVals">
            <summary>
            Returns the largest value of ToPatientScan.Scale in which the modality values will
            be shown in the overlay (note that this is only one condition for this display).
            </summary>
            <remarks>Assumes camera use in a 2d viewport.</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.OverlayOrientationLabelEnabledGet(Claron.WIF.Viewport.SideEnum)">
            <summary>
            Controls the display of an orientation label on a given side of the viewport.
            </summary>
            <param name="Side"></param>
        </member>
        <member name="M:Claron.WIF.Viewport.OverlayOrientationLabelEnabledSet(Claron.WIF.Viewport.SideEnum,System.Boolean)">
            <summary>
            Controls the display of an orientation label on a given side of the viewport.
            </summary>
            <param name="Side"></param>
            <param name="value"></param>
        </member>
        <member name="F:Claron.WIF.Viewport._compositingMethod">
            <summary>
            Input cameras compositing mode.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.CompositingColorwashColorGet(System.Int32)">
            <summary>
            The Argb color used in applying the output of front cameras in ColorwashedGrey
            compositing mode.
            </summary>
            <param name="CameraIndex">The index of the camera to which this color is applied.
            Silently clamped to the valid range.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.CompositingColorwashColorSet(System.Int32,System.UInt32)">
            <summary>
            The Argb color used in applying the output of front cameras in ColorwashedGrey
            compositing mode.
            </summary>
            <param name="CameraIndex">The index of the camera to which this color is applied.
            <param name="value"></param>
            Silently clamped to the valid range.</param>
        </member>
        <member name="F:Claron.WIF.Viewport._compositingRadiusFract">
            <summary>
            The radius of a compositing circle as a fraction of the smaller viewport
            side (width or height). The compositing circle is centered.
            If not positive, the compositing is applied over the whole image.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._borderWidthPixels">
            <summary>
            The width of the border in pixels.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ResetLastOutPictureUpdateTicks">
            <summary>
            Resets the last output-picture update ticks value.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.LastDisplaySecs">
            <summary>
            Execution time, in seconds, of the last display operation (not including camera
            rendering time). Negative if never displayed.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.Name">
            <summary>
            An individual viewport identifier assigned by the client (usually application) for its needs
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.TypeSet(Claron.WIF.Viewport.TypeEnum)">
            <summary>
            For use by the Collage to set the type
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._ToFocus">
            <summary>
            A mapper from the viewport to a focus RCS shared by multiple
            viewports in a Collage, usually cross-correlated flat slab viewports
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._ToFocusOnReset">
            <summary>
            Hold a copy of the viewport to a focus RCS mapper at the time viewports reset
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._overlayLumenWallsInnerVisible">
            <summary>
            Holds whether the inner lumen walls should be displayed when available.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._overlayLumenWallsOuterVisible">
            <summary>
            Holds whether the outer lumen walls should be displayed when available.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._overlayLumenCenterlineVisible">
            <summary>
            Holds whether the lumen Centerline should be displayed when available.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._overlayVesselWallPatchesVisible">
            <summary>
            Holds whether the vessel wall patches should be displayed.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.DrawOrientationFigurineOverride">
            <summary>
            A global function for overriding the built-in orientation figurine function.
            When set to null, the built-in default function is used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.LumenCrossSectionOverlaysStringOverride">
            <summary>
            A global function for overriding ovelay on the cross section viewport function.
            When set to null, the built-in default function is used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.DrawOrientationLabelsOverride">
            <summary>
            A global function for overriding the built-in orientation figurine function.
            When set to null, the built-in default function is used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.DrawReferenceMarkerOverride">
            <summary>
            A global function for overriding the built-in reference marker drawing function.
            When set to null, the built-in default function is used.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.DrawOverlayTextOverride">
            <summary>
            A global function for overriding the built-in text fields drawing function.
            When set to null, the built-in default function is used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.DrawAdditionalOverlayGraphics">
            <summary>
            A global function for adding graphic overlays by the client, on top of all the built-in graphics.
            When set to null, it is ignored.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.DrawShutterOverlayGraphics">
            <summary>
            A global function for rendering DICOM shutter overlays by the client, before rendering annotations.
            When set to null, it is ignored.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.GetValueAt(System.Int32,System.Int32,System.Int16@,System.Int16@)">
            <summary>
            Obtains the underlying (ImageU12) value of a pixel at a viewport index location (eg,
            mouse position).
            </summary>
            <param name="ViX">Viewport index X coordinate</param>
            <param name="ViY">Viewport index Y coordinate</param>
            <param name="StoredValue">The output stored (pre-windowing) value.</param>
            <param name="ModalityValue">The output modality value</param>
            <returns>True iff the value is known. The value may be unknown because the
            image shown is not generated from ImageU12, because it is stale (older than the camera output),
            or because the location maps outside the input
            SliceStack. In such a case, the outputs are 0.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.CanGetValueAt(System.Int32,System.Int32,Claron.WIF.Vector3_I32@)">
            <summary>
            tests if is possible to obtain the underlying (ImageU12) value of a pixel at a viewport index location (eg,
            mouse position).
            </summary>
            <param name="ViX">Viewport index X coordinate</param>
            <param name="ViY">Viewport index Y coordinate</param>
            <param name="Ci">it will be valid if function succeeds</param>
            <returns>True if the value is known. The value may be unknown because the
            image shown is not generated from ImageU12, because it is stale (older than the camera output),
            or because the location maps outside the input
            SliceStack.</returns>   
        </member>
        <member name="M:Claron.WIF.Viewport.GetValueAt(System.Int32,System.Int32,System.Int16@,System.Double@)">
            <summary>
            Obtains the underlying (ImageU12) value of a pixel at a viewport index location (eg,
            mouse position).
            </summary>
            <param name="ViX">Viewport index X coordinate</param>
            <param name="ViY">Viewport index Y coordinate</param>
            <param name="StoredValue">The output stored (pre-windowing) value.</param>
            <param name="ModalityValue">The output modality value</param>
            <returns>True iff the value is known. The value may be unknown because the
            image shown is not generated from ImageU12, because it is stale (older than the camera output),
            or because the location maps outside the input
            SliceStack. In such a case, the outputs are 0.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.GetPrCoordinateAt(System.Int32,System.Int32)">
            <summary>
            Obtains the Patient RCS coordinates (Pr) corresponding to a given viewport index location (eg,
            mouse position).
            </summary>
            <param name="ViX">Viewport index X coordinate</param>
            <param name="ViY">Viewport index Y coordinate</param>
            <returns>The output coordinate, which may be invalid if there is no corresponding 
            Pr location (eg, background in 3D, or out of the slicestack grid box).</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.SetViewAs(Claron.WIF.Viewport)">
            <summary>
            Sets the view in the viewport to be a similar as possible to the one
            shown in another viewport.
            </summary>
            <param name="other"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.RenderAsNeeded(System.Boolean,Claron.WIF.Camera.RefreshParam[]@,System.Boolean)">
            <summary>
            Re-renders the camera output if necessary to reflect the latest changes in
            its settings. If the render fails, will place an error message on the PictureBox.
            </summary>
            <param name="isInteractive">If true, the Viewport will adjust the camera's sampling grid to
            ensure a response within InteractiveRenderMaxSecs.
            Otherwise, it will generate a high-quality image.</param>
            <param name="refreshParams"></param>
            <param name="bringResultsToClient"></param>
            <returns>True when the render was actually called.</returns>
        </member>
        <member name="F:Claron.WIF.Viewport.XyInteractionScaleDict">
            <summary>
            Dictionary of renderID vs XyInteractionScale, it is used in SetGrids, to decide image quality in client/server mode
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.DisplayAsNeeded(System.Boolean)">
            <summary>
            Updates the OutPictureBox image if necessary to reflect the latest changes in either
            camera rendering output or any of the overlay objects.
            </summary>
            <returns>True when the image was updated.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.RefreshPictureBoxAsNeeded">
            <summary>
            Refreshes the display of outPictureBox in case its Image was previously modified by a call 
            to DisplayAsNeeded() or RefreshAsNeeded(). While the display would be painted eventually even
            without this call, moust events processed in the meanwhile may create undersired lengthy delays.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.RefreshAsNeeded(System.Boolean)">
            <summary>
            Updates the OutPictureBox image, performing rendering and/or display if necessary,
            to reflect the latest changes in view settings. Does not actually refresh the PictureBox's display.
            </summary>
            <param name="Interactive">If true, the viewport will set the camera to ensure a response of about 100ms or faster.
            Otherwise, it will generate a high-quality image. Default value = False</param>
            <returns>An indication whether the viewport OutPictureBox image was modified.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.RefreshAsNeeded">
            <summary>
            Updates the OutPictureBox image, performing rendering and/or display if necessary,
            to reflect the latest changes in view settings. Does not actually refresh the PictureBox's display.
            </summary>
            <returns>An indication whether the viewport OutPictureBox image was modified.</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.SetGrids(System.Boolean,System.Int32[])">
            <summary>
            Sets the viewport's grid to show the full camera's viewing grid extent.
            The spacing of the camera grid may be adjusted based on whether rendering 
            is interactive and the render timing history vs. the target rendering rate.
            The grid settings for all visible cameras may be affected.
            </summary>
            <param name="Interactive">Set to True to ensure interactivity.</param>
            <param name="dims">The x, and y dimensions of the camera grid to use. If null then
            the camera grid dimensions will be chosen by the viewport based on whether Interactive has
            been set and the viewport grid dimensions. It is desirable to set dimensions to be odd.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.SetGrids(System.Boolean)">
            <summary>
            Sets the viewport's grid to show the full camera's viewing grid extent.
            The spacing of the camera grid may be adjusted based on whether rendering 
            is interactive and the render timing history vs. the target rendering rate.
            The grid settings for all visible cameras may be affected.
            </summary>
            <param name="Interactive">Set to True to ensure interactivity.</param>
        </member>
        <member name="F:Claron.WIF.Viewport.Display_LastCamsCount">
            <summary>
            Show the image(s) generated by InCamera(s) in OutPictureBox, including all overlays.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport._ippZoomSrcBuffer">
            <summary>
            Buffer used to do zoom using IPP.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._ippZoomTgtBuffer">
            <summary>
            Buffer used to do zoom using IPP.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawAllCamsArgb(System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            Draw the content of the buffer Display_AllCamsArgb to a Bitmap
            </summary>
            <param name="bmp">bitmap destination</param>
            <param name="Gr">graphics context from the destination bitmap</param>
        </member>
        <member name="M:Claron.WIF.Viewport.CompositingCircleCoordsGet(System.Drawing.Size,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the output rectangle size in pixels, returns the corresponding compositing circle pixel coordinates
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ComputeCompositingRuns(System.Drawing.Size)">
            <summary>
            Returns an array containing runs of indexes in the camera output array
            when the output of a camera need to be composited with then underlying image.
            (according to CompositingRadiusFract or future extensions)
            </summary>
            <param name="CamSize">The size of the camera array</param>
        </member>
        <member name="M:Claron.WIF.Viewport.CompositingRunsSetAlphaVals(System.UInt32[],Claron.WIF.IndexRun[],System.Byte)">
            <summary>
            Sets the alpha values in the camera ARGB array to the given value.
            </summary>
            <param name="camArgb">The camera ARGB buffer to modify.</param>
            <param name="indexRuns">The index runs.</param>
            <param name="alpha">The alpha value to set to.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.TissueAt(System.Int32,System.Int32)">
            <summary>
            Returns the tissue present at the given viewport grid index coordinates (mouse x/y),
            or null if there is no tissue there (eg, background data region,
            nothing rendered there, coordinates out of bounds).
            When there is more than one tissue at the given location, the higher indexed tissue is returned.
            </summary>
            <param name="XCi">X grid coordinate</param>
            <param name="YCi">Y grid coordinate</param>
        </member>
        <member name="M:Claron.WIF.Viewport.GlassFxSetup(Claron.WIF.Tissue,System.Int32,System.Double)">
            <summary>
            Configures the Viewport to render the given tissue as GlassFX.
            Assumes that Camera 0 is already configured to render everything else.
            Assumes GlassFX should go into Camera 1
            </summary>
            <param name="glassTis">The Tissue to render is GlassFX style</param>
            <param name="glassTisId0to6">The Tissue index to use for the glass Tissue</param>
            <param name="glassOpacity0to1">The opacity strength to use for the glass Tissue. 
            Both extremes, 0 and 1, are useful, i.e. are not fully opaque nor fully transparent,
            but are more like thin clear glass and thick milk glass.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.ApplyGlassEffect(System.UInt32[],System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,Claron.WIF.IndexRun[])">
            <summary>
            Applies a GassFX lightness affect in-place to an ARGB buffer.
            It maps the three color channels of the input argb image to the three supplied output colors.
            For each output color its alpha channel decides how much to close the gap between base GlassFX and fully opaque,
            i.e. at a=0 for any of the three supplied colors that color will still be clearly seen in the output,
            but mostly so at the edges of the data (normal near perpendicular to the view vector),
            while at a=255  for any of the three supplied colors that color will be much less transparent in the output for any normal direction,
            but the alpha of the input image argb will limit the maximum alpha of the output.
            Note that the the camera's Preset should have shininess set to 0 when rendering the tissues for the GlassFX input,
            otherwise there are undesirable color bleed effects fron the highlight color.  Likewise shadows should be turned off as well.
            </summary>
            <param name="ARGB">The argb image that is to be converted into the GlassFX style. For any A=0 pixel the output has A=0 as well.</param>
            <param name="FxARGB0">The color to to map the blue channel of the input image to.</param>
            <param name="FxARGB1">The color to to map the green channel of the input image to.</param>
            <param name="FxARGB2">The color to to map the red channel of the input image to.</param>
            <param name="WithinRuns"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.ApplyMagentaGreenEffect(System.UInt32[],System.UInt32[],Claron.WIF.IndexRun[])">
            <summary>
            Applies magenta/green effect. inArgb replaced the green channel in outArgb within _compositingRadius
            (if _compositingRadius >= 0)
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ApplySubtraction(System.UInt32[],System.UInt32[],Claron.WIF.IndexRun[])">
            <summary>
            Subtracts the values of outArgb from InArgb, divides the results by 2,
            and biases it by mid-grey (127)
            </summary>
            <param name="inargb"></param>
            <param name="outargb"></param>
            <param name="WithinRuns"></param>
        </member>
        <member name="M:Claron.WIF.Viewport.MakeNonColoredPixelsTransparent(System.UInt32[]@,Claron.WIF.IndexRun[])">
            <summary>
            Makes the non colored(r=g=b) pixels transperent. We need this function to be called only for 2D cadStack overlay.
            </summary>
            <param name="ARGB"></param>
            <param name="WithinRuns"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.ColorwashGreyToArgb(System.UInt32[],System.Int32,Claron.WIF.IndexRun[])">
            <summary>
            Applies a colorwash affect in-place to a color buffer
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.ColorwashAndSum(System.UInt32[],System.Int32,Claron.WIF.IndexRun[])">
            <summary>
            converts the output of the current camera to colorwash and Sums it into
            an image buffer.
            </summary>
            <param name="SummingArgb">The buffer to sum into. Must be sized in advance to
            contain at least the camera output pixels buffer</param>
            <param name="CameraIndex">The index of the camera being summed</param>
            <param name="WithinRuns">For "windowed" compositing</param>
            <remarks>Assumed it is called in camera index order</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawOverlayText(System.Drawing.Graphics)">
            <summary>
            Draw text fields around the image.
            </summary>
            <param name="G">The graphics context to use for the drawing</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawTextAwayFromBorder(System.String,System.Int32,System.Int32)">
            <summary>
            Draws the given text overlay
            </summary>
            <param name="Text"></param>
            <param name="XVi"></param>
            <param name="YVi"></param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.MissingOrientationLabel">
            <summary>
            When orientation vectors are not present in the DICOM meta-data, this string is used to display the orientation label.
            </summary>
            <remarks>The default value is "?".  The labels used for display are evaluated on first use; so this value should
            be overwritten before any display of images in a viewport (for example, in the application static class constructor)</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.ResolveOrientationLabels(Claron.WIF.SpaceMapperSimilarity,Claron.WIF.Vector3[])">
            <summary>
            Returns an array of orientation labels in the order Right, Bottom, Left, Top
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawOrientationLabels(System.Drawing.Graphics)">
            <summary>
            Draws labels on the sides of the image to indicate the orientation of the patient
            relative to the image being shown.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.PatientOrientationLabelReplace(System.String,System.String)">
            <summary>
            Replaces a default orientation label with a different one.
            </summary>
            <param name="DefaultLabel">One of the letters LRPAHF</param>
            <param name="Replacementlabel">A new label to replace it</param>
        </member>
        <member name="M:Claron.WIF.Viewport.PatientOrientationLabel(Claron.WIF.Vector3)">
            <summary>
            Returns the patient orientation label that represents the closest
            direction to the given vector in patient space.
            Note that the label returned is the DICOM default (one of LRPAHF), unless
            it was earlier overridden by PatientOrientationLabelReplace.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.VpType2PlaneOrientationEnum">
            <summary>
            Returns the clipper's PlaneOrienationEnum corresponding to the viewport type.
            If the viewport is not one of axial, coronal or sagittal, PlaneOrienationEnum.None is returned.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawClipperLine(System.Drawing.Pen,System.Drawing.Graphics,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Draws a line between p1 and p2. It uses G. DrawLine if either of the sharing triangles are visible
            It uses "DrawLineWithHiddenPixelTest" if both of the sharing triangles are not visible
            i.e.Line is not in front of the clipped volume, so Draw the dotted line using HiddenPointTest
            </summary>
            <param name="pen"></param>
            <param name="G"></param>
            <param name="p1Pr"></param>
            <param name="p2Pr"></param>
            <param name="facing1">Normal of first triangle shared by the Line</param>
            <param name="facing2">Normal of second triangle shared by the Line</param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.DrawnLinePixels">
            <summary>
            A dictionary that records the Vi.Z (depth) of pixels written by the function
            DrawLineWithHiddenPixelTest, so that we can implement hidden pixels handling between
            the pixels themselves (not only the underlying image).
            The key is the index in the viewport buffer, and the value is Vi.Z.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawLineWithHiddenPixelTest(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Draws line in 3D, changing the line appearance depending on whether it was
            drawn in front or behind the visible location in the image.
            </summary>
            <param name="G">Graphics</param>
            <param name="VisiblePen">The pen to draw the line where it is visible</param>
            <param name="VisibleBackgroundPen">If not null, then it will be used to draw a background
            behind the VisiblePen</param>
            <param name="hiddenPen">The pen to draw the line where it is hidden</param>
            <param name="End0Vr">One end point of the line in Viewport/camera RCS</param>
            <param name="End1Vr">Other end point of the line in Viewport/camera RCS</param>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawOverlayGraphics(System.Drawing.Graphics)">
            <summary>
            Draws all the overlay graphics of the viewport on the given graphics object.
            </summary>
            <param name="G">(optional) A GDI+ drawing surface object to draw on.
            If null is passed, the graphics of the outPictureBox will be used.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.OutPictureScaled(System.Double)">
            <summary>
            renders a version of the viewport which is scaled down by a given resizing factor, 
            including all the overlays 
            </summary>
            <param name="scaleFactor">the scale factor within the interval [0.125, 1]  </param>
            <returns> The picture as 32BPP Argb image</returns>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawReferenceMarker(System.Drawing.Graphics)">
            <summary>
            Draws the cross-referencing marker/s (usually the 3D focus point) projected
            on the viewport
            </summary>
            <param name="G">The graphic context to use when drawing</param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.TooltipMessageSet_tt">
            <summary>
            Tool tip.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.TooltipMessageSet(System.String,System.Double,System.Double)">
            <summary>
            Shows an information message over the viewport for the given duration as a
            tooltip when the cursor enters the viewport.
            </summary>
            <param name="Text">The text of the message</param>
            <param name="DurationSecs">The length of time to keep it displayed (or until
            InfoMessageHide() is called)</param>
            <param name="InitialDelaySecs"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.TooltipMessageRemove">
            <summary>
            Removes the tooltip message previously set with TooltipMessageSet.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.TooltipMessage">
            <summary>
            Returns the string displayed in the tooltip text, or "" if the tooltip is not set
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.RemoveRulersArrowsAndAnnotations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.AnnotationsClear">
            <summary>
            Convenience method to clear AnnotationBases collection and call dispose method on the individual objects
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.AnnotationAdd(Claron.WIF.Annotation)">
            <summary>
            Adds an Annotation to be displayed in the viewport.  If annotation was previously detached, it will be automatically re-attached.
            </summary>
            <param name="annot">Annotation of interest</param>
        </member>
        <member name="M:Claron.WIF.Viewport.AnnotationRemove(Claron.WIF.Annotation,System.Boolean)">
            <summary>
            Removes an Annotation from the viewport.
            </summary>
            <param name="annot">Annotation of interest</param>
            <param name="detach">flag indicating whether annotation is just removed from the collection and not disposed</param>
        </member>
        <member name="M:Claron.WIF.Viewport.AnnotationRemove(Claron.WIF.Annotation)">
            <summary>
            Removes and disposes an Annotation from the viewport
            </summary>
            <param name="annot"></param>
        </member>
        <member name="M:Claron.WIF.Viewport.GetAnnotationAngles">
            <summary>
            Convenience method to retrieve AnnotationAngles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Viewport.GetAnnotationRulers">
            <summary>
            Convenience method to retrieve AnnotationRulers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Viewport.GetAnnotationArrows">
            <summary>
            Convenience method to retrieve AnnotationArrows
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Viewport.GetAnnotationTexts">
            <summary>
            Convenience method to retrieve AnnotationTexts
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Viewport.DeleteRulersArrowsAndAnnotations">
            <summary>
            Deletes the data associated with rulers, arrows and annotations
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.MapToPatientScanRCS(Claron.WIF.Vector3[])">
            <summary>
            Returns the PatientScanRCS coordinates corresponding to an array of given Vi (viewport index,
            usually mouse pointer) coordinates, or Invalid if it is unknown.
            If the point is over a sphere marker, the center of the sphere marker is returned, rather
            than the sphere surface location.
            </summary>
            <param name="LocationsVi">The XY locations in PictureBox pixel coordinates, ie, Viewport Index coordinates,
            as, for example reported in PictureBox mouse events). Z is ignored.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.MapToPatientScanRCS(Claron.WIF.Vector3)">
            <summary>
            Returns the PatientScanRCS coordinates corresponding to a given Vi (viewport index,
            usually mouse pointer) coordinates, or Invalid if it is unknown.
            If the point is over a sphere marker, the center of the sphere marker is returned, rather
            than the sphere surface location.
            </summary>
            <param name="LocationVi">The XY location in PictureBox pixel coordinates (as, for example,
            reported in PictureBox mouse events). Z is ignored.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.MapFromViToPr(Claron.WIF.Vector3)">
            <summary>
            Returns the PatientScanRCS (Pr) coordinates corresponding to a given viewport index (Vi),
            ie, screen, coordinates, or Invalid if it is unknown.
            If the point is over a sphere marker, the center of the sphere marker is returned, rather
            than the sphere surface location. Synonym with MapToPatientScanRCS.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.MapFromViToPr(Claron.WIF.Vector3[])">
            <summary>
            Returns the PatientScanRCS coordinates corresponding to an array of given Vi (viewport index,
            usually mouse pointer) coordinates, or Invalid if it is unknown.
            If a Vi point is over a sphere marker, the center of the sphere marker is returned, rather
            than the sphere surface location. Synonym with MapToPatientScanRCS.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.MapFromPrToVi(Claron.WIF.Vector3[])">
            <summary>
            Returns the Viewport Index (Vi) coordinates of one or more locations in
            patient coordinates (Pr), properly handing streteched ribbon (curved slab) and 
            perspective projections. Some returned vectors may be invalid (eg, when behind 
            the camera in perspective or outside the lumen in stretched ribbon rendering.)
            </summary>
            <returns>The locations in Vi. </returns>
        </member>
        <member name="M:Claron.WIF.Viewport.MapFromPrToVi(Claron.WIF.Vector3)">
            <summary>
            Returns the Viewport Index (Vi) coordinate of a location in
            patient coordinates (Pr), properly handing streteched ribbon (curved slab) and 
            perspective projections. The returned vector may be invalid (eg, when behind 
            the camera in perspective or outside the lumen in stretched ribbon rendering.)
            </summary>
            <returns>The locations in Vi. </returns>
        </member>
        <member name="M:Claron.WIF.Viewport.MapFromPrToVi(Claron.WIF.Vector3[],Claron.WIF.Vector3[]@)">
            <summary>
            Maps patient coordinates (Pr) to viewport index (Vi) coordinates, properly handing 
            streteched ribbon (curved slab) and perspective projections. Some mapped vectors 
            may be invalid (eg, when behind the camera in perspective or outside the lumen 
            in stretched ribbon rendering).
            </summary>
            <param name="LocationsPr">Input locations to map</param>
            <param name="LocationsVi">Output locations at corresponding indexes.
            Allocated as needed.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.AddViZcoordinate(Claron.WIF.Vector3@)">
            <summary>
            Given an X,Y location in the viewport index (Vi), adds its Z coordinate to reflect the 
            depth (Vi.Z) of the contents of the viewport. If there is no depth information at that location, 
            Z is set to double.PositiveInfinity.
            Where are multiple locations to process, it is more efficient to call the array
            signature of this method.
            </summary>
            <param name="Vi">Input/output: The location in viewport index coordinates (only X and Y are used as input)</param>
        </member>
        <member name="M:Claron.WIF.Viewport.AddViZcoordinate(Claron.WIF.Vector3[])">
            <summary>
            Given an array of viewport index coordinates, sets their Z coordinate to reflect the contents 
            of the viewport. If there is no depth (Z) information at that location, 
            Z is set to double.PositiveInfinity.
            </summary>
            <param name="LocationsVi">Input/output: The locations in viewport index coordinates (only X and Y are used as input)</param>
        </member>
        <member name="M:Claron.WIF.Viewport.BoxSiOfMaskAndSpheres">
            <summary>
            Computes the bounding box of all masks used in the Viewport and all spheres shown in this Viewport.
            In case neither is preset it uses the volume data bounding box instead.
            </summary>
            <returns>The ROI box in Si coordinated (Slicestack Index).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.BoxSiOfMasksSpheresVisibleSurfaces">
            <summary>
            Computes the bounding box of all masks, spheres and visible surfaces shown in this Viewport.
            In case neither is preset it uses the volume data bounding box instead.
            </summary>
            <returns>The ROI box in Si coordinated (Slicestack Index).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.DrawOver(System.Int32[],System.Boolean)">
            <summary>
            Draws the given alpha/color buffer over the contents of the current OutPictureBox.
            </summary>
            <param name="ARGB">A buffer containing one ARGB value for each pixel on the screen.</param>
            <param name="RedrawOverlays">If true, the viewport graphics/text overlays are redrawn
            on top of the new contents.Default value = True</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.ShowPictureFromFile(System.String)">
            <summary>
            Displays a bitmap image, stored in a file, in OutPictureBox (Zoom mode).
            </summary>
            <param name="filePath">A file in one of the formats supported by Image.FromFile()</param>
        </member>
        <member name="M:Claron.WIF.Viewport.IsOverOrientationFigurine(System.Int32,System.Int32)">
            <summary>
            Returns True iff a location is over the (displayed) orientation figurine region.
            </summary>
            <param name="X">X coordinate in viewport coordinates</param>
            <param name="Y">Y coordinate in viewport coordinates</param>
        </member>
        <member name="F:Claron.WIF.Viewport._csCameras">
            <summary>
            The cross-section cameras.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csCount">
            <summary>
            The number of cross-section cameras.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csLumen">
            <summary>
            The cross-section lumen.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csCenterPositionMm">
            <summary>
            The cross-section center position.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csSectionSpacingMm">
            <summary>
            The spacing between cross-sections.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csPbY">
            <summary>
            The y-positions of the outputs of each cross-section camera.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csWidth">
            <summary>
            The width of the cross-section cameras.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csHeight">
            <summary>
            The height of the cross-section cameras.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csRollRadians">
            <summary>
            The roll angle of the x-axis of the cross section around the lumen's centerline.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csLastCamOutputUpdateTicks">
            <summary>
            The most recent update ticks value of the cross-sectional cameras.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csInnerContours">
            <summary>
            The inner contours for each cross-sectional camera.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csOuterContours">
            <summary>
            The outer contours for each cross-sectional camera.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csOuterContoursEdited">
            <summary>
            The edited outer contours for each cross-sectional camera.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csEditContour">
            <summary>
            The curve being displayed in the cross-section showing approximately what the edited
            inner/outer contour will look like after the mouse button is released.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csnSamplePtsInEachInterval">
            <summary>
            The number of samples in each interval between control points.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csContourEditNumber">
            <summary>
            The contour being edited in the cross-sectional view.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csCurveEditingMode">
            <summary>
            The contour being edited in the cross-sectional view.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csContourControlPointNumber">
            <summary>
            The control point number being edited.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csContourControlPointEditPos">
            <summary>
            The position of the control point being edited.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport._csContourLastPointEditedI">
            <summary>
            The last point in the sampled curve which was edited.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenUpdateCrossSectionCamerasAsNeeded(Claron.WIF.Lumen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the cross-section cameras and the polylines representing the inner and outer
            contours.
            </summary>
            <param name="lumen">The lumen to generate the cross-sectional views from.</param>
            <param name="centerPositionMm">The position along the lumen of the center cross section.</param>
            <param name="rollRadians">The roll angle of the x-axis of the cross section around the
            lumen's centerline.</param>
            <param name="mmPerPixel">The size of each pixel in the viewport, in mm.</param>
            <param name="sectionSpacingMm">The spacing along the lumen's centerline between the sections.
            If 0, only one cross section is shown across the whole viewport.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenRefreshCrossSectionsAsNeeded(Claron.WIF.Lumen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Updates the OutPictureBox image, if necessary, to generate one or more cross sections
            along the Lumen which is attached to the input camera, with overlays showing
            the inner and outer walls if they are enabled. The sections are square and are tiled
            symmetrically around the center of the viewport.
            </summary>
            <param name="lumen"></param>
            <param name="centerPositionMm">The position along the lumen of the center cross section</param>
            <param name="rollRadians">The roll angle of the X axis of the cross section around the lumen's centerline.</param>
            <param name="mmPerPixel">The size of each pixel in the viewport, in mm.</param>
            <param name="sectionSpacingMm">The spacing along the lumen's centerline between the sections.
            If 0, only one cross section is shown across the whole viewport.</param>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenUpdateCrossSectionOverlaysAsNeeded">
            <summary>
            Draws overlays over cross-sectional views.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenCrossSectionWallGetClosestControlPointOuter(System.Single,System.Single,System.Double@)">
            <summary>
            Returns the closest outer contour control point for the contour being edited in the
            cross-sectional view.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenCrossSectionWallGetClosestControlPointInner(System.Single,System.Single,System.Double@)">
            <summary>
            Returns the closest inner contour control point for the contour being edited in the
            cross-sectional view.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenEditCenterlineCurveEnabled(Claron.WIF.Vector3)">
            <summary>
            Tests if editing of a wall contour (on ribbon VP) is enabled for a given mouse cursor position.
            </summary>
            <param name="mouseXy">Cursor XY, in outPictureBox pixel coordinates</param>
            <remarks>Enables editing of a lumen centerline if the cursor is in the Y range of the centerline
            and the X distance from the centerline is short</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenEditWallCurveEnabled(System.Int32,System.Double,Claron.WIF.Viewport.InteractionModeEnum@)">
            <summary>
            Tests if editing of a wall contour (on ribbon VP) is enabled for a given mouse cursor position.
            </summary>
            <param name="X">Cursor X, in outPictureBox pixel coordinates</param>
            <param name="Y">Cursor Y, in outPictureBox pixel coordinates</param>
            <param name="interactionMode">indicates which curve the interaction was carried out on.</param>
            <remarks>Enables editing of a wall contour if the cursor is in the Y range of the contour
            and the X distance from the curve is short</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenEditVesselWallPatchEnabled(System.Int32,System.Double,Claron.WIF.Viewport.InteractionModeEnum@)">
            <summary>
            Tests if editing of a wall contour (on ribbon VP) is enabled for a given mouse cursor position.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.FindWallCurve(System.Int32,System.Double,System.String@,System.Int32@,Claron.WIF.Viewport.InteractionModeEnum@)">
            <summary>
            Searches for the nearest wall curve that can be edited for a given X Y.
            Will set the output curve name to null if cannot be edited.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.FindVesselWallPatchCurve(System.Int32,System.Double,System.String@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Searches for the nearest vessel wall patch curve that can be edited for a given x, y. Will set
            the output curve name to null if cannot be edited.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenWallCurveEditTo(System.Int32,System.Int32)">
            <summary>
            Move the nearest lumen wall intersection curve (polyline) to the given location.
            The movement is clipped so as not to intersect the centerline, creating a negative radius.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <remarks>The effect is graphic only. The actual lumen model is not updated.</remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenWallCurveEditEnd">
            <summary>
            Applies the changes to _wallCurveEditedName (see LumenWallCurveEditTo) to the underlying lumen model
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.IsLumenCrossSectionWallCurveBeingEdited">
            <summary>
            Indicates whether an editing of lumen cross section is active (unfinished), and thus
            a call to LumenCrossSectionWallCurveEditEnd is needed before moving to another operation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenCrossSectionWallCurveEditEnd">
            <summary>
            Commits the changes made to the cross-section walls.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenDrawCrossSectionWall(System.Drawing.Graphics,System.Drawing.Rectangle,Claron.WIF.CurveCubicSpline,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draws the contour of the lumen's inner/outer wall cross section on a clipped region in the given
            graphics object.
            </summary>
            <param name="G"></param>
            <param name="clipRect"></param>
            <param name="curve">The contour curve to draw.</param>
            <param name="isActiveInnerWall">Whether the given contour is an inner wall.</param>
            <param name="drawControlPoints"></param>
            <param name="isActiveEdited"></param>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenUpdateCrossSectionWallEditDetails(System.Single,System.Single)">
            <summary>
            Updates whether the inner/outer contour is being edited, the contour being edited and the
            control point on the contour being edited.
            </summary>
            <param name="x">The mouse x position.</param>
            <param name="y">The mouse y position.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Viewport.LumenCrossSectionWallCurveEditTo(System.Int32,System.Int32)">
            <summary>
            Move the nearest control point on the cross-section contour being edited to the
            given location.
            </summary>
        </member>
        <member name="M:Claron.WIF.Viewport.AnnotationBaseDeleted(System.Object,Claron.WIF.Viewport,Claron.WIF.Annotation.DeletedEventArgs)">
            <summary>
            Delegate for handling deletion of Annotation objects
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="managingVp">handle to the managing Viewport</param>
        </member>
        <member name="M:Claron.WIF.Viewport.GetHashCode">
            <summary>
            Returns the hash code for this Viewport object.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InCamerasCount">
            <summary>
            Gets or sets the length of the InCameras arrays.
            Existing references to cameras are preserved.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InCamera">
            <summary>
            Same as InCameras(0).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InSliceStack">
            <summary>
            Same is InCamera.InSliceStack.
            Updates the viewport's LastUpdateTicks when changed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InCameraForcedDimsXY">
            <summary>
            The camera grid x- and y-dims.
            Set to null to let the viewport choose the camera grid size automatically.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InteractiveRenderMaxSecs">
            <summary>
             Target maximum rendering time, in seconds, for interactive rendering. Will be used to adjust camera sampling rates.
             </summary>
             <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.InImageArgb">
            <summary>
            Input image for 2D display. If not null, overrides the input camera(s).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InImageArgbZoomFactor">
            <summary>
            The zoom factor used in displaying InImageArgb.
            A zoom factor of 1 corresponds to seeing the full data
            available for rendering. Higher factors correspond to more magnified views.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InImageArgbPanFactor">
            <summary>
            The panning factor used in displaying InImageArgb.
            In X or Y dimension, the range is -1 to 1, with a value of 0 corresponding
            to the image being centered. 
            The full range covers the full image, 
            hence the coordinate spare is Image.Grid.Fractional * 2 - (1,1,1)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.Polylines">
            <summary>
            A copy of the list of the polylines currently referenced by the viewport
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.PolylineBeingEdited">
            <summary>
            The polyline being edited when PolylineEditingState is not PolylineDrawingStateEnum.Idle
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.PolylineEdit">
            <summary>
            The polyline the user is drawing during the editing. It is merged with PolylineBeingEdited
            when PolylineEditingEnd is called.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.PolylineEditingState">
            <summary>
            <para>
            Indicates the state of the viewport with respect to the user drawing or editing
            a polyline. The transition to WaitingToStartDrawingRoi or WaitingToStartDrawingCurve
            should be done by the client. The transitions to Drawing and back to Idle are side effects 
            of calls to the PolylineEditing functions.</para>
            <para>
            When set to WaitingToStartDrawingCurve, the curve that was drawn can be
            obtained using the event PolylineEdited under the special name "__NewCurve__".</para>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.Circles">
            <summary>
            The circles.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.PixelMm">
            <summary>
            The size of each display pixel in mm (considered equal to the distance 
            between neighboring pixels).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.WidthMm">
            <summary>
            The width of the displayed region in Mm.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.HeightMm">
            <summary>
            The width of the displayed region in Mm.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ClipperRuler">
            <summary>
            A ruler used in defining the initial extent of a clipper
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.Annotations">
            <summary>
            Retrieve the collection of Annotation's.  It is recommended that this reference only be used to iterate or query the collection.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.PictureBitmap">
            <summary>
            The picture in OutPictureBox onto which the viewport paints.
            Its contents are valid after RefreshAsNeeded was called (no need for actual screen paint).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ReferenceMarkerToPatient">
            <summary>
            Cross-reference marker origin mapping to PatientScan coordinates.
            If null, no cross-referencing marker is shown.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.ReferenceMarkerRadiusPixels">
            <summary>
            The length, in pixels, of half the arrow length in CrossArrows marker type.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.MouseXY">
            <summary>
            A vector representing the mouse location in outPictureBox coordinates.
            It is set to a position out of the viewport if the mouse pointer is not over the PictureBox.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.MouseMoveXY">
            <summary>
            A vector representing the mouse movement, in pixels, from the previous mouse 
            down, move or up event to the current one. The Z coordinate is always 0.
            If , V000 is returned.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.Grid">
            <summary>
            Provides information on the output bitmap (shown in the PictureBox).
            </summary>
            <remarks>The Grid's use is mainly for mapping pixel locations to other spaces and obtaining 4x4 index-index transforms.
            The Grid gets created automatically by this class and should not be modified by class
            clients.</remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.Width">
            <summary>
            The width of the output picture grid.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.Height">
            <summary>
            The height of the output picture grid
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.ViewportReferencesTextureTinting0to1">
            <summary>
            Controls the strength of color tinting of slab viewports that are referenced
            in this one as textured planes. 0 - no tinting, 1- only tint.
            Default: 0.25
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsPseudoSpacing">
            <summary>
            Get/Set property indicating if the pixel spacing is synthetic
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.SuspendRefresh">
            <summary>
            Set to true to disable refresh of viewport.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.SuspendCameraRefresh">
            <summary>
            Set to true to disable refresh of cameras.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ShadedSupersamplingFactor">
            <summary>
            If >1, the ray-casing in shaded rendering mode will be set to oversample
            the data by the given factor. Can be used to obtain higher quality images
            (but note that the transparency in the transfer function is adjusted
            to compensate)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.CrossSectionToCenterlineRcs">
            <summary>
            When null (default), cross sections of a lumen (when the viewport type is
            CrossSection or CrossSectionsStrip) are shown with centerline's X and Y
            (at the crossing point) aligned with the viewport's X and Y and the origin
            at the center of the cross section image. (The view may optionally be rolled 
            around the centerline by setting LumenRollRadians at the Collage or Camera level).
            When not null, this mapper is concatenated with the default mapping. 
            It's usually best to set only the rotation of this mapper.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayModalityValuesVisibleWhenPossible">
            <summary>
            When set and the viewport is a thin principle slab (axial/cor/sag) and highly zoomed
            the modality values are overlaid on the display and the camera is set to nearest-neighbor
            interpolation to show each voxel extent.
            Default: set to true.
            </summary>
            <remarks>See OverlayModalityValuesShouldBeShown for more details on the conditions</remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextEnabled">
            <summary>
            Determines whether overlay text is shown  in the viewport's overlay when available
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextWithSliceNumberEnabled">
            <summary>
            Determines whether overlay text is shown with the slice number (when applicable)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextWithoutPatientInfo">
            <summary>
            Determines whether overlay text is shown with patient information
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextWithoutSliceStackGridInfo">
            <summary>
            Determines whether overlay text is shown without the grid size and spacing (in 3D)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextWithoutWcWwInfo">
            <summary>
            Determines whether overlay text is shown  in the viewport's overlay when available
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextWithoutThicknessInfo">
            <summary>
            Determines whether overlay text is shown  in the viewport's overlay when available
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextWithoutRenderPreset">
            <summary>
            Determines whether overlay text is shown  in the viewport's overlay when available
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTextWithoutLumenDegAndMmInfo">
            <summary>
            Determines whether overlay text is shown  in the viewport's overlay when available
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.LogoEnabled">
            <summary>
            Determines whether a logo is added to the image as overlay when available
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayTissuesEnabled">
            <summary>
            Determines whether when tissue (bitvol) intersects the view plane, it is shown as colorwash overlay
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayGraphicsEnabled">
            <summary>
            Turns on/off all overlay graphics, including lumen wall contours
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayReferenceMarkerEnabled">
             <summary>
            
             </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayViewportReferencesEnabled">
            <summary>
            Controls whether, when there are other viewports referenced on this one,
            the reference graphics will be shown in the overlay.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsOverlayViewportReferencesVisible">
            <summary>
            True iff references to other viewports exist, they are enabled and visible
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayOrientationFigurineEnabled">
            <summary>
            Turns on/off the orientation indicator in the corner of the image.
            Default: false.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayOrientationFigurineSizePixels">
            <summary>
            The length, in pixels, of the orientation figurine.
            When 0, (default) the figurine is auto-sized.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayClipperEnabled">
            <summary>
            Determines whether clipper intersection with the view plane will be shown as
            overlay when a clipper is connected to the camera.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsOverlayClipperVisible">
            <summary>
            Indicates whether a clipper intersection overlay is shown in the viewport
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.RibbonTickMarksSpacingMm">
            <summary>
            The spacing between distance tick marks on ribbon views. If 0, no tick marks are shown.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayOrientationLabelsEnabled">
            <summary>
            The visibility of the orientation letters.
            When enabled causes drawing of the active labels.
            Activate a label with OverlayOrientationLabelEnabledSet(side,true);
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayDataBoundingBoxEnabled">
            <summary>
            Controls the display of the InSliceStack bounding box with
            back faces hidden.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ToolStripEnabled">
            <summary>
            Indicates whether the pop-up toolstrip over the viewport is enabled.
            </summary>
            <remarks>Used by the collage.</remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.IsVoxelThicknessUsedInThicknessText">
            <summary>
            Indicates whether, for flat slab viewport types (see IsFlatSlab), the thickness of the
            voxels being sampled is added to the slab thickness when calculating the overlay
            text shown for thickness. Default: True.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.CompositingMethod">
            <summary>
            Property to get/set the type of compositing that is done with the input
            camera data.
            </summary>
            <value></value>
        </member>
        <member name="P:Claron.WIF.Viewport.CompositingColorwashOpaque">
            <summary>
            in Colorwashed compositing, controls whether colorwash is layered as opaque
            color anywhere where it is not black. If false, alpha is set proportional to
            the grey level of the source image being used to do the colorwashing.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ThicknessMm">
            <summary>
            The thickness of the volume being rendered by the camera.
            When set, modifies the spacing between samples and their number as needed for optimal
            quality/performance.
            Defaults to 0 when the viewport is created.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.TotalThicknessMm">
            <summary>
            Returns the total thickness in MM of the volume being rendered by the camera.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.CompositingRadiusFract">
            <summary>
            The radius of a compositing circle as a fraction of the smaller viewport
            side (width or height). The compositing circle is centered.
            If not positive, the compositing is applied over the whole image.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.BorderWidthPixels">
            <summary>
            Sets the border width in pixels.  0 by default (no border).
            The border is drawn on the inside of the viewport (ie, over the output picture).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.BorderColor">
            <summary>
            The color of the viewport border (when BorderWidthPixels > 0).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.BorderPen">
            <summary>
            Returns the border pen (private).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsMouseOver">
            <summary>
            True iff the mouse is over the Viewport
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.LastUpdateTicks">
            <summary>
            Returns the last global update ticks of the viewport itself and its input cameras
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsCameraNotReady">
            <summary>
            Indicates whether at the last Display call, the display input camera(s) had nothing
            to display. This may indicate, for example, a delay in returning results when the
            rendering is done by a remoter.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.Type">
            <summary>
            Type is used by Collage to control user interactions over the viewport.
            To change it, you need to modify the Collage.Layout (or call Collage.SetNewLayout)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsRibbonType">
            <summary>
            Indicates whether the viewport shows a stretched-ribbon/curve view
            (includes RibbonCoronal, RibbonCoronal and Panoramic).
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsLumenType">
            <summary>
            Indicates whether the viewport shows a ribbon or cross-sectional view(s)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsCrossSectionType">
            <summary>
            Indicates whether the viewport shows a lumen cross-section or cross-section strip view(s)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsFlatSlabType">
            <summary>
            Indicates whether the viewport shows a flat slab/reformat view
            (axial, coronal, sagittal, xy, xz, yz)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsImageType">
            <summary>
            Indicates whether an actual image is displayed, rather than blank or graph
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.Is3DType">
            <summary>
            Indicates whether the viewport shows a volumetric projection view
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.Is2DType">
            <summary>
            Indicates whether the viewport is of type 2D (single image)
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.IsPerspective3D">
            <summary>
            Indicates whether the viewport shows a perspective volumetric projection view
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ToFocus">
            <summary>
            A mapper from the viewport to a focus RCS shared by multiple
            viewports in a Collage, usually cross-correlated flat slab viewports
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ToFocusOnReset">
            <summary>
            Hold a copy of the viewport to a focus RCS mapper at the time viewports reset
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ToFocusSinceReset">
            <summary>
            Return the transformation on the ToFocus mapper since the time viewports reset
            </summary>
        </member>
        <member name="E:Claron.WIF.Viewport.VpCursorSelected">
            <summary>
            EventHandler to set the custom cursors instead of wif default cursors
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.InteractionMode">
            <summary>
            The interaction mode is selected by the collage for its built-in tools.
            However, the application can override the collage's selection and implement its
            own modes by responding to the Collage.InteractionModeSelected event.</summary>
            <remarks>Setting the interaction mode changes the mouse cursor</remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.InteractionModeLocked">
            <summary>
            For collage use: prevents changes to the mode while the user is using a tool.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.SuspendCollageUserEventsHandling">
            <summary>
            For application/collage use: if true, Collage will pass mouse and keyboard events to
            the client, but will not handle them itself.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.PanSensitivityMultiplier">
            <summary>
            A factor to increase or decrease pan movement relative to mouse movement in the viewport.
            1 by default. If smaller, reduces sensitivity (eg, when getting close to object in 3D).
            clamp between 1/20 to 30
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayLumenWallsVisible">
            <summary>
            Returns whether the lumen walls are being displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayLumenWallsInnerVisible">
            <summary>
            Returns whether the inner lumen walls are being displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayLumenWallsOuterVisible">
            <summary>
            Returns whether the outer lumen walls are being displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayLumenCenterlineVisible">
            <summary>
            Returns whether the lumen Centerline are being displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.OverlayVesselWallPatchesVisible">
            <summary>
            Returns whether the vessel wall control polyline is being displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.LumenWallsEditEnabled">
            <summary>
            Whether, if visible, the lumen inner/outer walls are editable by direct mouse interaction
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.UseIppZoom">
            <summary>
            Property to get/set whether IPP zoom should be used.
            </summary>
        </member>
        <member name="E:Claron.WIF.Viewport.BeforeDrawOverlaysGraphics">
            <summary>
            Event which is called just before the overlay graphics are drawn.
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.DefaultContentsStatisticsOverride">
            <summary>
            The Polyline class ContentsStatistics(Viewport) method override
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ContentsStatisticsOverride">
            <summary>
            The Polyline instance ContentsStatistics(Viewport) method override
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.ViewportReferencePlanesClippedToSize">
             <summary>
             Applies to all 3D Viewports with active reference planes shown as
             texturemapped rectangles.
            
             When TRUE, clips the reference rectangles to the size
             of the data visible in the referenced Viewport.
            
             When FALSE, extends the reference rectangles to the edge of the dataset,
             and adds a rectangular Polyline onto the rectangle indicating the
             edge of the references Viewport.
             </summary>
             <value></value>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.ViewportReferencePlanesScaledAfterClipToSize">
             <summary>
             Applies to all 3D Viewports with active reference planes shown as
             texturemapped rectangles.
            
             This property specifies the scaling factor applied after the reference plane
             is clipped to the visible data in referenced viewport.
            
             If the scaling factor is not 1.0
             a rectangular Polyline is added onto the rectangle indicating the
             edge of the referenced Viewport.
             </summary>
             <value></value>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Viewport.RibbonVpCrossPositionfYInSource">
            <summary>
            Return the Y coordinate to darw the ReferenceMarker for the RibbonViewport
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.RibbonVpCrossPositionfY">
            <summary>
            Return the Y coordinate to darw the ReferenceMarker for the RibbonViewport
            </summary>
        </member>
        <member name="P:Claron.WIF.Viewport.CrossPenWidth">
            <summary>
            The pen width used when drawing CrossArrow and CrossHairs markers
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.ReferenceMarkerTypeEnum.CrossArrows">
            <summary>
            Cross of arrows pointing in the positive axes directions, with hidden pixels
            test on 3D (to provide depth indication)
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.ReferenceMarkerTypeEnum.ArrowToZ">
            <summary>
            Arrow pointing from the marker space origin towards the Z direction
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.ReferenceMarkerTypeEnum.CrossHairs">
            <summary>
            A simple cross-hairs extending to the viewport's boundaries
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.ReferenceMarkerTypeEnum.Focus2PatientXyReferencePlane">
            <summary>
            On 3D viewport (only) show the patient's XY plane as a textured polygon
            at the Focus position.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.ReferenceMarkerTypeEnum.DistanceMarks">
            <summary>
            A pattern of distance tick marks and circles centered on the marker origin
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.ReferenceMarkerTypeEnum.Hidden">
            <summary>
            No reference marker.
            </summary>
        </member>
        <member name="T:Claron.WIF.Viewport.CameraPropertiesEnum">
            <summary>
            Enum of properties that may or may not be replicated from camera 0 to
            other cameras (when there are multiple cameras)
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesEnum.ToPatientScan">
            <summary> orientation and position </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesEnum.Preset">
            <summary> the transfer function </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesEnum.FrontClipParams">
            <summary> enabled and depth </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesEnum.WindowingParams">
            <summary> center and width </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesEnum.ClipperParams">
            <summary> clipper object, enabled </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesEnum.Mask">
            <summary> the mask reference</summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CameraPropertiesEnum.Spheres">
            <summary> the SphereMarkers</summary>
        </member>
        <member name="T:Claron.WIF.Viewport.CompositingMethodEnum">
            <summary>
            Enum to set the type of compositing that is done with the input camera
            data.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.GlassEffect">
            <summary>
            GlassEffect: When color (ARBG) image is generated by cameras indexed 1
            and above, a transparency effect is applied to them before compositing.
            The color/alpha of the "glass" layer is determined by the property GlassFxColor of
            the glass layer's Camera's Preset object. If set, the GlassFxColor of
            each tissue in tissues 0, 1, 2 overrides the preset color.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.MagentaGreenEffect">
            <summary>
            MagentaGreenEffect: For use with two camera inputs, the first camera
            input is used to generate the red/blue components of the output, and
            the second camera is used to generate the green component of the
            output.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.Layering">
            <summary>
            Layering: The inputs from each camera are layered to generate
            the output image using each camera's OutArgb buffer. The alpha (A)
            channel of the higher indexed camera's buffer determines how much of the underlying
            image shows up.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.ColorwashedLayering">
            <summary>
            Same as Layering, except that the output of overlaid cameras (index 1 or higher) is first
            transformed into colorwash images by mapping the blue channel through a color
            linear ramp (see CompositingColorwashColor(cameraIndex)). Black is transparent.
            If CompositingColorwashOpaque is false, opacity scales with intensity, otherwise
            all other colors are fully opaque.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.ColorwashedSum">
            <summary>
            Same as ColorwashedLayering, except that when there is more than one overlaid camera
            all the channels are first summed together, then the summed image is layerd on top
            of the background (instead of being layered on top of each other one at a time). The summing
            is clamped at 255 for each channel.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.Subtraction">
            <summary>
            Subtraction: For use with two camera inputs, the second camera input is taken
            away from the first one.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.OnlyColoredLayering">
            <summary>
            Only colored pixels are layered. Makes the non colored(r=g=b) pixels transperent. Use this function for 2D cadStack overlay.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Viewport.CompositingMethodEnum.AlphaBlending">
            <summary>
            Alpha-blending: For use with at least 2 camera inputs, 
            over the first camera ARGB output overlays the 2-nd camera ARGB 
            using the 2-nd camera blending factor
            typically used by PET/NM over CT fusion
            </summary>
        </member>
        <member name="T:Claron.WIF.Viewport.TypeEnum">
            <summary>
            The types of viewport to be assigned to a panel in the collage
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.Blank">
            <summary>
            No actual viewport is to be attached (ie, the panel will be ignored by the Collage)
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.ThreeD">
            <summary>
            Shows a projection of a SliceStack in various modes, and allows
            clipping, masking and segmenting the region being shown.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.Axial">
            <summary>
            Flat slab referenced from the Focus RCS, initialized to be in the patient's axial orientation with 0 thickness
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.Coronal">
            <summary>
            Flat slab referenced from the Focus RCS, initialized to be in the patient's coronal orientation with 0 thickness
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.Sagittal">
            <summary>
            Flat slab referenced from the Focus RCS, initialized to be in the patient's sagittal orientation with 0 thickness
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.SliceStackXY">
            <summary>
            A flat slab referenced from the Focus RCS, initialized to the orientation of slices in the SliceStack with 0 thickness
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.TwoD">
            <summary>
            A 2D (single) image. Instead of creating and assigning a slice stack to the collage, use
            Collage.ViewportShowImage to show the image.
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.RibbonCoronal">
            <summary>
            Vertically stretched lumen slab, initialized to be 
            oriented roughly coronally in the patient with 0 thickness
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.RibbonSagittal">
            <summary>
            Vertically stretched lumen slab, initialized to be oriented 
            roughly sagittally in the patient with 0 thickness
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.LumenGraph">
            <summary>
            A graph showing stats about a section of the lumen
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.CrossSection">
            <summary>
            Flat slab perpendicular to a lumen's centerline, initialized to 0 thickness
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.CrossSectionsStrip">
            <summary>
            A strip of square equally-spaced CrossSection slabs organized to fit in the viewport
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.SliceStackXZ">
            <summary>
            A flat slab referenced from the Focus RCS, initialized to the XZ orientation of slices in the SliceStack
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.SliceStackYZ">
            <summary>
            A flat slab referenced from the Focus RCS, initialized to the YZ orientation of slices in the SliceStack
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.TypeEnum.Panoramic">
            <summary>
            Horizontally stretched curved reformat, defined by the Collage's Lumen.
            The lumen's centerline coordinates Z and X are aligned with the viewport's
            X and Y correspondingly.
            </summary>
        </member>
        <member name="T:Claron.WIF.Viewport.InteractionModeEnum">
            <summary>
            Interaction modes indicated by the cursor
            </summary>
        </member>
        <member name="F:Claron.WIF.Viewport.InteractionModeEnum.CutSmart">
            <summary>Cut in 2d or 3d t oremove the intersection of cookie cutter projection and mask to be cut</summary>
        </member>
        <member name="F:Claron.WIF.Viewport.InteractionModeEnum.PaintSphere">
            <summary>paint spheres as the mouse in dragged</summary>
        </member>
        <member name="F:Claron.WIF.Viewport.InteractionModeEnum.PaintBrush">
            <summary>paint an adaptive region of fixed voxel count as the mouse in dragged from each drag line point</summary>
        </member>
        <member name="F:Claron.WIF.Viewport.InteractionModeEnum.MagicPaint">
            <summary>paint an adaptive region from a start "pouring" point</summary>
        </member>
        <member name="T:Claron.WIF.Viewport.VpCursorSelectedEventHandler">
            <summary>
            Event to set the custom cursors instead of wif default cursors
            </summary>
            <param name="VP"></param>
            <param name="cur"></param>
        </member>
        <member name="T:Claron.WIF.Viewport.DrawOrientationFigurineDelegate">
            <summary>
            Delegate for drawing the orientation figurine
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="G">The graphics context to use for the drawing</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Viewport.LumenCrossSectionOverlaysStringDelegate">
            <summary>
            Delegate for drawing the custom overlay on the cross section viewport 
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="cami">The graphics context to use for the drawing</param>
            <param name="overlayStr"></param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Viewport.DrawOrientationLabelsDelegate">
            <summary>
            Delegate for drawing the orientation labels
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="G">The graphics context to use for the drawing</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Viewport.DrawReferenceMarkerDelegate">
            <summary>
            Delegate for drawing the cross-referencing marker
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="G">The graphics context to use for the drawing</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Viewport.DrawOverlayTextDelegate">
            <summary>
            Delegate for drawing text fields (data and rendering info) around the image
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="G">The graphics context to use for the drawing</param>
        </member>
        <member name="T:Claron.WIF.Viewport.DrawOverlayGraphicsDelegate">
            <summary>
            Delegate for drawing additional custom graphic overlays by the application
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="G">The graphics context to use for the drawing</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Viewport.BeforeDrawOverlayGraphicsEventHandler">
            <summary>
            Delegate which is called just before the overlay graphics are drawn.
            </summary>
        </member>
        <member name="T:Claron.WIF.Viewport.ContentsStatisticsDelegate">
            <summary>
            Delegate for overriding the Polyline.ContentsStatistics(Viewport) method
            </summary>
        </member>
        <member name="T:Claron.WIF.Polyline">
            <summary>
            Polyline represents a sequence of connected points (from 0 to any number), to be
            drawn on the viewport. Optionally, a RCS can be associated with those points, in which case
            the polyline can automatically move/rotate together with the object in which coordinates it
            is drawn.
            A text string to draw can also be associated with the polyline.
            Can also be used to represent a point cloud (when ShowPointsOnly is true),
            or to draw just text at associated with the point(s) position (when ShowTextOnly is true).
            A circle or square can be drawn around one of the points to highlight it, and can be used
            with a single pixel to represent a circle of square graphics without the polyline.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Polyline.DrawStatisticsTextOverride">
            <summary>
            A global function for overriding the built-in statistics text drawing function.
            When set to null, the built-in default drawing function is used.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.#ctor(System.Collections.Generic.List{Claron.WIF.Vector3},Claron.WIF.WifObject,System.String,System.Drawing.Pen)">
             <summary>
            
             </summary>
             <param name="Pts">The 3D points connecting the lines</param>
             <param name="RefRCS">The RCS in which the points exist</param>
             <param name="Text">Text to display when referencing the polyline (or null)</param>
             <param name="pen">The pen to use to draw the line. If null, a random colored pen will be assigned.</param>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.#ctor(Claron.WIF.Vector3[],Claron.WIF.WifObject,System.String,System.Drawing.Pen)">
             <summary>
            
             </summary>
             <param name="Pts">The 3D points connecting the lines </param>
             <param name="RefRCS">The RCS in which the points exist</param>
             <param name="Text">Text to display when referencing the polyline (or null)</param>
             <param name="pen">The pen to use to draw the line. If null, a random colored pen will be assigned.</param>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.#ctor(Claron.WIF.Lumen,Claron.WIF.WifObject,System.Drawing.Pen)">
             <summary>
            
             </summary>
             <param name="lumen"></param>
             <param name="RefRCS"></param>
             <param name="pen">Default value = null</param>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.Copy">
            <summary>
            Returns a deep copy of the polyline
            </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.PointGet(System.Int32)">
            ' <summary>
            ' Direct access to get/set a point on the polyline.
            ' </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.PointSet(System.Int32,Claron.WIF.Vector3)">
            <summary>
            Direct access to get/set a point on the polyline.
            </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.LengthMm">
            <summary>
            Returns the sum length of the line segments between the vertices. If the
            polyline is closed, the closing segment length is added as well.
            The result is scaled to mm using RCS.ToPatientScan.Scale and assuming isotropy.
            </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.CurveVi(Claron.WIF.Viewport)">
            <summary>
            Returns the points as a curve in viewport index (pixels) coordinates
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline._textFillBackgroundRect">
            <summary>
            Property to get/set whether a filled background rectangle should be
            drawn behind the text of the polyline.
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline._backgroundRectOutlinePen">
            <summary>
            Property to get/set the pen to use when drawing the outline of the
            background rect.
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline._ZtoleranceMm">
            <summary>
            Thickness limit in mm.
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline._pointRadiusVi">
            <summary>
            Radius, in pixels, to draw points with.
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline._IsFilled">
            <summary>
            Toggles whether the polyline should be filled.
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline._polylineFillBrush">
            <summary>
            Polyline fill brush.
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline._hiddenPen">
            <summary>
            The pen to use for drawing hidden lines.
            </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.PointsAdd(Claron.WIF.Vector3)">
            <summary>
            The proper call for adding points (instead of point.add).
            if MaxLineLengthInRcs is smaller than the distance between this point and the
            previous one, intermediate points will be inserted at equal distances from each other
            to ensure that the object remains compliant with MaxLineLengthInRcs.
            </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.PointsAverage">
            <summary>
            Returns the average of all the polyline points
            </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.HighlightPoint(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets highlighting of one of the points in the polyline by drawing a circle or square
            around it. Can be used to turn off the highlighting as well
            </summary>
            <param name="PointI">The index of the point to highlight.
            If outside the valid index range (eg, -1), point highlighting is disabled. </param>
            <param name="AsSquare">Highlight as a square (otherwise as a circle)</param>
            <param name="RadiusPixels">The radius of the circle, or half the side of the square</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.HighlightPoint(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets highlighting of one of the points in the polyline by drawing a circle or square
            around it. Can be used to turn off the highlighting as well
            </summary>
            <param name="PointI">The index of the point to highlight.
            If outside the valid index range (eg, -1), point highlighting is disabled. </param>
            <param name="AsSquare">Highlight as a square (otherwise as a circle)</param>
            <param name="RadiusPixels">The radius of the circle, or half the side of the square</param>
            <param name="IsFilled">Determines wether the highlight graphics (circle or square) is filled
            or hollow</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.HighlightedPointI">
            <summary>
            The index of the currently highlighted point, or -1 if none is highlighted.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.ConvertLineToCircleThroughFirstAndLastPoint">
            <summary>
            Turns the Polyline into a circle, using the first and last point as diameter markers. The first point gets preserved, all others are replaced.
            </summary>
            <remarks>Assumes the points are in the z=0 plane.</remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.MapToPatientRcs(Claron.WIF.Viewport)">
            <summary>
            Maps the polyline points, which may have been drawn in the viewport's RCS, to the
            patient's RCS (Pr), so that it would be displayed correctly following zoom/pan/rotation
            changes of the displayed data.
            </summary>
        </member>
        <member name="M:Claron.WIF.Polyline.PointsInPr(Claron.WIF.Viewport)">
            <summary>
            Returns the points mapped to the Patient RCS.
            </summary>
            <param name="VP">The reference viewport on which the polyline is presumably shown</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Polyline.PointsInVi(Claron.WIF.Viewport)">
            <summary>
            Maps the polyline points to viewport grid (PictureBox) coordinates and
            returns them in a format suitable for drawing.
            </summary>
            <param name="VP"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Polyline.PointsInViV3(Claron.WIF.Viewport)">
            <summary>
            Returns the polyline points in viewport grid index coordinates 
            </summary>
            <param name="VP"></param>
        </member>
        <member name="M:Claron.WIF.Polyline.PointsInVi(Claron.WIF.Viewport,System.Double@,Claron.WIF.Vector3[]@)">
            <summary>
            Maps the polyline points to viewport grid (PictureBox) coordinates and
            returns them in a format suitable for drawing.
            </summary>
            <param name="VP">The viewport for coordinate mapping</param>
            <param name="outFacingCosine">Output: between -1 (facing completely away) and 1 (facing the viewer).
            For ribbon viewports, will always be set to 1 (since varies for each point)</param>
            <param name="outPtsVi">Output: The returned points in vector3 coordinates</param>
            <returns>An array of points suitable for drawing.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.NearestVisiblePointInVP(Claron.WIF.Viewport,System.Double,System.Double,System.Int32@,System.Double@)">
            <summary>
            Returns the (vertex) point on the polyline closest to a probe location when the
            polyline is shown in (projected onto) a given viewport. Points that will not
            be drawn in that viewport or points along the line segments connecting the points
            are not tested.
            </summary>
            <param name="VP">The viewport in which the polyline is presumably shown</param>
            <param name="X">The Vi (viewport/picturebox index) X of the probe point</param>
            <param name="Y">The Vi Y of the probe point</param>
            <param name="outNearestPointI">output: closest polyline point index, or -1 if none is visible.</param>
            <param name="outDistance2DInPixels">The distance in viewport pixel units. Double.MaxValue is no
            point is visible.</param>
            <returns>The coordinates of the closest point. (0,0) if not visible</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.DrawIfVisible(System.Drawing.Graphics,Claron.WIF.Viewport,System.Boolean@)">
            <summary>
            Draws the Polyline in the given viewport, conditional on that
            the Polyline is visible. The polyline may be drawn in dashed semi-transparent
            color if the Facing properties has been set and the polyline is facing away from
            the camera.
            The associated text is also drawn when its position is any other than ListNearMargin,
            in which case the text needs to be drawn by the owning viewport.
            </summary>
            <returns>True iff the polyline was drawn, at least partially, in a full pen color opacity.</returns>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Polyline.UpdateContentsStatisticsOverride">
            <summary>
            Method overriding ContentsStatistics calculation
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Polyline.ContentsStatistics(Claron.WIF.Viewport,System.Int32)">
            <summary>
            Returns statistics of the region enclosed by the polyline (assuming it's closed)
            when applied to the contents of a viewport showing an ImageU12.
            Caches previous calculations and optimized to eliminate redundant computation
            </summary>
            <param name="vp">viewport</param>
            <param name="layerIndex">an index of surface layer visible in the current viewport. Will be 0 and 1 for fusion</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Polyline.BoundingBox">
            <summary>
            Returns the bounding box of the polyline.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Polyline.PenShadowColor">
            <summary>
            When set to a value other than null, the lines will be drawn with a 
            shadow of the given color, for better contrast.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.Points">
            <summary>
            Direct access to the list of line end points. If the contents of the list get modified
            the client must call Updated()!
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.PointsArray">
            <summary>
            An array copy of the line end points.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.PointLast">
            <summary>
            Direct access to get/set the last point on the polyline.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.PointsCount">
            <summary>
            The number of points in the polyline (read only)
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Polyline.Pen">
            <summary>
            The Pen with which to draw the Polyline (default: a new color from a list).
            When a new one is assigned, the old one is automatically disposed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.TextFillBackgroundRect">
            <summary>
            Property to get/set whether a filled background rectangle should be
            drawn behind the text of the polyline.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.TextBackgroundRectOutlinePen">
            <summary>
            Property to get/set the pen to use when drawing the outline of the
            background rect.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.StatisticsPen">
            <summary>
            The Pen with which to draw any ancillary lines (default: same as the polyline pen).
            When a new one is assigned, the old one is automatically disposed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.Font">
            <summary>
            Font to draw statistics and text with
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.Text">
            <summary>
            Text to be displayed referencing the Polyline when it is visible
            (see also TextPositioning)
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.StatisticsText">
            <summary>
            Statistics text to be displayed, usually by the viewport following the client-controlled text.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ShowLengthWidthLines">
            <summary>
            Whether to draw the lines depicting the length and width of the polyline 
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.TextPositioning">
            <summary>
            Describes where the text would be shown relative to the polyline
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.TextSizePoints">
            <summary>
            The size, in points, of the text when being drawn on the viewport
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Polyline.Name">
            <summary>
            The unique name of the Polyline, automatically assigned by the Viewport when added
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.RCS">
            <summary>
            The RCS of the Polyline points coordinates - usually either the PatientScanRCS or a GridBox
            mapped to it.
            If null (default) when drawn, assumed to be in the output PictureBox coordinates.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.MaxLineLengthInRcs">
            <summary>
            Sets a maximum distance between points (ie, line length) in the Polyline RCS.
            When a point is added to the polyline (using PointsAdd) and its distance from the previous point
            is larger than MaxLineLengthInRcs, then intermediate points are inserted to maintain
            compliance with the property.
            It is initialized to Double.MaxValue (ie, it is ignored).
            When this property is changed to any value other than Double.MaxValue, the list of
            points is examined and may be modified to ensure compliance.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.Visible">
            <summary>
            Determines whether the Polyline is displayed or not (default: True)
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.HideWhenNotFacing">
            <summary>
            Property to get/set whether the polyline should be visible or not when it is not facing
            the viewer.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.DrawOrder">
            <summary>
            Selects the laying order on the screen relative to other polylines in the same
            viewport (default - middle). Used by the client viewport.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ShowPoints">
            <summary>
            Determines whether the points will be displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ShowLines">
            <summary>
            Property to get/set whether connecting line segments should be shown
            for this polyline.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ShowTextOnly">
            <summary>
            Determines whether only the points will be displayed, without the connecting
            segments
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.IsShadowOfTextStrong">
            <summary>
            Determines whether only the points will be displayed, without the connecting
            segments
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ShowStatistics">
            <summary>
            For Viewport use - indicates whether statistics information should be displayed
            in the text of the polyline (used as ROI)
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.StatisticsFormatter">
            <summary>
            For Viewport use - delegate used to format statistics.  If set to null, no statistics are displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.StatisticsFormatterEx">
            <summary>
            For Viewport use - delegate used to format statistics.  If set to null, no statistics are displayed.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ZtoleranceMm">
            <summary>
            Property to get/set the Z (depth) tolerance in mm within which drawing is done
            over a viewport. Points and portions of lines falling outside the tolerance
            are not drawn. If negative, it is ignored.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.PointRadiusPixels">
            <summary>
            Radius to draw points with in pixels.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.IsActive">
            <summary>
            Flags whether the Polyline is being actively modified by the user, and so should
            remain visible even when overlay graphics are turned off.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.IsEditable">
            <summary>
            Flags whether the Polyline is editable by the user. If true, in edit mode, this polyline
            can be edited by the user.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.IsShadowed">
            <summary>
            Flags whether the Polyline will be shown with a shadow for better
            contrast. The shadow color is black by default, but can be modified
            by setting PenShadowColor <see cref="P:Claron.WIF.Polyline.PenShadowColor"/>.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ShowClosingLine">
            <summary>
            Toggles whether a dotted closing line is shown (default: true)
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.IsFilled">
            <summary>
            Determines whether the polyline should be filled using PolylineFillBrush when it is drawn.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.PolylineFillBrush">
            <summary>
            Polyline fill brush. If not set by the client, will default on first drawing 
            to the pen's color at 1/4 its transparency.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.ApplyHiddenPixelsRemoval">
            <summary>
            Controls whether the line is drawn over shaded volume rendered images such that points that are hidden by objects in
            the image would be drawn using HiddenPen. 
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.HiddenPen">
            <summary>
            The pen to use for drawing hidden lines.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.Facing">
            <summary>
            A unit vector in the Polyline's RCS that defines the direction
            in which the Polyline should be visible. If null - visible from all directions.
            Ignored if RCS is null.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Polyline.WithRibbonTypeUseOnlyCentralMapper">
            <summary>
            When the viewport is ribbon type and the polyline points are not already in viewport RCS,
            indicates whether to use only a single mapper, obtained at the middle of the bounding box, 
            to map all the points in the polyline from their source RCS to the viewport. Otherwise,
            each point is mapped individually, which may create a distorted, sometimes unacceptably strange,
            projection.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.RollZxToFaceViewer">
            <summary>
            When set, the polyline will be automatically rotated around the Z axis of 
            its RCS such that the X axis will be parallel to the viewport plane (ie, ZX will
            face the viewer to the degree possible).
            This supports drawing auto-rotated 2D shapes , such as arrows, plotted on the 
            XZ plane of their source RCS.
            </summary>
        </member>
        <member name="P:Claron.WIF.Polyline.DrawConstraint">
            <summary>
            A qualification delegate that can be used to apply external semantics to affect the visibility of a polyline 
            </summary>
        </member>
        <member name="T:Claron.WIF.Polyline.DrawStatisticsText">
            <summary>
            Delegate for drawing statistics text
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="G">The graphics context to use for the drawing</param>
            <param name="pl">The polyline for the drawing</param>
            <param name="isFullyVisible"></param>
            <param name="wasEverythingDrawn"></param>
            <param name="pointsInVi">The array of polyline points in viewport coordinate</param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Polyline.TextPositioningEnum.ListNearMargin">
            <summary>
            Polyline texts shown as a list near the viewport's margin, using the same color
            as the polyline
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline.TextPositioningEnum.AveragePointCentered">
            <summary>
            The text is centered on the location which is the average of all the polyline points
            (projected on the screen)
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline.TextPositioningEnum.StartPoint">
            <summary>
            Near the start point of the polyline
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline.TextPositioningEnum.EndPoint">
            <summary>
            Near the end point of the polyline
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline.TextPositioningEnum.MiddlePoint">
            <summary>
            Near the Middle point of the polyline
            </summary>
        </member>
        <member name="F:Claron.WIF.Polyline.TextPositioningEnum.AutoPoint">
            <summary>
            Chooses a point on the polyline that attempts to avoid clipping of the text
            </summary>
        </member>
        <member name="T:Claron.WIF.Polyline.StatisticsFormatHandler">
            <summary>
            custom formatting for statistics display
            </summary>
            <param name="stats">the region statistics</param>
        </member>
        <member name="T:Claron.WIF.Polyline.DrawConstraintQualifier">
            <summary>
            Qualifier callback used to determine visibility of a polyline
            </summary>
            <param name="vp">the viewport instance in which the polyline is drawn</param>
            <param name="p">the polyline instnace</param>
            <returns>true if the polyline should be drawn; false if it should be skipped</returns>
        </member>
        <member name="T:Claron.WIF.Polyline.UpdateContentsStatisticsDelegate">
            <summary>
            Delegate for updating the polyline's ContentsStatistics by clients
            </summary>
            <param name="Vp">The viewport being refreshed</param>
            <param name="p">The polyline</param>
            <param name="stats">The statistics to update on return (output)</param>
            <param name="img">The image under the polyline (camera output)</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Circle">
            <summary>
            A class representing a filled overlay circle drawn over the image with optional hidden
            surface removal.
            </summary>
        </member>
        <member name="F:Claron.WIF.Circle._centerPr">
            <summary>
            The center of the circle in patient scan coordinates.
            </summary>
        </member>
        <member name="F:Claron.WIF.Circle._radiusMm">
            <summary>
            The radius of the circle in mm.
            </summary>
        </member>
        <member name="F:Claron.WIF.Circle._argb">
            <summary>
            The color of the circle.
            </summary>
        </member>
        <member name="F:Claron.WIF.Circle._brush">
            <summary>
            The brush for filling the circle where it is not hidden (or when hidden surface removal is off).
            </summary>
        </member>
        <member name="F:Claron.WIF.Circle._transparentBrush">
            <summary>
            The brush for filling the circle where it is hidden when hidden surface removal is on.
            </summary>
        </member>
        <member name="F:Claron.WIF.Circle._name">
            <summary>
            The name of the circle.
            </summary>
        </member>
        <member name="F:Claron.WIF.Circle._visible">
            <summary>
            Whether the circle is visible.
            </summary>
        </member>
        <member name="M:Claron.WIF.Circle.#ctor(Claron.WIF.Vector3,System.Double,System.String,System.Drawing.Brush,System.Drawing.Brush)">
            <summary>
            Creates a new circle marker.
            </summary>
            <param name="centerPr"></param>
            <param name="radiusMm"></param>
            <param name="name"></param>
            <param name="brush">the brush used to fill the circle where it is not hidden.</param>
            <param name="transparentBrush"> The brush for filling the circle where it is hidden when hidden surface removal is on.</param>
        </member>
        <member name="P:Claron.WIF.Circle.CenterPr">
            <summary>
            Property to get/set the center of the circle.
            </summary>
        </member>
        <member name="P:Claron.WIF.Circle.RadiusMm">
            <summary>
            Property to get/set the radius of the circle.
            </summary>
        </member>
        <member name="P:Claron.WIF.Circle.Argb">
            <summary>
            Property to get/set the color of the circle.
            </summary>
        </member>
        <member name="P:Claron.WIF.Circle.Name">
            <summary>
            Property to get/set the name of the circle.
            </summary>
        </member>
        <member name="P:Claron.WIF.Circle.Visible">
            <summary>
            Property to get/set whether the circle is visible and should
            be drawn.
            </summary>
        </member>
        <member name="P:Claron.WIF.Circle.Brush">
            <summary>
            Returns the brush used to fill the circle where it is not hidden.
            </summary>
        </member>
        <member name="P:Claron.WIF.Circle.TransparentBrush">
            <summary>
            Returns the brush used to draw hidden pixels
            </summary>
        </member>
        <member name="P:Claron.WIF.Circle.ApplyHiddenPixelsRemoval">
            <summary>
            Property to get set whether hidden pixels removal should be done.
            </summary>
        </member>
        <member name="T:Claron.WIF.Graph">
            <summary>
            Graph represents an overlay graphic for presentation of graph of one or few one-dimensional
            functions f1(x), f2(x), ... on the same axis
            </summary>
        </member>
        <member name="M:Claron.WIF.Graph.#ctor(Claron.WIF.Viewport,System.String,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <param name="VP"></param>
             <param name="xStr"></param>
             <param name="yStr"></param>
             <param name="showScale"></param>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Graph.Draw(System.Drawing.Graphics,Claron.WIF.Viewport)">
            <summary>
            Draw lines of Graph: axis in My.Settings.ArrowColor and graphs of functions in random colors
            </summary>
            <param name="G"></param>
            <param name="VP"></param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.ViewportReference">
            <summary>
            Represents the graphics showing the pose and extent of one viewport ("Referenced")
            on another ("Presenting") viewport. The graphic is represented as an array of Polylines
            which are drawn on the Presenting viewport using coordinates obtained from the
            Referenced Viewport.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ViewportReference.GraphicPresentation">
            <summary>
            Returns a polyline representation of the reference on the presenting viewport.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ViewportReference.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the reference on the presenting viewport
            </summary>
            <param name="G">The context to draw on, representing the output of the presenting viewport </param>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.ViewportReference.Referenced">
            <summary>
            The viewport being references. Currently only slab viewports are supported.
            </summary>
        </member>
        <member name="P:Claron.WIF.ViewportReference.Presenting">
            <summary>
            The viewport presenting the reference as an overlay.
            </summary>
        </member>
        <member name="P:Claron.WIF.ViewportReference.LastUpdateTicks">
            <summary>
            Returns the last update tick of modifications that may affect the spatial representation
            of the Referenced viewport.
            </summary>
        </member>
        <member name="M:Claron.WIF.ViewportRemoter.ColorwashGreyToArgb(System.UInt32[],System.Int32,Claron.WIF.IndexRun[])">
            <summary>
            Applies a colorwash affect in-place to a color buffer
            </summary>
        </member>
        <member name="M:Claron.WIF.ViewportRemoter.CompositingColorwashColorGet(System.Int32)">
            <summary>
            The Argb color used in applying the output of front cameras in ColorwashedGrey
            compositing mode.
            </summary>
            <param name="CameraIndex">The index of the camera to which this color is applied.
            Silently clamped to the valid range.</param>
        </member>
        <member name="M:Claron.WIF.ViewportRemoter.CompositingColorwashColorSet(System.Int32,System.UInt32)">
            <summary>
            The Argb color used in applying the output of front cameras in ColorwashedGrey
            compositing mode.
            </summary>
            <param name="CameraIndex">The index of the camera to which this color is applied.
            <param name="value"></param>
            Silently clamped to the valid range.</param>
        </member>
        <member name="P:Claron.WIF.ViewportRemoter.CompositingColorwashOpaque">
            <summary>
            in Colorwashed compositing, controls whether colorwash is layered as opaque
            color anywhere where it is not black. If flase, alpha is set proportional to
            the grey level of the source image being used to do the colorwashing.
            </summary>
        </member>
    </members>
</doc>
