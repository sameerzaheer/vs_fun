<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WifBase</name>
    </assembly>
    <members>
        <member name="T:Claron.WIF.Anonymizer">
            <summary>
            Provides replacements for Patient name and StudyUid and SeriesUid fields in the DICOM header.
            The actual replacing is done outside this class.
               114 combinations in a 'cv' letter pair, is sufficient for #series per study and for #studies per patient
               684 combinations in a 'vcv' triplet , is often sufficient for #patients per study or per hospital source
             12996 combinations in a 'cvcv' or 'vcvc' quad, for larger datasets or for combination of 
                                      c-vcv with c for one of 19 sources and vcv for at most 684 patients per source, the 2001 Claron default
             77976 combinations in a 'cvcvc' quintet
            246924 combinations in a 'vcvcv' quintet
            </summary>
            <remarks>See Anonymize() comment for further detail.</remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.#ctor">
            <summary>
            Do not use this constructor once anything has been anonymized, instead call DictionariesDeSerialize()
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.AnonymizeSeriesUid(System.String,System.String)">
            <summary>
            Given a related series UID of cvcv.cv.cv format, generated the next one
            in alphabetical order the is not yet in the series dictionary.
            </summary>
            <param name="seriesUid">The related series UID,
            i.e. the one from which the current series is derived. Example: peke.ba.ba</param>
            <param name="alternateSeriesUid">The series UID to use if anonymization does not work
            (i.e. the related series UID is not an anonymized one).</param>
            <returns>The anonymized series UID.</returns>
            <remarks>should be called only once per series</remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.Anonymize(System.String@,System.String@,System.String@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="patientsName">The patients name as listed in the DICOM header.</param>
            <param name="studyUid">The studyUid as listed in the DICOM header.</param>
            <param name="seriesUid">The seriesUid as listed in the DICOM header.</param>
            <param name="forcedFirstChar">Default value = "", if given should be a consonant that will be used as first name character.</param>
            <param name="patientAge">Default value = "", only needed for backwards compatibility.</param>
            <param name="patientDoB">Default value = "",  as listed in the DICOM header.</param>
            <param name="patientSex">Default value = "", as listed in the DICOM header.</param>
            <param name="institutionName">Default value = "", as listed in the DICOM header.</param>
            <param name="referringDoc">Default value = "", as listed in the DICOM header.</param>
            <param name="studyDateTime">Default value = "", as listed in the DICOM header.</param>
            <param name="seriesDateTime">Default value = "", as listed in the DICOM header.</param>
            <param name="studyId">As listed in the DICOM header, should not be "".</param>
            <param name="seriesId">As listed in the DICOM header, should not be "".</param>
            <param name="forcedName">Default value = "", p=PMS, t=TWH, s=Stanford, l=lung database, c=cmp data from PMS</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.Anonymize(System.String@,System.String@,System.String@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Key function of the Anonoymizer. Given patient, study and series information,
             creates hierarchical string hashes to be used as new patient name, studyUid and seriesUid.
             The hashes are numbers translated into strings of consonants ans vowels alternating,
             thus ensuring that they can be pronounced.
            
             Four letters are used to encode the patient name: "cvcv" i.e. "peke".
             Given the possible 19 consonants and 6 vowels this makes for 12996 possible patient names.
             When correlating the first consonant to a particular repeated data source (company or hospital)
             then 684 patient names per such first consonant are possible.
            
             Two additional letters are used to encode the studyUid, "cvcv.cv" i.e. "peke.ba".
             Given the possible 19 consonants and 6 vowels this makes for 114 studies for each patient.
             While patient names hashes are randomly distributed, the studyUid extension is chronological
             in the order in which the studies are anonymized. Hence, the first study addition is ".ba",
             followed by ".be", ".bi", ".bo", ".bu", ".by", ".da",  ".de", ...
            
             Two additional letters are used to encode the seriesUid, "cvcv.cv.cv" i.e. "peke.ba.ba".
             Given the possible 19 consonants and 6 vowels this makes for 114 series for each study.
             While patient names hashes are randomly distributed, the seriesUid extension is chronological
             in the order in which the series are anonymized. Hence, the first series addition is ".ba",
             followed by ".be", ".bi", ".bo", ".bu", ".by", ".da",  ".de", ...
            
             The string used as key and basis for patient name anonymization is the concatenation
             patientsName + patientDoB + patientSex
             This gives us a unique string needed a key.
             In case of a series already anonymized at the source,
             the patient name will be fake and could be very repetitive across patients, i.e. "Abdominal AAA";
             then the + patientDoB + patientSex extension takes care of the key uniqueness.
             In case that the patientDoB filed is taken out as well as the source, it is replaced with the date of the scan.
            
             All hashing collision avoidance is based on dictionaries mapping from original names to anonymized ones.
             In addition another dictionary is maintained for cvcv.cv.cv Uids to an array of strings with key DICOM header info.
             </summary>
             <param name="patientsName">The patients name as listed in the DICOM header.</param>
             <param name="studyUid">The studyUid as listed in the DICOM header.</param>
             <param name="seriesUid">The seriesUid as listed in the DICOM header.</param>
             <param name="forcedFirstChar">Default value = "", if given should be a consonant that will be used as first name character.</param>
             <param name="patientAge">Default value = "", only needed for backwards compatibility.</param>
             <param name="patientDoB">Default value = "",  as listed in the DICOM header.</param>
             <param name="patientSex">Default value = "", as listed in the DICOM header.</param>
             <param name="institutionName">Default value = "", as listed in the DICOM header.</param>
             <param name="referringDoc">Default value = "", as listed in the DICOM header.</param>
             <param name="studyDateTime">Default value = "", as listed in the DICOM header.</param>
             <param name="seriesDateTime">Default value = "", as listed in the DICOM header.</param>
             <param name="studyId">As listed in the DICOM header, should not be "".</param>
             <param name="seriesId">As listed in the DICOM header, should not be "".</param>
             <param name="forcedName">Default value = "", p=PMS, t=TWH, s=Stanford, l=lung database, c=cmp data from PMS</param>
             <param name="folderPath"></param>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.IsAnonymizedCaseInDatabase(System.String)">
            <summary>
            Returns true if the given anonymized case is already in the database.
            </summary>
        </member>
        <member name="M:Claron.WIF.Anonymizer.Lookup(System.String@,System.String@,System.String@,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Lookup of anonymizer dictionary information.
            </summary>
            <param name="patientsName">ByRef: The patients name as listed in the DICOM header. Will be replaced by lookup.</param>
            <param name="studyUid">ByRef: The studyUid as listed in the DICOM header. Will be replaced by lookup.</param>
            <param name="seriesUid">ByRef: The seriesUid as listed in the DICOM header. Will be replaced by lookup.</param>
            <param name="patientDoB">Default value = "",  as listed in the DICOM header.</param>
            <param name="patientSex">Default value = "", as listed in the DICOM header.</param>
            <param name="institutionName">Default value = "", as listed in the DICOM header.</param>
            <param name="referringDoc">Default value = "", as listed in the DICOM header.</param>
            <param name="studyDateTime">Default value = "", as listed in the DICOM header.</param>
            <param name="seriesDateTime">Default value = "", as listed in the DICOM header.</param>
            <param name="studyId">As listed in the DICOM header, should not be "".</param>
            <param name="seriesId">As listed in the DICOM header, should not be "".</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.DeleteName(System.String)">
            <summary>
            Deletes all instances of dictionary entries where the anonymized name starts with the given string.
            If the given name is of cvcv.cv.cv or cvcv.cv.c style all matching series will be deleted.
            If the given name is of cvcv.cv or cvcv.c style all matching studies and series will be deleted.
            If the given name is of cvcv or cvc or cv or c style all matching patientNames, studies and series will be deleted.
            </summary>
            <param name="nameToDelete"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.DeleteSeries(System.String)">
            <summary>
            Deletes the given anonymized series UID.
            </summary>
            <param name="nameToDelete"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.SeriesInfo(System.String)">
            <summary>
            Retrieves the DICOM header info stored for the given seriesId
            </summary>
            <param name="seriesId">The seriesId in cvcv.cv.cv format.</param>
            <returns>The associated series info.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.String2Cvcv(System.String)">
            <summary>
            converts a string (key) into the matching four letter cvcv hash
            </summary>
            <param name="s">The key string.</param>
            <returns>The cvcv hash.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.Number2Cv(System.UInt32)">
            <summary>
            Converts a number into a two digit cv hash string.
            </summary>
            <param name="k">The input number.</param>
            <returns>The cv hash code.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.Number2Cvcv(System.UInt32)">
            <summary>
            Converts a number into a four digit cvcv hash string.
            </summary>
            <param name="k">The input number.</param>
            <returns>The cvcv hash code.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.Cvcv2Number(System.String)">
            <summary>
            Converts from a cvcv hash code back to the smallest matching key number.
            </summary>
            <param name="s">The cvcv hash code.</param>
            <returns>The smallest matching key number.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.ToString">
            <summary>
            Writes all dictionary content to a string.
            </summary>
            <returns>A HUGE string with all dictionary content.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.ToCsv">
            <summary>
            Writes to D:\tmp\anonymizerDictInfo.csv (or C:\tmp\anonymizerDictInfo.csv if d: does not exist)
            all dictionary info as .csv file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.DictionariesSerialize">
            <summary>
            Serializes the dictionary info in to a compressed and Base64 encoded file
            stored at WIF.WIFRootPath + "\WIFBase\Resources\Anonymizer.xml",
            which is embedded in a DLL during compilation.
            </summary>
            <remarks>After anonymizing new cases, check this file into SVN to preserve the new names.</remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.DictionariesDeSerialize">
            <summary>
            Deserializes the anonymizer dictionary info from the DLL embedded resource.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Anonymizer.Test">
            <summary>
            Anonymizer test function.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.MathUtils">
            <summary>
            General-purpose math functions and classes used in imaging
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns the input value clamped to the given bounds.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Clamp``1(``0,``0@,``0)">
            <summary>
            Clamps a value to be within range in place
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Clip(System.Double,System.Double@,System.Double)">
            <summary>
            Clip a value to be within the given bounds.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Within(System.Double,System.Double,System.Double)">
            <summary>
            Returns True iff the value falls within (and including) the given bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Equals(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates equality between two doubles with some tolerance
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Similar(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates equality between two doubles with some tolerance
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Overlapping(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether two ranges of integers overlap with each other.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Max(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Returns the max of two Vector3 objects.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Max(System.Int16[],System.Int32)">
            <summary>
            Returns the maximum value in the first Count elements of an array
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Max(System.Int32[],System.Int32)">
            <summary>
            Returns the maximum value in the first Count elements of an array
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Max``1(``0,``0)">
            <summary>
            Returns the largest of two objects of any comparable type
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Max``1(``0[],System.Int32)">
            <summary>
            Returns the largest number in the first Count members of an array of any comparable type.
            Count must be positive and is silently clamped to the array size.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Min``1(``0[],System.Int32)">
            <summary>
            Returns the smallest number in the first Count members of an array.
            Count is optional and must be positive. It is silently clamped to the array size.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.MinAndMax(System.Int16[],System.Int16@,System.Int16@)">
            <summary>
            Finds the min and max of an array in a single pass through it.
            (More efficient than doing min and max separately).
            </summary>
            <param name="a">The array</param>
            <param name="outMin">Output: the minimum value</param>
            <param name="outMax">Output: the maximum value</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MinAndMax(System.Int32[],System.Int32@,System.Int32@)">
            <summary>
            Finds the min and max of an array in a single pass through it.
            (More efficient than doing min and max separately).
            </summary>
            <param name="a">The array</param>
            <param name="outMin">Output: the minimum value</param>
            <param name="outMax">Output: the maximum value</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MinAndMax(System.Int64[],System.Int64@,System.Int64@)">
            <summary>
            Finds the min and max of an array in a single pass through it.
            (More efficient than doing min and max separately).
            </summary>
            <param name="a">The array</param>
            <param name="outMin">Output: the minimum value</param>
            <param name="outMax">Output: the maximum value</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MinMin2ndMax2ndMax(System.Int16[],System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Finds the smallest, second smallest, second largest and largest of an array in a single pass through it.
            (More efficient than doing min and max separately).
            </summary>
            <param name="numbers"></param>
            <param name="smallest">Initialize to I16.MaxValue or 
            pass in the result from a prior call onto which the current s incrementally updated</param>
            <param name="secondSmallest">Initialize to I16.MaxValue or 
            pass in the result from a prior call onto which the current s incrementally updated</param>
            <param name="secondLargest">Initialize to I16.MinValue or 
            pass in the result from a prior call onto which the current s incrementally updated</param>
            <param name="largest">Initialize to I16.MinValue or 
            pass in the result from a prior call onto which the current s incrementally updated</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.RangeWithinCounts(System.Int16[],System.Int16,System.Int16,System.Int16,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Counts how many array values fall below, within, and above the given range.
            Values equal to any of the two range bounds are added to the within count.
            Counts of the one special value given as ignoreValue are ignored.
            Counts are done incremental across multiple function invocations, 
            make sure the count variables are set to 0 before the first call.
            </summary>
            <param name="numbers">The array of numbers to do the range counting for.</param>
            <param name="rangeBgn">The smallest value included in the range and the Within count.</param>
            <param name="rangeEnd">The largest value included in the range and the Within count.</param>
            <param name="ignoreValue">The value not beeing counted.</param>
            <param name="countBelow">The count of values below the range, can be accumulated across multiple calls to this function.</param>
            <param name="countWithin">The count of values within the range, can be accumulated across multiple calls to this function.</param>
            <param name="countAbove">The count of values above the range, can be accumulated across multiple calls to this function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.Min(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Returns the min of two Vector3 objects.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Min(System.Int16[],System.Int32)">
            <summary>
            Returns the minimum value in the first Count elements of an array
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Order(System.Int32@,System.Int32@)">
            <summary>
            Orders the two given integers.
            </summary>
            <param name="x">The first integer.</param>
            <param name="y">The second integer</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.Order(System.Single@,System.Single@)">
            <summary>
            Orders the two given floats.
            </summary>
            <param name="x">The first float.</param>
            <param name="y">The second float.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.EnsureMinMax(System.Double[],System.Double[])">
            <summary>
            Ensures that min and max are properly set. swaps if min>max
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.EnsureMinMax(System.Int32[],System.Int32[])">
            <summary>
            Ensures that min and max are properly set. swaps if min>max
            </summary>
            <param name="Min"></param>
            <param name="Max"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Remainder(System.Int32,System.Int32)">
            <summary>
            Returns the remainder of a / b by calling Math.DivRem.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>remainder of a/b</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Interpolate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Interpolate between u and v based on the relative distances of x and y from z.
            </summary>
            <param name="x">Source interval start.</param>
            <param name="y">Source interval internal point.</param>
            <param name="z">Source interval end.</param>
            <param name="u">Destination interval start.</param>
            <param name="v">Destination interval end.</param>
            <returns>Interpolated value in u-v interval.</returns>
            <remarks>Assumes x less y less z, but not u less v.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Median3Filter(System.Double[]@)">
            <summary>
            Passes a 3-wide median filter over an array (1D). The first and last values are unmodified.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Median3FilterCircular(System.Double[]@)">
            <summary>
            Passes a 3-wide median filter over an array (1D), assuming the array is a circular buffer.
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:Claron.WIF.MathUtils.Median5(System.Double[])">
            <summary>
            Sorts the given array and returns the middle value
            </summary>
            <param name="p">Pixel array to be sorted</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.Median5FilterCircular(System.Double[]@)">
            <summary>
            Passes a 5-wide median filter over an array (1D), assuming the array is a circular buffer.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Median5Filter(System.Double[]@)">
            <summary>
            Passes a 5-wide median filter over an array (1D)
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Median``1(``0[])">
            <summary>
            Returns the median value of an array of any type
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Gaussian3Filter(System.Double[]@)">
            <summary>
            convolves a 3-wide smoothing filter (0.25,0.5,0.25) with an array.
            Can be used multiple times to achieve wider smoothing.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Gaussian3FilterCircular(System.Double[]@)">
            <summary>
            convolves a 3-wide smoothing filter (0.25,0.5,0.25) with a circular array
            Can be used multiple times to achieve wider smoothing.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Median9(System.Double[])">
            <summary>
            Sorts the given array and returns the middle value
            </summary>
            <param name="p">Pixel array to be sorted</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.StdDev9ScaledSquared(System.Int16[])">
            <summary>
            Nine times the square of a real Std Dev, but much faster to compute.
            Can be used to threshold std values
            </summary>
            <param name="n">the numbers array, must have at least 9 element, only the first nine elements are considered</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.StdDev9(System.Int16[])">
            <summary>
            StdDev of an array of nine values. Not as fast as StdDev9ScaledSquared() but computes the "traditional" value of StdDev.
            </summary>
            <param name="n">the numbers array, must have at least 9 element, only the first nine elements are considered</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.StdDev21ScaledSquared(System.Int16[])">
            <summary>
            21 times the square of a real Std Dev, but much faster to compute.
            Can be used to threshold std values
            </summary>
            <param name="n">the numbers array, must have at least 9 element, only the first 21 elements are considered</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.StdDev21(System.Int16[])">
            <summary>
            StdDev of an array of 21 values. Not as fast as StdDev21ScaledSquared() but computes the "traditional" value of StdDev.
            </summary>
            <param name="n">the numbers array, must have at least 21 element, only the first 21 elements are considered</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Vector3ByHomoMat4x4(Claron.WIF.Vector3,System.Double[])">
            <summary>
            Transforms a position vector with the given homogeneous transformation
            matrix.
            </summary>
            <param name="mat">The 4x4 homogeneous transformation matrix, ordered linearly.</param>
            <param name="vec">The vector to transform.</param>
            <returns>The transformed vector.</returns>
            <remarks>Note that the vector is assumed to be a row vector is multiplied by
            the transformation matrix on the right hand side to obtain the result.
            </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Vector3ByHomoMat4x4(Claron.WIF.Vector3_F32,System.Double[])">
            <summary>
            Transforms a position vector with the given homogeneous transformation
            matrix.
            </summary>
            <param name="mat">The 4x4 homogeneous transformation matrix.</param>
            <param name="vec">The vector to transform.</param>
            <returns>The transformed vector.</returns>
            <remarks>Note that the vector is assumed to be a row vector is multiplied by
            the transformation matrix on the right hand side to obtain the result.
            </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Vector3XYZByHomoMat4x4(System.Double,System.Double,System.Double,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Transforms a vector components in place using the given homogeneous transformation matrix
            </summary>
            <param name="X">The position X</param>
            <param name="Y">The position Y</param>
            <param name="Z">The position Z</param>
            <param name="mat">The 4x4 homogeneous transformation matrix.</param>
            <param name="OutX">The output coordinate X</param>
            <param name="OutY">The output coordinate Y</param>
            <param name="OutZ">The output coordinate Z</param>
            <remarks>Note that the vector is assumed to be a row vector is multiplied by
            the transformation matrix on the right hand side to obtain the result.
            </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Mat4x4byMat4x4(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Multiplies two 4 x 4 matrices together.
            </summary>
            <param name="mat1">The first matrix.</param>
            <param name="mat2">The second matrix.</param>
            <returns>Returns the product of the two matrices.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Matrix4x4IsUnity(System.Double[])">
            <summary>
            Returns True if the given matrix is a unit matrix.
            </summary>
            <param name="mat">The matrix to test.</param>
            <returns>True if the give matrix is a unit matrix.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.Matrix4x4Unity">
            <summary>
            Returns a new unity 4x4 matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.Matrix3x3Unity">
            <summary>
            Returns a new unity 3x3 matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixMultiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Multiples two 2D matrices and returns the result.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>The result matrix.</returns>
            <remarks>Throws an exception if the two matrices cannot be multiplied.
            </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixMultiply4x4(System.Double[],System.Double[])">
            <summary>
            Multiples two flattened 4x4 matrices and returns the result.
            </summary>
            <param name="matrix1">The first 4x4 matrix.</param>
            <param name="matrix2">The second 4x4 matrix.</param>
            <returns>The result matrix.</returns>
            <remarks>Throws an exception if the two matrices cannot be multiplied.
            </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixInvert(System.Double[0:,0:])">
            <summary>
            Returns the inverse of a square matrix using Guassian elimination.
            </summary>
            <param name="matrix">The matrix to invert.</param>
            <returns>Returns the inverted matrix.</returns>
            <remarks>Throws an exception if the matrix cannot be inverted.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixInvert4x4(System.Double[])">
            <summary>
            Returns the inverse of a square matrix using Guassian elimination.
            </summary>
            <param name="matrix">The 4x4 flattened matrix to invert.</param>
            <returns>Returns the inverted matrix.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.TransformVectorByMatrix4x4(System.Double@,System.Double@,System.Double@,System.Double[])">
            <summary>
            Transforms a 3-D location in place by multiplying it with a 4x4 homogenous transformation matrix.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.TransformVectorByMatrix4x4(System.Double[],System.Double[],System.Double[])">
            <summary>
            Transforms a 3-D location in place by multiplying it with a 4x4 homogenous transformation matrix.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.TransformVectorByMatrix4x4(Claron.WIF.Vector3,System.Double[],System.Double[])">
            <summary>
            Transforms a 3-D location in place by multiplying it with a 4x4 homogenous transformation matrix.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixTo1D``1(``0[0:,0:])">
            <summary>
            Returns a "flattened" 1D version of a 2D matrix
            </summary>
            <param name="matrix2D">The input matrix to flatten</param>
            <returns>The equivalent 1D matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixTo2D``1(``0[],System.Int32)">
            <summary>
            Returns a 2D version of a 1D matrix
            </summary>
            <param name="matrix1D">The input matrix to convert</param>
            <param name="Columns">The number of elements in each row. Default value = 4</param>
            <returns>The equivalent 2D matrix</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixDeterminant(System.Double[0:,0:])">
            <summary>
            Returns the determinant of a square matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The determinant.</returns>
            <remarks>Throws an exception if the matrix is not square.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixCoFactorMatrix(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the row i, column j cofactor matrix of the given matrix.
            </summary>
            <param name="matrix">The matrix to compute the cofactor matrix
            from.</param>
            <param name="i">The row number.</param>
            <param name="j">The column number.</param>
            <returns>The cofactor matrix.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.MatrixToString(System.Double[0:,0:])">
            <summary>
            Returns a string representation of a matrix.
            </summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>The string representation of the given matrix.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Gradient(System.Int16[])">
            <summary>
            Returns the gradient vector of a 3x3x3 neighborhood using a sobel operator.
            Note that one or more of the components (usually Z) needs to be scaled when spacing is not
            isotropic.
            </summary>
            <param name="n_3x3x3">An array containing the neighbors in X,Y,Z order</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.GetPathToPlotExe">
            <summary>
            Returns the path to the Plot executable.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.PlotGraphXsYs(System.Double[],System.Double[])">
            <summary>
            Plots a graph of y-values against x-values and displays it on the screen.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.PlotGraphXsYs(System.Double[],System.Double[],System.Double[],System.String,System.String,System.String,System.String)">
            <summary>
            Plots a graph and displays it on screen or writes to an output file.
            </summary>
            <param name="xs">The x-values.</param>
            <param name="ys">The y-values.</param>
            <param name="axisRange">The axes range (xmin, xmax, ymin, ymax). Default value = null</param>
            <param name="xlabel">The x-label. Default value = null</param>
            <param name="ylabel">The y-label. Default value = null</param>
            <param name="title">The title of the plot. Default value = null</param>
            <param name="outputFileName">If null then the graph is displayed on screen, otherwise it
            is written to the given output file. Default value = null</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.PlotGraphXsYs(System.Int32[],System.Int32[],System.Int32[],System.String,System.String,System.String,System.String)">
            <summary>
            Plots a graph and displays it on screen or writes to an output file.
            </summary>
            <param name="xs">The x-values.</param>
            <param name="ys">The y-values.</param>
            <param name="axisRange">The axes range (xmin, xmax, ymin, ymax). Default value = null</param>
            <param name="xlabel">The x-label. Default value = null</param>
            <param name="ylabel">The y-label. Default value = null</param>
            <param name="title">The title of the plot. Default value = null</param>
            <param name="outputFileName">If null then the graph is displayed on screen, otherwise it
            is written to the given output file. Default value = null</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.PlotGraphYs(System.Double[],System.Double[],System.String,System.String,System.String,System.String)">
            <summary>
            Plots a graph and displays it on screen or writes to an output file. The x-values are assumed
            to be [0, UBound(ys)].
            </summary>
            <param name="ys">The y-values.</param>
            <param name="axisRange">The axes range (xmin, xmax, ymin, ymax). Default value = null</param>
            <param name="xlabel">The x-label. Default value = null</param>
            <param name="ylabel">The y-label. Default value = null</param>
            <param name="title">The title of the plot. Default value = null</param>
            <param name="outputFileName">If nothing then the graph is displayed on screen, otherwise it
            is written to the given output file. Default value = null</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.PlotGraphYs(System.Int32[],System.Int32[],System.String,System.String,System.String,System.String)">
            <summary>
            Plots a graph and displays it on screen or writes to an output file. The x-values are assumed
            to be [0, UBound(ys)].
            </summary>
            <param name="ys">The y-values.</param>
            <param name="axisRange">The axes range (xmin, xmax, ymin, ymax). Default value = null</param>
            <param name="xlabel">The x-label. Default value = null</param>
            <param name="ylabel">The y-label. Default value = null</param>
            <param name="title">The title of the plot. Default value = null</param>
            <param name="outputFileName">If nothing then the graph is displayed on screen, otherwise it
            is written to the given output file. Default value = null</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.PlotToBitmap(System.Int32,System.Int32,System.Double[],System.Double[],System.Drawing.Bitmap@)">
            <summary>
            Plots a set of values into a bitmap. The caller has responsibility of disposing
            of the bitmap returned.
            </summary>
            <param name="nx">The number of values in the x-direction.</param>
            <param name="ny">The number of values in the y-direction.</param>
            <param name="vals">The values to plot.</param>
            <param name="range">The range of values to plot into the bitmap. If Nothing then the range
            will be calculated from the min and max values in vals.</param>
            <param name="img">The bitmap to plot the values into. If Nothing then the image will be
            created by the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.CalculateGaussianBlurringKernel(System.Double)">
            <summary>
            Calculates the kernel need to Gaussian blurring with a radius of sigma.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.CalculateGaussianEdgeKernel(System.Double)">
            <summary>
            Calculates the kernel needed for edge detection at a scale of sigma.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.PowerOf2GreaterThanOrEqualTo(System.Int32,System.Int32@)">
            <summary>
            Returns the power of 2 which is greater than or equal to the given number.
            </summary>
            <param name="x">The input number.</param>
            <param name="n">The output number which is a power of 2.</param>
            <returns>True if the output is valid, false otherwise.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform1D(System.Double[],System.Double[])">
            <summary>
            Returns the Fourier transform of the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform1D(System.Single[],System.Single[])">
            <summary>
            Returns the Fourier transform of the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform1DInverse(System.Double[],System.Double[])">
            <summary>
            Returns the inverse Fourier transform of the given array.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform1DInverse(System.Single[],System.Single[])">
            <summary>
            Returns the inverse Fourier transform of the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform2D(System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Does the 2D Fourier transform of the given array.
            </summary>
            <param name="nx">The number of values in the x-direction.</param>
            <param name="ny">The number of values in the y-direction.</param>
            <param name="xs">The real values.</param>
            <param name="ys">The imaginary values.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform2D(System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Does the 2D Fourier transform of the given array.
            </summary>
            <param name="nx">The number of values in the x-direction.</param>
            <param name="ny">The number of values in the y-direction.</param>
            <param name="xs">The real values.</param>
            <param name="ys">The imaginary values.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform2DInverse(System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Does the 2D inverse Fourier transform of the given array.
            </summary>
            <param name="nx">The number of values in the x-direction.</param>
            <param name="ny">The number of values in the y-direction.</param>
            <param name="xs">The real values.</param>
            <param name="ys">The imaginary values.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform2DInverse(System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Does the 2D inverse Fourier transform of the given array.
            </summary>
            <param name="nx">The number of values in the x-direction.</param>
            <param name="ny">The number of values in the y-direction.</param>
            <param name="xs">The real values.</param>
            <param name="ys">The imaginary values.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform3D(System.Int32,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Does the 3D Fourier transform of the given array.
            </summary>
            <param name="nx">The number of values in the x-direction.</param>
            <param name="ny">The number of values in the y-direction.</param>
            <param name="nz">The number of values in the z-direction.</param>
            <param name="xs">The real values.</param>
            <param name="ys">The imaginary values.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.FourierTransform3DInverse(System.Int32,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Does the 3D inverse Fourier transform of the given array.
            </summary>
            <param name="nx">The number of values in the x-direction.</param>
            <param name="ny">The number of values in the y-direction.</param>
            <param name="nz">The number of values in the z-direction.</param>
            <param name="xs">The real values.</param>
            <param name="ys">The imaginary values.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.LookupTableSpliner(System.Int16[],System.Double[0:,0:],System.Int16,System.Int16)">
            <summary>
            Updates the contents of a look up table y=Lut(x) by passing a Cutmull-Rom spline through
            a set of given (x,y) pairs. The curve is continuous to the first derivative.
            </summary>
            <param name="Lut">The look up table to update. Must be allocated by the caller.</param>
            <param name="Knots">An Nx2 array of (x,y) locations the mapping curve should pass through.</param>
            <param name="ClampMin"> Default value = 0 </param>
            <param name="ClampMax"> Default value = HFFF </param>
            <remarks>Values below knots(0,0) and above knots(N-1,0) are unmodified.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Sigmoid0To1(System.Double)">
            <summary>
            Maps a value between 0 and 1 through a sigmoid-shaped function to the same range.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Sigmoid0To1WithCenterAndWidth(System.Double,System.Double,System.Double)">
            <summary>
            Maps a value between 0 and 1 through a sigmoid-shaped function to the same range.
            </summary>
            <param name="x0to1">THe source value to map</param>
            <param name="center0to1">X-range location the center or inflection point of the sigmoid.</param>
            <param name="width0to1">X-range of the width of the sigmoid.</param>
            <returns>The computed standard deviation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.StdDev(System.Double[])">
            <summary>
            Computes standard deviation for an array of double.
            </summary>
            <param name="numbers">Numbers that are used to compute the std deviation</param>
            <returns>The computed standard deviation</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.Average(System.Collections.Generic.List{System.Int16},System.Int32)">
            <summary>
            Returns the average of the first Count numbers in a list.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Average(System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns the average of the first Count numbers (or as many as there are).
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Average(System.Int32[])">
            <summary>
            Returns the average of the first Count numbers (or as many as there are).
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Swap``1(``0@,``0@)">
            <summary>
            Swaps two objects of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item1">The first object</param>
            <param name="item2">The second object</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.IndexOfLargest(System.Double,System.Double,System.Double)">
            <summary>
            Returns the index of the largest given values.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Factorial(System.Double)">
            <summary>
            Returns the factorial of the given value.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils._numberOfCombinations">
            <summary>
            Precomputed number of combinations array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.NumberOfCombinations(System.Int32,System.Int32)">
            <summary>
            Returns the number of combinations possible when taking j items from n total items.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.StepFunction(System.Double)">
            <summary>
            Returns the value of the step function. 1 if x >= 0, and 0 if x &lt; 0.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.IndexesOfHighestN(System.Double[],System.Int32)">
            <summary>
            Returns the indexes of the highest N values in a given array, sorted with the
            one indexing the highest value first.
            </summary>
            <param name="A">The values array</param>
            <param name="N">The count of indexes to return</param>
            <returns>An array of the desired indexes</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.IndexesOfLowestN(System.Double[],System.Int32)">
            <summary>
            Returns the indexes of the lowest N values in a given array, sorted with the
            one indexing the lowest value first.
            </summary>
            <param name="A">The values array</param>
            <param name="N">The count of indexes to return</param>
            <returns>An array of the desired indexes.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.B3(System.Int32,System.Double)">
            <summary>
            Returns the value of the i-th cubic B-spline basis function.
            </summary>
            <param name="i">The basis function, 0, 1, 2, or 3.</param>
            <param name="t">The parameter value, should be in range [0, 1].</param>
            <returns>The value of the i-th cubic B-spline basis function.</returns>
            <remarks>An exception is thrown if i is not a valid value, however
            no checks are made on the parameter value t.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.B3(System.Double)">
            <summary>
            Returns the value of the cubic B-spline basis function.
            </summary>
            <param name="t">The parameter value should be in the range [-2, 2].
            </param>
            <returns>The value of the cubic B-spline basis function.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.B3D1(System.Int32,System.Double)">
            <summary>
            Returns the first derivative of the i-th cubic B-spline basis function.
            </summary>
            <param name="i">The basis function, 0, 1, 2, or 3.</param>
            <param name="t">The parameter value, should be in range [0, 1].</param>
            <returns>The value of the first derivative of the i-th cubic B-spline
            basis function.</returns>
            <remarks>An exception is thrown if i is not a valid value, however no
            checks are made on the parameter value t.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.B3D1(System.Double)">
            <summary>
            Returns the first derivative of the cubic B-spline function.
            </summary>
            <param name="t">The parameter value shoudl be in the range [-2, 2].</param>
            <returns>The value of the cubic B-spline basis function.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.B3D2(System.Int32,System.Double)">
            <summary>
            Returns the second derivative of the i-th cubic B-spline basis function.
            </summary>
            <param name="i">The basis function, 0, 1, 2, or 3.</param>
            <param name="t">The parameter value, should be in range [0, 1].</param>
            <returns>The value of the second derivative of the i-th cubic B-spline
            basis function.</returns>
            <remarks>An exception is thrown if i is not a valid value, however no
            checks are made on the parameter value t.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.B3D2(System.Double)">
            <summary>
            Returns the first derivative of the cubic B-spline function.
            </summary>
            <param name="t">The parameter value shoudl be in the range [-2, 2].</param>
            <returns>The value of the cubic B-spline basis function.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.CatRom(System.Int32,System.Double)">
            <summary>
            Returns the value of the i-th Catmull-Rom spline basis function.
            </summary>
            <param name="i">The basis function, 0, 1, 2, or 3.</param>
            <param name="t">The parameter value, should be in range [0, 1].</param>
            <returns>The value of the i-th Catmull-Rom spline basis function.</returns>
            <remarks>An exception is thrown if i is not a valid value, however
            no checks are made on the parameter value t.</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.NormalizedBSpline(System.Int32,System.Double)">
            <summary>
            Returns the value of the normalized B-spline function of order n at value x.
            </summary>
            <param name="n">The order of the spline function.</param>
            <param name="x">The x-value at which to evaluate the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.GenerateVBCodeForNormalizedBSplineFunction(System.Int32)">
            <summary>
            Generates the VB code for the normalized B-spline function of order n.
            </summary>
            <param name="n">The order of the spline function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.NormalizedBSpline0(System.Double)">
            <summary>
            Returns the value of the normalized B-spline function of order 0 at value x.
            </summary>
            <param name="x">The x-value at which to evaluate the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.NormalizedBSpline1(System.Double)">
            <summary>
            Returns the value of the normalized B-spline function of order 1 at value x.
            </summary>
            <param name="x">The x-value at which to evaluate the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.NormalizedBSpline2(System.Double)">
            <summary>
            Returns the value of the normalized B-spline function of order 2 at value x.
            </summary>
            <param name="x">The x-value at which to evaluate the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.NormalizedBSpline3(System.Double)">
            <summary>
            Returns the value of the normalized B-spline function of order 3 at value x.
            </summary>
            <param name="x">The x-value at which to evaluate the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.NormalizedBSpline4(System.Double)">
            <summary>
            Returns the value of the normalized B-spline function of order 4 at value x.
            </summary>
            <param name="x">The x-value at which to evaluate the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.NormalizedBSpline5(System.Double)">
            <summary>
            Returns the value of the normalized B-spline function of order 5 at value x.
            </summary>
            <param name="x">The x-value at which to evaluate the function.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.Centroid(Claron.WIF.Vector3[])">
            <summary>
            Returns the centroid (average position) of the given set of points.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.EigenVectorsAndEigenValues2x2(System.Double[0:,0:],Claron.WIF.Vector2[],System.Double[])">
            <summary>
            Returns the eigenvectors and eigenvalues of the given 2 x 2 matrix.
            </summary>
            <param name="mat">The matrix to calculate the eigenvectors and
            eigenvalues of.</param>
            <param name="eigVecs">The eigenvectors are returned in this 2 x 2
            matrix which must be initialized to the right size before calling this
            function. The eigenvectors are stored in the columns of the matrix.
            </param>
            <param name="eigVals">The 2 eigenvalues are returned in the array which
            must be initialized before calling this function.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Centroid2D(Claron.WIF.Vector2[])">
            <summary>
            Returns the centroid of the given set of points.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.FitEllipseTo2DPointList(Claron.WIF.Vector2[],Claron.WIF.Vector2@,Claron.WIF.Vector2[]@,System.Double[]@,System.Double@)">
            <summary>
            Fits an ellipse to a 2D point list
            </summary>
            <param name="pts">2D array of points</param>
            <param name="ellipseCenter">The center of the ellipse</param>
            <param name="ellipseAxes">The ellipse axes</param>
            <param name="ellipseRadii">The two radii</param>
            <param name="ellipseTiltAngle">The ellipse tilt angle in radians</param>
            <returns>True if ellipse fitting is successful</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.EllipseDistancesTo2DPoints(Claron.WIF.Vector2[],Claron.WIF.Vector2,Claron.WIF.Vector2[],System.Double[],System.Double)">
            <summary>
            Computes the distance between the points and the estimated ellipse 
            </summary>
            <param name="pts">The input 2D point array</param>
            <param name="ellipseCenter">The center of the fitted ellipse</param>
            <param name="ellipseAxes">The two axes</param>
            <param name="ellipseRadii">Ellipse radii</param>
            <param name="ellipseTiltAngle">The tilt angle</param>
            <returns>Distance to the fitted ellipse</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.FitEllipse2DRANSAC(Claron.WIF.Vector2[],Claron.WIF.Vector2@,Claron.WIF.Vector2[]@,System.Double[]@,System.Double@,System.Double)">
            <summary>
            RANSAC fitting of the ellipse, removes outliers
            </summary>
            <param name="pts">The pts to estimate the ellipse from</param>
            <param name="ellipseCenter">The centroid of the fitted ellipse</param>
            <param name="ellipseAxes">The two axes</param>
            <param name="ellipseRadii">The radii of the major and minor axis</param>
            <param name="ellipseTiltAngle">The tilt angle</param>
            <param name="outlierDistThresh">The threshold values that determines the inliers</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.GetRandD(System.Random)">
            <summary>
            Generates a random number in the range [-1, 1]
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.FitSphereToPointList(System.Collections.Generic.List{Claron.WIF.Vector3},System.Double,Claron.WIF.Vector3@,System.Double@,System.Double@)">
            <summary>
            Fits a sphere to a given point list.
            </summary>
            <param name="pList">List of points on the sphere surface that will be used to estimate the sphere parameters.</param>
            <param name="centerTolerance">The required termination tolerance on estimated update of the sphere center.</param>
            <param name="sphereCenter">The estimated center of the fitted sphere.</param>
            <param name="sphereRadius">The estimated radius of the fitted sphere.</param>
            <param name="stdDeviation">The stdDev, or the distribution of the distances of the points to the estimated sphere center</param>
            <returns>True if the optimization converges (deltaCenter is less than centerTolerance).</returns>
            <remarks>This function fits a sphere to a set of points. If the number of points are less than 4 then it automatically
            calls the old circle fit function. A sphere is specified by its center (x0, y0, z0) and its radius R0. Any point on the sphere
            satisfies:
            
            (x-x0)^2 + (y-y0)^2 + (z-z0)^2 = R0^2
            
            The distance of a point (xi, yi) to a sphere can be given by di = ri - R0, where ri = sqrt((xi-x0)^2 + (yi-y0)^2 + (zi-z0)^2)
            Therefore, using the above relation the first step is carried out by minimizing di^2 using linear least squares. Though, the solution
            vector is non-linear but it is linearized to get an initial estimate. This estimate is then fed into a non-linear least squares 
            solver (Gauss-Newton).
            </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.TestCircleFitting">
            <summary>
            Tests circle fitting function.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ThreeRadiiCircleFit3d(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fits a circle to the points a,b,c,
            which are assumed to be linear independent and in polar coordinates.
            </summary>
            <param name="a">Radius to point a on the circle.</param>
            <param name="b">Radius to point b on the circle.</param>
            <param name="c">Radius to point c on the circle.</param>
            <param name="deltaPhi">Angle between ab as well as angle between bc.</param>
            <returns>The radius of the fitted circle.</returns>
            <remarks>
            ad    be
            |    /    cf
            |   /   /
            | g/  /   g=circle center 3d
            | / /
            |//
            *
            a,b,c original polar coordinate circle points
            d,e,f 3d circle points
            </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ThreePointCircleFit3d(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
             <summary>
             Fits a circle to the points a,b,c,
             which are assumed to be linear independent.
             </summary>
             <param name="a">Point a on the circle.</param>
             <param name="b">Point b on the circle.</param>
             <param name="c">Point c on the circle.</param>
             <returns>The center of the fitted circle.</returns>
             <remarks>
             |      c l
             |     /
             |    e=c-b
             |   /     m=circle center 2d
             |  /      n=circle center 3d
             i /
             |/   h perpendicular to plane
             b-f------d------a
             k       a-b     j
            
             a,b,c original 3d circle points
             d,e direction vectors along ab and bc line segments
             h,i,j circle points in transformed uv 2d plane coordinate system
             </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ThreePointCircleFit2d(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
             <summary>
             Fits a circle to the points a,b,c,
             which are assumed to be linear independent and in the x,y plane, i.e. the z component is zero / ignored.
             </summary>
             <param name="a">Point a on the circle.</param>
             <param name="b">Point b on the circle.</param>
             <param name="c">Point c on the circle.</param>
             <returns>The center of the fitted circle, or an invalid vector if the points are co-linear
             or co-located.</returns>
             <remarks>
            
                    c
                   /
                  /
                 e
                /  i
               /     j
              g      h
             b-f-----d-------a
            
             a,b,c circle points
             d,e midpoints along ab and bc line segments
             f,g direction vectors along ab and bc line segments
             h,i normals to ab and bc line segments
             j circle center
             </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.LineLineIntersect(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,System.Double@,System.Double@)">
            <summary>
            Given two lines in 3D defined by two "origin" points and two direction unit vectors,
            efficiently computes the distances from the origins along the direction vectors
            where the two lines are closest to each other (The distances can be negative 
            or 0 if the origins are identical).
            </summary>
            <param name="Origin0">The "origin" point on line 0</param>
            <param name="Origin1"></param>
            <param name="DirUnitV0">The positive distance direction unit vector of line 0</param>
            <param name="DirUnitV1"></param>
            <param name="outDist0">The distance from the origin along line 0 where it is closest
            to line 1. If the lines are parallel and don't overlap, a huge number is returned.</param>
            <param name="outDist1">The distance from the origin along line 1 where it is closest
            to line 0. If the lines are parallel and don't overlap, a huge number is returned.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.LinePlaneIntersect(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3@)">
            <summary>
            Computes the intersection of a line with a plane.
            </summary>
            <param name="ptLine">Any arbitrary point on the line</param>
            <param name="vecLine">Line vector</param>
            <param name="ptPlane">A point on the plane</param>
            <param name="vecPlaneNormal">The plane normal</param>
            <param name="ptIntersection">The point of intersection</param>
            <returns>True if the line and the plane intersect</returns>
            <remarks>vLine or vPlaneNormal may not be normalized</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.PlanePlaneIntersect(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3@,Claron.WIF.Vector3@)">
            <summary>
            Computes the intersection line of two planes.
            </summary>
            <param name="PointOnPlaneA">A point on plane A</param>
            <param name="NormalToPlaneA">A vector normal to plane A</param>
            <param name="PointOnPlaneB">A point on plane B</param>
            <param name="NormalToPlaneB">A vector normal to plane B</param>
            <param name="PointOnIntersectionLine">Output: A point on the intersecting line, 
            or an invalid vector of the planes are parallel.</param>
            <param name="UnitVofIntersectionLine">Output: A direction unit vector of the intersecting line (one of two possible), 
            or an invalid vector if the planes are parallel or a normal vector has 0 length.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.ThreePointPlaneFit3d(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Fits a plane to the points A, B, C
            </summary>
            <param name="pointA">Point A on the plane.</param>
            <param name="pointB">Point B on the plane.</param>
            <param name="pointC">Point C on the plane.</param>
            <returns>The plane normal.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.IntersectionPointOfTwoLines2d(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
             <summary>
             Computes the intersection point of two non-parallel lines in the 2d plane.
             </summary>
             <param name="a">Point a on first line.</param>
             <param name="b">Point b on second line.</param>
             <param name="c">Direction c of first line. Does not need to be normalized.</param>
             <param name="d">Direction d of second line. Does not need to be normalized.</param>
             <returns>The intersection point, or an invalid vector if the two lines are parallel.</returns>
             <remarks>
                       /
                      /
             a-c-----e-------
                    /
                   d
                  b
            
             e = a + s*c = b + t*d
             s = ((bx + t*dx) -ax) / cx
             t = ((ay + s*cy) -by) / dy
             t = ((ay + ((bx + t*dx -ax) / cx)*cy) -by) / dy
            
                         (bx - ax) * cy
                    ay + -------------- - by
                               cx
             -> t = --------------------------------
                             dx * cy
                        dy - -------
                               cx
            
             </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.IntersectionPointOfTwoLineSegments2d(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Returns the position where two 2D line segments, A and B, intersect, or an invalid
            vector if they do not intersect or are parallel (even if they overlap).
            </summary>
            <param name="A0">One end point of segment A</param>
            <param name="A1">Other end point of segment A</param>
            <param name="B0">One end point of segment B</param>
            <param name="B1">Other end point of segment B</param>
            <remarks>See http://local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/ </remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.LineBoxIntersections(Claron.WIF.Box,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3@,Claron.WIF.Vector3@)">
            <summary>
            Computes the locations in which a line segment intersects the bound of an axis-aligned box
            and whether at least part of the line is in the box.
            </summary>
            <param name="box">The box to test against</param>
            <param name="LineEnd0">Coordinates of one end of the line</param>
            <param name="LineEnd1">Coordinates of other end of the line</param>
            <param name="outIntersection0">output: the coordinate of one intersection of the line with the box. Invalid vector if not found.</param>
            <param name="outIntersection1">output: the coordinate of a second intersection of the line with the box. Invalid vector if not found.</param>
            <returns>True iff all or part of the line is inside the box</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.LineSphereIntersections(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,System.Double,Claron.WIF.Vector3@,Claron.WIF.Vector3@)">
            <summary>
            Computes the locations in which a line segment intersects with a sphere
            </summary>
            <param name="outIntersectionCloseToEnd0">Output: the interesection point closer to End0 (or invalid if no intersections)</param>
            <param name="outIntersectionCloseToEnd1">Output: the interesection point closer to End1
            (same as outIntersectionCloseToEnd0 if only one intersection point, or invalid if no intersections)</param>
            <param name="LineEnd0"></param>
            <param name="LineEnd1"></param>
            <param name="SphereCenter"></param>
            <param name="SphereRadius"></param>
            <returns>True iff the line intersects the sphere</returns>
            <remarks>Based on http://local.wasp.uwa.edu.au/~pbourke/geometry/sphereline/</remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ClosestPositionOnALine(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Given a point and an infinite line in 3-space, returns the position along the line
            which is nearest to the point, ie, the projection of the point on the line.
            </summary>
            <param name="Point">The point</param>
            <param name="LineA">A point on the line</param>
            <param name="LineB">Another point on the line (not the same as LineA)</param>
            <returns>The closest position on the line.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ClosestPointOnLineSegment(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Given a point and a bounded line segment in 3-space, returns the position along the line
            segment which is nearest to the point. If the point projects beyond one end or the other
            that end is returned.
            </summary>
            <param name="Point">The point</param>
            <param name="LineBgn">The line segment beginning.</param>
            <param name="LineEnd">The line segment end.</param>
            <returns>The closest position on the line segment.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.DistanceBetweenPointAndLineSegment(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Given a point and a line segment in 3D, efficiently computes and returns the 
            distance to the closest point on the line segment (either end or between them).
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ClosestPositionOnAPlane(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Given a point and a plane in 3-space, returns the position on the plane
            which is nearest to the point, ie, the projection of the point on the plane.
            </summary>
            <param name="Point">The point</param>
            <param name="PlanePointA">A point on the plane</param>
            <param name="PlanePointB">Another point on the plane (not the same as PlanePointA)</param>
            <param name="PlanePointC">Another point on the plane (cannot be co-linear with A and B)</param>
            <returns>The closest position on the line.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.GetPointsOn3DLine(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Returns an array of points for drawing a 3D line on an XY grid.
            The line is specified in the coordinates of the grid on which it would be drawn.
            The first and last point's X and Y coordinates are rounded to the nearest pixel before
            the points are generated.
            </summary>
            <param name="p0">One end point of the line</param>
            <param name="p1">Other end point of the line</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.FitPlaneToPoints(Claron.WIF.Vector3[],Claron.WIF.Vector3@,Claron.WIF.Vector3@)">
            <summary>
            Fits a plane to a given set of points.
            </summary>
            <param name="pts">The points to use to fit the plane to.</param>
            <param name="cog">The center of gravity of the plane.</param>
            <param name="normal">The normal to the plane.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.FitPlaneToPointsWithOutlierRemoval(Claron.WIF.Vector3[],Claron.WIF.Vector3,System.Double,System.Double,System.Int32,Claron.WIF.Vector3@,Claron.WIF.Vector3@)">
            <summary>
            Fits a plane to a given set of points with outliers removal.
            </summary>
            <param name="pts">The points to use to fit the plane to.</param>
            <param name="planeNormal">The expected direction of the plane normal. 
            Needs to be only within 90 degrees correct 
            as is merely defines which direction of the fitted normal is considered positive/negative.</param>
            <param name="maxDistanceToPlaneNegativeSide">The maximum distance that a point can be to the plane
            for it to be included in the fitting (negative side).</param>
            <param name="maxDistanceToPlanePositiveSide">The maximum distance that a point can be to the plane
            for it to be included in the fitting (positive side).</param>
            <param name="maxIterations">How often to do the fitting.  
            Each subsequent iteration operates only on the points that survived the prior round of outliers removal.</param>
            <param name="cog">The center of gravity of the plane.</param>
            <param name="normal">The normal to the plane.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.AxesOfInertia(Claron.WIF.Vector3[],Claron.WIF.Vector3@,Claron.WIF.Vector3[]@,System.Double[]@)">
            <summary>
            Calculates the principal axes of inertia of a set of 3D points.
            Each point is considered as having an equal "mass" and the axes are computed
            around the "center of gravity" (average position) of the points.
            The axes characterize the shape of an object, and could thus be used to align and 
            objects when initializing a full registration.
            </summary>
            <param name="pts">The input 3D points.</param>
            <param name="CoG">The average position of the points.</param>
            <param name="Axes">The 3 (perpendicular) unit vectors of the principle axes, 
            sorted by increasing moment magnitude. Note that each axis can be described
            by either one of two symmetrically opposing vectors. </param>
            <param name="Moments">The corresponding magnitude of the moments around each of the axes.
            May be 0 if there isn't sufficient number or distribution of points.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.SqrtApproximated(System.Single)">
            <summary>
            http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Approximations_that_depend_on_IEEE_representation
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.SqrtInvApproximatedError050percent(System.Single)">
            <summary>
            http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Approximations_that_depend_on_IEEE_representation
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.SqrtInvApproximatedError002percent(System.Single)">
            <summary>
            http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Approximations_that_depend_on_IEEE_representation
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.NumberToSignificantDigitString(System.Double,System.Int32)">
            <summary>
            For a given double number, returns a string representing it with the desired number of 
            digits (both integer and fraction). If the integer part requires more digits than allocated,
            it would still be fully shown (with the decimal dot on the right)
            </summary>
            <param name="number">The number as double.</param>
            <param name="numDigits">The desired number of significant digits.</param>
            <returns>The number as string.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.MathUtils.Regression">
            <summary>
            This class represents a polynomial Y(x) of order N, between 0 and 25 (inclusive), created by
            a least-squared-error curve fitting to a set of samples.
            It is typically used for smoothing a large number of samples Y(x) when it is known that Y(x)
            is unique and there are at most N-1 inflection points in the desired Y(x) function.
            The polynomical is of the form Y = C(0)*X^0 + C(1)*X^1 + C(2)*X^2 + ...
            where C(i) is called the coefficient of exponent i.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Regression.Coeff(System.Int32)">
            <summary>
            The coefficient associated with a given exponent level
            </summary>
            <param name="Exponent"></param>
        </member>
        <member name="M:Claron.WIF.MathUtils.Regression.AddSample(System.Double,System.Double,System.Double)">
            <summary>
            Add an input sample
            </summary>
            <param name="X">The sample's independent (x) value</param>
            <param name="YofX">The function Y(x) sampled at that location</param>
            <param name="Weight">An optinoal positive value indicating how much weight this sample
            should be given relative to other samples. Samples with non-positive weight are ignored</param>
            <remarks></remarks>a
        </member>
        <member name="M:Claron.WIF.MathUtils.Regression.Value(System.Double)">
            <summary>
            The Y(x) value of the fitted polynomial
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.Regression.#ctor(System.Int32)">
            <summary>
            Creates a new regression at the given polynomial order.
            </summary>
            <param name="PolynomialOrder"></param>
        </member>
        <member name="M:Claron.WIF.MathUtils.Regression.NewFromSamplesWithoutOutliers(System.Collections.Generic.List{Claron.WIF.Vector2},System.Int32,System.Double)">
            <summary>
            Generates a regression of a desired order from a set of samples after iteratively
            removing outliers. Very useful for completely eliminating the effect of large local
            deviations/errors on a general trend line of low order (1 or 2).
            </summary>
            <param name="SamplesList">A list of the samples: X, Y(x). Invalid vectors would be ignored.</param>
            <param name="PolynomialOrder"></param>
            <param name="OutlierFractionToRemove">In the range 5-95%.
            For efficiency, the fraction that will actually be removed may be somewhat higher or lower.</param>
            <returns>The new regression object</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.Regression.NewFromSamplesWithDamping(System.Collections.Generic.List{Claron.WIF.Vector2},System.Int32,System.Double)">
            <summary>
            Generates a regression Y(X) of a desired polynomial order from a set of samples while damping their 
            oscillations within a given range of X values. Particularly effective in preventing the polynomial
            curve from going "wild" in regions with few or no samples (ex, extrapolation), or for allowing many
            local bends while still keeping a smooth overall curve.
            </summary>
            <param name="Samples">A list of the samples: X, Y(x). Invalid vectors would be ignored.</param>
            <param name="PolynomialOrder">The desired order to use. If the order is less than 2, a standrad Regression
            is returned (since no damping is needed)</param>
            <param name="Damping0to1">Controls the amount of damping to apply, in the range 0 to 1</param>
            <returns>The new regression object</returns>
        </member>
        <member name="P:Claron.WIF.MathUtils.Regression.PolynomialOrder">
            <summary>
            The order of the polynomial. The regression curve has a maximum of (order-1)
            inflection points. When set, resets and initializes the regression.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.Regression.SamplesCount">
            <summary>
            Provides the number of samples used for the regression.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.Regression.SamplesWeightsSum">
            <summary>
            Provides the total weight of the samples used for the regression.
            </summary>
        </member>
        <member name="T:Claron.WIF.MathUtils.RandomGaussian">
            <summary>
            Class for generating random numbers with a Gaussian distribution. Implemented using the
            polar form of the Box-Muller transform.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.RandomGaussian._randU">
            <summary>
            Random number generator with a uniform distribution.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.RandomGaussian._randV">
            <summary>
            Random number generator with a uniform distribution.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.RandomGaussian._mu">
            <summary>
            The mean value.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.RandomGaussian._sigma">
            <summary>
            The standard deviation.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.RandomGaussian.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new random number generator with a Gaussian distribution.
            </summary>
            <param name="mu">The mean.</param>
            <param name="sigma">The standard deviation.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.RandomGaussian.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a new random number generator with a Gaussian distribution.
            </summary>
            <param name="mu">The mean.</param>
            <param name="sigma">The standard deviation.</param>
            <param name="seedU">Seed value for the uniform random number generator.</param>
            <param name="seedV">Seed value for the uniform random number generator.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.RandomGaussian.NextDouble">
            <summary>
            Returns the next random value.
            </summary>
        </member>
        <member name="T:Claron.WIF.MathUtils.ArrayStats">
            <summary>
            Computes statistics for an array of F64 values
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.WriteFunctionWith2DerivToCsvFile(System.String,System.String,System.Int32)">
             <summary>
            
             </summary>
             <param name="fName"></param>
             <param name="name"> Default value = "patient"</param>
             <param name="fileNumber"> Default value = 0</param>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.CalculateMeanAndStdDeviation(System.Double[],System.Double@,System.Double@)">
            <summary>
            Calculates the mean and std deviation of the given array.
            </summary>
            <param name="xs">The array to calculate the mean and standard deviation from.</param>
            <param name="mean">The mean value (out parameter).</param>
            <param name="stdDev">The standard deviation value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.ToF64(System.Int32[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="numbersI32"></param>
             <param name="kMin"> Default value = 0</param>
             <param name="kMax"> Default value = 0</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.ToI32(System.Double[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="numbersF64"></param>
             <param name="kMin"> Default value = 0</param>
             <param name="kMax"> Default value = 0</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.MedianSmooth10Percent(System.Double[])">
            <summary>
            Sets each number in the array to the median value of a sliding window
            of size +/- 5% of the array length, but at least +/- 3 numbers.
            </summary>
            <param name="numbers"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.MedianSmooth(System.Double[],System.Int32)">
            <summary>
            Sets each number in the array to the median value of a sliding window.
            </summary>
            <param name="numbers">The numbers to median smooth.</param>
            /// <param name="filterRadius">The sliding window width.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.MedianSmoothBiased(System.Double[],System.Int32,System.Double)">
            <summary>
            Sets each number in the array to the biased median value of a sliding window,
            </summary>
            <param name="numbers">The numbers to median smooth.</param>
            <param name="filterRadius">The sliding window width.</param>
            <param name="sortedValuesFraction">The bias fraction,
            where "biased" is defined as fractional position within the sorted list of values in the window.
            A fraction of 0.5 is standard median smoothing.
            A fraction of 0.75 returns numbers larger  than the median.
            A fraction of 0.25 returns numbers smaller than the median.
            </param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.TentAverage10percentNoZeroEnds(System.Double[])">
            <summary>
            computes the tent filter average of the array of numbers given
            the tent filter extends to +/- 5% of the total size of the array
            the return array is as long as the input array
            the outer 5% numbers are filtered with partial tents normalized to sum to 1
            </summary>
            <param name="numbers">the numbers to filter</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.TentAverageNoZeroEnds(System.Double[],System.Int32)">
            <summary>
            computes the tent filter average of the array of numbers given
            the tent filter extends to +/- filterRadius numbers
            the return array is as long as the input array
            the outer filterRadius numbers are filtered with partial tents normalized to sum to 1
            </summary>
            <param name="numbers">the numbers to filter</param>
            <param name="filterRadius">the radius of the filter</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.TentAverage10percentNoZeroEnds(System.Int64[])">
            <summary>
            computes the tent filter average of the array of numbers given
            the tent filter extends to +/- 5% of the total size of the array
            to keep correspondence easy, the return array is as long as the input array
            but the outer 5% numbers are left blank, i.e. 0
            </summary>
            <param name="numbers"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.TentAverage10percentNoZeroEnds(System.Int32[])">
            <summary>
            computes the tent filter average of the array of numbers given
            the tent filter extends to +/- 5% of the total size of the array
            to keep correspondence easy, the return array is as long as the input array
            but the outer 5% numbers are left blank, i.e. 0
            </summary>
            <param name="numbers"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.TentAverage10percent(System.Double[])">
            <summary>
            computes the tent filter average of the array of numbers given
            the tent filter extends to +/- 5% of the total size of the array
            to keep correspondence easy, the return array is as long as the input array
            but the outer 5% numbers are left blank, i.e. 0
            </summary>
            <param name="numbers"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.CompactToBelowAverage(System.Int32[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the numbers in the array that are below the average.
            The computation is constraint to the subset of numbers up to and including the one at index maxI.
            </summary>
            <param name="numbers">The numbers to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of numbers below the average.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.CompactToAboveAverage(System.Int32[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the numbers in the array that are above the average.
            The computation is constraint to the subset of numbers up to and including the one at index maxI.
            </summary>
            <param name="numbers">The numbers to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of numbers above the average.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.Derivative(System.Double[])">
            <summary>
            computes the first derivative by central difference approximation
            to keep correspondence easy, the return array is as long as the input array
            but the outer most number is just a scaled nearest neighbor difference
            </summary>
            <param name="numbers"></param>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.Derivative(System.Int64[])">
            <summary>
            computes the first derivative by central difference approximation
            to keep correspondence easy, the return array is as long as the input array
            but the outer most number is just a scaled nearest neighbor difference
            </summary>
            <param name="numbers"></param>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.Derivative(System.Int32[])">
            <summary>
            computes the first derivative by central difference approximation
            to keep correspondence easy, the return array is as long as the input array
            but the outer most number is just a scaled nearest neighbor difference
            </summary>
            <param name="numbers"></param>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.DerivativeSecond(System.Double[])">
            <summary>
            Returns the second derivative of the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalMaximaI(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the indices to the local maxima in the given index range.
            Might stop early looking for maxima, if the maxima count is restricted by MaximaMaxCount
            No context is looked at if a sub-index-range is specified, i.e. for a single number range,
            that number is interpreted as maximum.
            </summary>
            <param name="numbers">The numbers to look for maxima in.</param>
            <param name="bgnI">The index at which to start looking for maxima.</param>
            <param name="endI">The index at which to stop looking for maxima. If endI less than bgnI then reverse directoin is implied.</param>
            <param name="MaximaMaxCount">When this count is reached looking for further maxima is skipped.</param>
            <returns>And array of the indices to the local maxima.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.GradientDeltas(System.Single[])">
            <summary>
            For each interval between a local max and a local min computes
            the delta between the extrema and
            the index of the interval center.
            </summary>
            <param name="numbers"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.GradientDeltaEnds(System.Single[])">
            <summary>
            For each interval between a local max and a local min computes
            the delta between the extrema and
            the index of the interval end.
            </summary>
            <param name="numbers"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalExtrema(System.Double[])">
            <summary>
            Finds all extrema (min and max) in the array.
            In case of a plateau the center of the plateau is returned as extrema index.
            </summary>
            <param name="numbers"></param>
            <returns>An array of indices into the array indicating the extrema positions.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.ZeroCrossings(System.Double[])">
            <summary>
            Finds all zero crossings in the array.
            In case of a plateau at zero the center of the plateau is returned as zero crossing index.
            For zero crossings that do not contain an actual value 0 in the array the index before the
            crossing point is actually used.
            </summary>
            <param name="numbers"></param>
            <returns>An array of indices into the array indicating the zero crossings positions.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalExtremaSkipZero(System.Double[])">
            <summary>
            Finds all extrema (min and max) in the array.
            In case of a plateau the center of the plateau is returned as extrema index.
            If an extrema has the absolute value zero, it is ignored
            </summary>
            <param name="numbers"></param>
            <returns>An array of indices into the array indicating the extrema positions.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.RegionalMaxima(System.Int32,System.Double[],System.Int32[])">
            <summary>
            reduces a given list of local maxima indices to the subset that
            contains all regional largest numbers.
            The region is defined as +/- regionRadius window on the number array
            </summary>
            <param name="regionRadius"></param>
            <param name="numbers"></param>
            <param name="localMaximaI"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.RegionalMinima(System.Int32,System.Double[],System.Int32[])">
            <summary>
            reduces a given list of local minima indices to the subset that
            contains all regional largest numbers.
            The region is defined as +/- regionRadius window on the number array
            </summary>
            <param name="regionRadius"></param>
            <param name="numbers"></param>
            <param name="localMinimaI"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalExtremaRemoveInsignificant(System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="valsInput"></param>
            <param name="maxDiffBetweenExtremaConsideredInsignificant"></param>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.MergeIndexArrays(System.Int32[],System.Int32[])">
            <summary>
            merges two index arrays into a single new one.
            They are both assumed to be sorted ascending, and the result will be sorted ascending as well.
            </summary>
            <param name="idxArrayA"></param>
            <param name="idxArrayB"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.Maximum(System.Double[])">
            <summary>
            Returns the maximum value in the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.Maximum(System.Int32[])">
            <summary>
            Returns the maximum value in the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.Minimum(System.Double[])">
            <summary>
            Returns the minimum value in the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.MinimumI(System.Int32[])">
            <summary>
            Returns the index of the minimum value in the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.Range(System.Int32[])">
            <summary>
            Returns the minimum value in the given array.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalMaxBounds(System.Int32,System.Double[])">
            <summary>
            Finds the local maximum influence zone, i.e. all numbers that go continuously down hill from the maximum.
            </summary>
            <param name="maxI"></param>
            <param name="numbers"></param>
            <returns>The indices into the array indicating the left and right local max bounds.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalMinBounds(System.Int32,System.Double[])">
            <summary>
            Finds the local minimum influence zone, i.e. all numbers that go continuously up hill from the minimum.
            </summary>
            <param name="minI"></param>
            <param name="numbers"></param>
            <returns>The indices into the array indicating the left and right local min bounds.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalSlopeDownBounds(System.Int32,System.Double[])">
            <summary>
            Finds the local slope influence zone, i.e. all numbers that go continuously down left and right of idx.
            </summary>
            <param name="idx"></param>
            <param name="numbers"></param>
            <returns>The indices into the array indicating the left and right local slope bounds.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalSlopeUpBounds(System.Int32,System.Double[])">
            <summary>
            Finds the local slope influence zone, i.e. all numbers that go continuously up left and right of idx.
            </summary>
            <param name="idx"></param>
            <param name="numbers"></param>
            <returns>The indices into the array indicating the left and right local slope bounds.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalMaximaAboveThresh(System.Double[],System.Double)">
            <summary>
            Fills an array of indices to the positions of all local maxima that exceed maximaValueThreshold
            </summary>
            <param name="numbers"></param>
            <param name="maximaValueThreshold">maxima must be above this value to be recorded</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalMaximaPositionStep(System.Double[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Starting from pos go to stepI direction. After first local maximum found, continue going for not more
            then intervalToCheck steps looking for higher maximum if exists.
            </summary>
            <param name="func"></param>
            <param name="pos"></param>
            <param name="stepI"></param>
            <param name="intervalToCheck"> Default value = 20</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.LocalMinimaPositionStep(System.Double[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Starting from pos go to stepI direction. After first local minimum found, continue going for not more
            then intervalToCheck steps looking for lower minimum if exists.
            </summary>
            <param name="func"></param>
            <param name="pos"></param>
            <param name="stepI"></param>
            <param name="intervalToCheck"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.NextLocalMinIdx(System.Double[],System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Finds the index of next local minimum in the indicated direction.
            </summary>
            <param name="numbers">The array of numbers to look in.</param>
            <param name="startIdx">The position to start at.</param>
            <param name="increment">1: look forward, -1: look backward</param>
            <param name="threshold">look only for minima below this value</param>
            <param name="lookAhead">number of steps to look ahead at a local minimum found.
            If the lookAhead location has an even lower value, keep going to skip this noise min.</param>
            <returns>The index of the minimum.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.NextLocalMaxIdx(System.Double[],System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Finds the index of next local maximum in the indicated direction.
            </summary>
            <param name="numbers">The array of numbers to look in.</param>
            <param name="startIdx">The position to start at.</param>
            <param name="increment">1: look forward, -1: look backward</param>
            <param name="threshold">The value the next maximum has to exceed to be considered</param>
            <param name="lookAhead">number of steps to look ahead at a local maximum found.
            If the lookAhead location has an even higher value, keep going to skip this noise max.</param>
            <returns>The index of the maximum.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.TopMaximaI(System.Double[],System.Int32[],System.Int32)">
            <summary>
            Finds the top (largest valued) maxima in the array of numbers.
            </summary>
            <param name="numbers">The array of numbers to look in.</param>
            <param name="maximaI">An array of indices into the numbers array of the positions that should be considered for maxima computation.</param>
            <param name="numMaximaDesired">The number of maxima desired, will be reduced, if the maximaI array has fewer elements.</param>
            <returns>An array of indices to the top maxima, sorted from largest maximum on down (descending in maxima values, not in index values).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.TopMinimaI(System.Double[],System.Int32[],System.Int32)">
            <summary>
            Finds the top (smallest valued) minima in the array of numbers.
            </summary>
            <param name="numbers">The array of numbers to look in.</param>
            <param name="minimaI">An array of indices into the numbers array of the positions that should be considered for minima computation.</param>
            <param name="numMinimaDesired">The number of minima desired, will be reduced, if the maximaI array has fewer elements.</param>
            <returns>An array of indices to the top minima, sorted from smallest minima on up (ascending in minima values, not in index values).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.ValsAtIndices(System.Double[],System.Int32[])">
            <summary>
            Finds the index of next local maximum in the indicated direction.
            </summary>
            <param name="numbers">The array of numbers to look in.</param>
            <param name="indices">An array of indices into the numbers array of the positions that should be looked up.</param>
            <returns>An array of numbers corresponding to the given indices array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.NextLocalThreshIdx(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Finds the index of next local threshold exceeding value in the indicated direction.
            </summary>
            <param name="numbers">The array of numbers to look in.</param>
            <param name="startIdx">The position to start at.</param>
            <param name="increment">1: look forward, -1: look backward</param>
            <param name="threshold"></param>
            <returns>The index at which the threshold is exceeded; -1 if the threshold is never exceeded.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.SlidingWindowMeanAndStdDev(System.Double[],System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Computes the mean and standard deviation along the values array into two corresponding result arrays.
            Each result array entry is computes from the values in the values array within the radius given.
            The values at both  ends of the array will be replicated from
                the first inner values that have a complete window to work with.
            </summary>
            <param name="values">Array of values to compute the statistics on.</param>
            <param name="windowRadius">Radius of the sliding window. Thus statistics are computed from 2*radius+1 values.</param>
            <param name="mean">Output, the array of computed means.</param>
            <param name="stdDev">Output, the array of computed standard deviations.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MathUtils.ArrayStats.ToString">
            <summary>
            Generates a "(12, 1.2, 0.012)" string representation.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.ArrayStats.Min">
            <summary>
            The minimum value in the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.ArrayStats.Max">
            <summary>
            The maximum value in the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.ArrayStats.Avg">
            <summary>
            The average value in the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.ArrayStats.Std">
            <summary>
            The standard deviation of the values in the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.ArrayStats.Numbers">
            <summary>
            The numbers in the array.
            </summary>
        </member>
        <member name="T:Claron.WIF.MathUtils.OptimizerSimplex">
            <summary>
            Class which maximizes a single-valued function of several variables.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._evaluateDel">
            <summary>
            The evaluation delegate.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._nParams">
            <summary>
            The number of parameters in the function evaluation delegate which are to be optimized.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._trials">
            <summary>
            The set of trials.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._maxIterations">
            <summary>
            The maximum number of iterations for the optimization.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._fTol">
            <summary>
            The convergence tolerance.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._fValues">
            <summary>
            The function values for each trial.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._bi">
            <summary>
            The index of the best set of parameter values.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._pValues">
            <summary>
            The parameter values.
            </summary>
        </member>
        <member name="F:Claron.WIF.MathUtils.OptimizerSimplex._it">
            <summary>
            The number of iterations taken.
            </summary>
        </member>
        <member name="M:Claron.WIF.MathUtils.OptimizerSimplex.#ctor(Claron.WIF.MathUtils.OptimizerSimplex.EvaluateDelegate,System.Int32,System.Double[][],System.Int32,System.Double)">
            <summary>
            Creates a new simplex optimizer.
            </summary>
            <param name="evaluateDel">The function evaluation delegate.</param>
            <param name="nParams">The number of parameters in the evaluation function.</param>
            <param name="trials">The initial set of trial parameter values. There should be
            one more set of trials than the number of parameters. Note that this array will be modified
            after the Optimize() function is called.</param>
            <param name="maxIterations">The maximum number of iterations for the optimization.</param>
            <param name="fTol">The convergence tolerance.</param>
        </member>
        <member name="M:Claron.WIF.MathUtils.OptimizerSimplex.Optimize">
            <summary>
            Optimizes the parameters of the function which were used to initialize this OptimizerSimplex
            object.
            </summary>
            <returns>Returns the best value.</returns>
        </member>
        <member name="M:Claron.WIF.MathUtils.OptimizerSimplex.SimplexCalculateSum(System.Double[])">
            <summary>
            Calculates the sum of the coordinate values of the vertices forming the simplex.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.OptimizerSimplex.Parameters">
            <summary>
            Returns the best set of parameter values. Should be read after Optimize() has been
            called otherwise an exception will be thrown.
            </summary>
        </member>
        <member name="P:Claron.WIF.MathUtils.OptimizerSimplex.nIterations">
            <summary>
            The number of iterations taken. Should be read after Optimize() has been called.
            </summary>
        </member>
        <member name="T:Claron.WIF.MathUtils.OptimizerSimplex.EvaluateDelegate">
            <summary>
            A delegate which evaluates the function to be optimized for the given set of values.
            </summary>
            <param name="vs">The parameter values to use in the evaluation function.</param>
            <returns>The evaluated value.</returns>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.NextPermutation(System.Int32[])">
            <summary>
            Swaps the array elements is place to adwance to the next lexiographical ordered permutation.
            If the this array contains distinct numbers, i.e. {1,2,3,4,5,6,...,n} 
              then all n! permutations are traversed.
            If the this array contains only tvo number values, i.e. {1,1,1,1,1,2,2} 
              then all permutations of choosing subsets are traversed 
              (the positions of the '1' numbers indicate which index of the set to pick for the subset).
            </summary>
            <param name="me"></param>
            <returns>True if advancing to the next permutation was possible.
            False if no change to the array was made because it is already is the state of last one in lexiographical order.</returns>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.Concatenate(System.Int32[],System.Int32[])">
            <summary>
            Returns a new array which is the concatenation of the given arrays.
            </summary>
            <param name="a">The first array.</param>
            <param name="b">The second array.</param>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.Rearrange``1(``0[],System.Int32[])">
            <summary>
            Rearranges the given array so that the element at location i in the new array can be
            found at indices[i] in the original array.
            </summary>
            <param name="vals">The array to rearrange.</param>
            <param name="indices">The indices to use to rearrange the array.</param>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.CompactToAboveAverage(System.Int32[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the values in the array that are above the average.
            The computation is constraint to the subset of values up to and including the one at index maxI.
            </summary>
            <param name="vals">The vals to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of vals above the average.</returns>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.CompactToAboveAverage(System.Int16[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the values in the array that are above the average.
            The computation is constraint to the subset of values up to and including the one at index maxI.
            </summary>
            <param name="vals">The vals to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of vals above the average.</returns>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.CompactToAboveAverage(System.Double[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the values in the array that are above the average.
            The computation is constraint to the subset of values up to and including the one at index maxI.
            </summary>
            <param name="vals">The vals to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of vals above the average.</returns>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.CompactToBelowAverage(System.Int32[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the values in the array that are below the average.
            The computation is constraint to the subset of values up to and including the one at index maxI.
            </summary>
            <param name="vals">The vals to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of vals below the average.</returns>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.CompactToBelowAverage(System.Int16[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the values in the array that are below the average.
            The computation is constraint to the subset of values up to and including the one at index maxI.
            </summary>
            <param name="vals">The vals to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of vals below the average.</returns>
        </member>
        <member name="M:Claron.WIF.ArrayExtension.CompactToBelowAverage(System.Double[],System.Int32)">
            <summary>
            Compacts (copies to consecutive array slots) the values in the array that are below the average.
            The computation is constraint to the subset of values up to and including the one at index maxI.
            </summary>
            <param name="vals">The vals to compact.</param>
            <param name="maxI">The last array index to consider for comparing.</param>
            <returns>The count of vals below the average.</returns>
        </member>
        <member name="T:Claron.WIF.Matrix">
            <summary>
            Class to represent matrices.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Matrix._vals">
            <summary>
            The matrix values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.ValueGet(System.Int32,System.Int32)">
            <summary>
            Get Function for matrix element in row i, column j.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Matrix.ValueSet(System.Int32,System.Int32,System.Double)">
            <summary>
            Set Function for matrix element in row i, column j.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="NewValue">The NewValue to set</param>
        </member>
        <member name="F:Claron.WIF.Matrix._nRows">
            <summary>
            The number of rows in the matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Matrix._nCols">
            <summary>
            The number of columns in the matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new matrix.
            </summary>
            <param name="nRows">The number of rows in the matrix.</param>
            <param name="nCols">The number of columns in the matrix.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Initializes a new matrix with the given array. Assumes vals() is an array
            containing nRows x nCols elements.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.Clone">
            <summary>
            Returns a clone of this matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.InvertMe">
            <summary>
            Inverts this matrix. Throws an exception if the matrix cannot be inverted.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.Inverse">
            <summary>
            Returns a new matrix which is the inverse of this matrix. Throws an exception if the matrix
            cannot be inverted.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.TransposeMe">
            <summary>
            Transposes this matrix.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.IdentityMe">
            <summary>
            Turns this matrix into an identity matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.Identity">
            <summary>
            Returns a new identity matrix which is the same size as this matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.RandomizeMe(System.Double,System.Double)">
            <summary>
            Randomizes this matrix.
            </summary>
            <param name="min">The minimum value which the elements in the matrix can take. Default value = -1</param>
            <param name="max">The maximum value which the elements in the matrix can take. Default value = 1</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.Randomize(System.Double,System.Double)">
            <summary>
            Randomizes this matrix.
            </summary>
            <param name="min">The minimum value which the elements in the matrix can take. Default value = -1</param>
            <param name="max">The maximum value which the elements in the matrix can take. Default value = 1</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Matrix.EigensystemSymmetric(Claron.WIF.VectorN[]@,System.Double[]@)">
            <summary>
            Calculates the eigenvectors and eigenvalues of this matrix which is assumed to be symmetric.
            If the matrix is not symmetric then an exception is thrown.
            </summary>
            <param name="eigenvectors">The eigenvectors are returned in this array.</param>
            <param name="eigenvalues">The eigenvalues, ordered in increasing size, are returned in this
            array.</param>
        </member>
        <member name="M:Claron.WIF.Matrix.EigensystemReal(Claron.WIF.VectorNComplex[]@,Claron.WIF.Complex[]@)">
            <summary>
            Calculates the eigenvectors and eigenvalues of this matrix.
            </summary>
            <param name="eigenvectors">The eigenvectors are returned in this array.</param>
            <param name="eigenvalues">The eigenvalues are returned in this array.</param>
        </member>
        <member name="M:Claron.WIF.Matrix.SolveLinearSystem(Claron.WIF.Matrix)">
            <summary>
            Solves the linear system AX=B, using linear least squares.
            </summary>
            <param name="bMatrix">The B Matrix.</param>
            <returns>The Solution Matrix.</returns>
        </member>
        <member name="M:Claron.WIF.Matrix.ToVector3">
            <summary>
            Converts this matrix into a Vector3 object. The matrix must have 3 rows and 1 column otherwise an
            exception is thrown.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.ToString">
            <summary>
            Returns a string representation of the matrix.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.op_Multiply(Claron.WIF.Matrix,Claron.WIF.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.op_Multiply(System.Double,Claron.WIF.Matrix)">
            <summary>
            Multiples by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.op_Multiply(Claron.WIF.Matrix,Claron.WIF.VectorN)">
            <summary>
            Multiplies a matrix by a column vector.
            </summary>
            <param name="a">The matrix.</param>
            <param name="b">The vector.</param>
        </member>
        <member name="M:Claron.WIF.Matrix.op_Multiply(Claron.WIF.VectorN,Claron.WIF.Matrix)">
            <summary>
            Multiplies a row vector by a matrix.
            </summary>
            <param name="a">The vector.</param>
            <param name="b">The matrix.</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Matrix.op_Division(Claron.WIF.Matrix,System.Double)">
            <summary>
            Divides matrix by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.op_Addition(Claron.WIF.Matrix,Claron.WIF.Matrix)">
            <summary>
            Adds two matrices.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.op_Subtraction(Claron.WIF.Matrix,Claron.WIF.Matrix)">
            <summary>
            Subtracts b from a.
            </summary>
        </member>
        <member name="M:Claron.WIF.Matrix.Test">
            <summary>
            Tests the matrix class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Matrix.Values">
            <summary>
            Returns the values of the matrix.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Matrix.NRows">
            <summary>
            The number of rows in the matrix.
            </summary>
        </member>
        <member name="P:Claron.WIF.Matrix.NCols">
            <summary>
            The number of columns in the matrix.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.MatrixComplex">
            <summary>
            Class to represent matrices of complex numbers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.MatrixComplex._vals">
            <summary>
            The matrix values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.ValueGet(System.Int32,System.Int32)">
            <summary>
            Get/set property for matrix element in row i, column j.
            </summary>
        </member>
        <member name="F:Claron.WIF.MatrixComplex._nRows">
            <summary>
            The number of rows in the matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.MatrixComplex._nCols">
            <summary>
            The number of columns in the matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new matrix.
            </summary>
            <param name="nRows">The number of rows in the matrix.</param>
            <param name="nCols">The number of columns in the matrix.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.#ctor(System.Int32,System.Int32,Claron.WIF.Complex[])">
            <summary>
            Initializes a new matrix with the given array. Assumes vals() is an array
            containing nRows x nCols elements.
            </summary>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.Clone">
            <summary>
            Returns a clone of this matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.InvertMe">
            <summary>
            Inverts this matrix. Throws an exception if the matrix cannot be inverted.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.Inverse">
            <summary>
            Returns a new matrix which is the inverse of this matrix. Throws an exception if the matrix
            cannot be inverted.
            </summary>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.TransposeMe">
            <summary>
            Transposes this matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.IdentityMe">
            <summary>
            Turns this matrix into an identity matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.Identity">
            <summary>
            Returns a new identity matrix which is the same size as this matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.RandomizeMe(System.Double,System.Double)">
            <summary>
            Randomizes this matrix.
            </summary>
            <param name="min">The minimum value which the real and imaginary components in the matrix can
            take. Default value = -1</param>
            <param name="max">The maximum value which the real and imaginary components in the matrix can
            take. Default value = 1</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.Randomize(System.Double,System.Double)">
            <summary>
            Randomizes this matrix.
            </summary>
            <param name="min">The minimum value which the real and imaginary components in the matrix can
            take. Default value = -1</param>
            <param name="max">The maximum value which the real and imaginary components in the matrix can
            take. Default value = 1</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.ToString">
            <summary>
            Returns a string representation of the matrix.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.op_Multiply(Claron.WIF.MatrixComplex,Claron.WIF.MatrixComplex)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.op_Multiply(System.Double,Claron.WIF.MatrixComplex)">
            <summary>
            Multiples by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.op_Multiply(Claron.WIF.MatrixComplex,Claron.WIF.VectorNComplex)">
            <summary>
            Multiplies by a vector.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.op_Division(Claron.WIF.MatrixComplex,System.Double)">
            <summary>
            Divides matrix by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.op_Addition(Claron.WIF.MatrixComplex,Claron.WIF.MatrixComplex)">
            <summary>
            Adds two matrices.
            </summary>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.op_Subtraction(Claron.WIF.MatrixComplex,Claron.WIF.MatrixComplex)">
            <summary>
            Subtracts b from a.
            </summary>
        </member>
        <member name="M:Claron.WIF.MatrixComplex.Test">
            <summary>
            Tests the matrix class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.MatrixComplex.Values">
            <summary>
            Returns the values of the matrix.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.MatrixComplex.NRows">
            <summary>
            The number of rows in the matrix.
            </summary>
        </member>
        <member name="P:Claron.WIF.MatrixComplex.NCols">
            <summary>
            The number of columns in the matrix.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.ConfigFile">
            <summary>
            allows to read/write attribute values, application settings and sections
            from/to .NET XML config file.
            </summary>
        </member>
        <member name="M:Claron.WIF.ConfigFile.#ctor(System.String)">
            <summary>
            Sets the object to reflect the given configuration file.
            If a read/write file cannot be created at the given path, a suitable exception is thrown.
            </summary>
            <param name="FilePath">The configuration file path - may or may not exist already</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ConfigFile.AddConfigSection(System.String,System.String)">
            <summary>
            Adds a configuration section if one does not exist already
            </summary>
            <param name="SectionName"></param>
            <param name="HandlerClass">The type of each attribute stored in the section (usually "System.String")</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ConfigFile.GetConfigAttribute(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="SectionName"></param>
            <param name="AttributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.ConfigFile.GetConfigAttribute(System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="SectionName"></param>
             <param name="AttributeName"></param>
             <param name="DefaultValue">Default value = null</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ConfigFile.GetAppSettingNode(System.String,System.Boolean)">
             <summary>
            
             </summary>
             <param name="SettingName"></param>
             <param name="CreateIfNotFound">Default value = true</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.GridBox">
             <summary>
             GridBox represents the geometrical properties of a regular 3D array of samples.
             Box and BoxI32 represent simple boxes in space.
             </summary>
             <remarks>
             GridBox
             --------
             Usually owned by the object containing or generating the samples (eg, SliceStack, BitVolume, Camera), and is positioned in a given patient's RCS.
            
             The GridBox interface references three coordinate systems:
             1. RCS: isotropic space with a fixed scale to real-world (mm) units
             2. Index: 0-based indexes of sample positions along the sampling grid.
             3. Fract: fractional position relative to the box bounds (ie, the center is at (0.5,0.5,0.5).
             The grid resolution is set by the Dims property, and the distances between neighboring
             samples in the grid's RCS units are defined by the Spacing() property.
             Note that the spacing values need not be identical in all dimensions, allowing anisotropy.
            
             The origin (0,0,0) of all coordinates is the same - one corner of the box.
             The coordinate i (0..2) of the opposite corner of the box is in:
             - Fract : 1
             - Index : Dims(i)-1
             - RCS   : (Dims(i)-1) * Spacing(i)
            
             The spacing and dims values must be positive.
            
             HomoMat4x4GridTo() can be used to obtain a 4x4 matrix for mapping homogeneous vectors
             (x,y,z,1) from one Grid's index to another grid's index coordinates.
            
             The grid's RCS is mapped to a PatientScan RCS (Pr) by having the client set 
             the PatientScanRCS property. The client then manipulates the mapper's properties 
             to rotate, scale and move the grid's contents.
             
             If PatientScanRCS is set to null, the grid's RCS units are assumed to be in Mm.
            
             Typical grid boxes in WIF and their coordinate post-fixes:
            
             Patient RCS: Pr
             Slice stack RCS = Sr, index coordinates = Si
             Camera RCS = Cr, index coordinates = Ci
             Viewport RCS = Vr, index coordinates = Vi
             </remarks>
        </member>
        <member name="T:Claron.WIF.WifObject">
             <summary>
             The base class for all the WIF classes that want to benefit from general WIF utilities.
             </summary>
             <remarks>
             The current utilities supported:
             (1) An "Associated Data" dictionary per object for use by the client (created on first use)
             (2) A LastUpdateTicks indicator to check if object state has changed (requires the object to call "Updated", and to update property values by calling PropertyUpdate() instead of simply assigning the new value.
             (3) Universally unique ID string compatible with DICOM, gets generated on first access if not assigned first.
            
             The class is designed for minimal memory and execution overhead.
             </remarks>
        </member>
        <member name="F:Claron.WIF.WifObject._LastUpdateTicks">
            <summary>
            The last GlobalAutoIncrementCounter value when any property of this object has been modified.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.WifObject._AssociatedData">
            <summary>
            Gets allocated on first use.
            </summary>
        </member>
        <member name="F:Claron.WIF.WifObject._Guid">
            <summary>
            Globally unique hex ID string of 32 chars, gets allocated on first use.
            </summary>
        </member>
        <member name="F:Claron.WIF.WifObject.UpdatedStackTraceEnabled">
            <summary>
            A value to control whether the stack trace is recorded whenever Updated()
            is called.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.WifObject.UpdatedStackTrace">
            <summary>
            A stack trace showing where in the code the last update of this object
            occurred.
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObject.AssociatedDataGet(System.String)">
            <summary>
            Convenient and efficient access to an item in AssociatedData
            </summary>
            <param name="Key">The key (name) of the item</param>
            <returns>The data value or Nothing if such key was never set.</returns>
        </member>
        <member name="M:Claron.WIF.WifObject.AssociatedDataSet(System.String,System.Object)">
            <summary>
            Convenient and efficient access to an item in AssociatedData
            </summary>
            <param name="Key">The key (name) of the item</param>
            <param name="NewValue">The NewValue to set</param>
        </member>
        <member name="M:Claron.WIF.WifObject.ModifyUidIfContentsChanged">
            <summary>
            Should be called before serializing or comparing to other objects
            in case the UID should uniquely reflect the contents.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WifObject.ToString">
            <summary>
            adds instance identification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.WifObject.#ctor">
            <summary>
            Calls Updated
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObject.Updated">
            <summary>
            Record that the object was updated, ie, set lastUpdateTicks to GlobalAutoIncrementCounter
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObject.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Ensure a deserialized object gets a correct _lastUpdateTicks value.
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObject.CopyProps(Claron.WIF.WifObject,Claron.WIF.WifObject)">
            <summary>
            Deep copy of WifObject properties (other than GUID) from Source to Target
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObject.SwapProps(Claron.WIF.WifObject)">
            <summary>
            Swaps AssociatedData, LastUpdate and UID with the other object (perhaps deserialized)
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate(System.Double@,System.Double)">
            <summary>
            If the NewVal != PropVal, PropVal is updated and the last update time is recorded.
            Override for Doubles.
            </summary>
            <returns>Whether the property was updated and the update time recorded</returns>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate(System.Int32@,System.Int32)">
            <summary>
            If the NewVal != PropVal, PropVal is updated and the last update time is recorded.
            Override for Integers.
            </summary>
            <returns>Whether the property was updated and the update time recorded</returns>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate(System.Int64@,System.Int64)">
            <summary>
            If the NewVal != PropVal, PropVal is updated and the last update time is recorded.
            Override for Longs.
            </summary>
            <returns>Whether the property was updated and the update time recorded</returns>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate(System.Boolean@,System.Boolean)">
            <summary>
            If the NewVal != PropVal, PropVal is updated and the last update time is recorded.
            Override for Booleans.
            </summary>
            <param name="PropVal"></param>
            <param name="NewVal"></param>
            <returns>Whether the property was updated and the update time recorded</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate(System.String@,System.String)">
            <summary>
            If the NewVal != PropVal, PropVal is updated and the last update time is recorded.
            Override for strings.
            </summary>
            <param name="PropVal"></param>
            <param name="NewVal"></param>
            <returns>Whether the property was updated and the update time recorded</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate(System.DateTime@,System.DateTime)">
            <summary>
            If the NewVal != PropVal, PropVal is updated and the last update time is recorded.
            Override for Dates.
            </summary>
            <returns>Whether the property was updated and the update time recorded</returns>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate(Claron.WIF.SpaceMapperSimilarity@,Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            If the NewVal != PropVal, PropVal is updated and the last update time is recorded.
            Override for SpaceMappers, which also checks their contents, not just the references.
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObject.PropertyUpdate``1(``0@,``0)">
            <summary>
            If the NewVal is not identical to PropVal, PropVal is updated and the last update time 
            is recorded.
            Catch-all for non-simple data types. Classes are compared by reference and 
            Structures by value.
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObject.LastUpdateTicks">
            <summary>
            The value of GlobalAutoIncrementCounter() at the last time the object was updated.
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObject.AssociatedData">
            <summary>
            A dictionary for the application to associate data (in string format) with this object.
            </summary>
            <remarks> Created only on first use.</remarks>
        </member>
        <member name="P:Claron.WIF.WifObject.AdString">
            <summary>
            Provides the contents of AssociatedData in a string format for debugging
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObject.UID">
            <summary>
            A DICOM-compliant unique ID string for this instance.
            Cannot be changed directly (only by changing this object's GuidHex or the general
            property DicomUidPrefixOfCompany)
            </summary>
            <remarks>Will generate a new UID if never assigned, or if UidReset was called</remarks>
        </member>
        <member name="P:Claron.WIF.WifObject.GuidHex">
            <summary>
            The globally unique 32 hex chars string representing the part of the UID
            which follows ClaronUIDPrefix.
            If set to Nothing or an invalid value, it will be automatically reassigned on the next access.
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObject.TicksOnUidSet">
            <summary>
            The value of _lastUpdateTicks when UID was set, to allow updating the
            UID when it is required to uniquely reflect the state of the object's data contents.
            Returns 0 if the UID was never accessed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.DimsSet(Claron.WIF.Vector3_I32)">
            <summary>
            Set all three grid dimensions directly
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.DimsSet(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set all three grid dimensions directly
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.DimXYZ">
            <summary>
            Dims.X * Dims.Y * Dims.Z (The total number of samples in the grid)
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.DimsSet(Claron.WIF.Vector3)">
            <summary>
            Set the grid dimensions from box sides (in RCS units) and the Spacing property.
            If BoxSides(i) > 0 and Spacing(i) = 0, then Spacing(i) is set to BoxSides(i) and Dims(i) to 2.
            </summary>
            <param name="BoxSides">The length of each side of the box, in RCS units. Must be non-negative.</param>
        </member>
        <member name="M:Claron.WIF.GridBox.UboundsGet(System.Int32)">
            <summary>
            The highest index of the grid in the given dimension
            </summary>
            <param name="index">The dimension index</param>
            <value></value>
        </member>
        <member name="M:Claron.WIF.GridBox.UboundsSet(System.Int32,System.Int32)">
            <summary>
            The highest index of the grid in the given dimension
            </summary>
            <param name="index">The dimension index</param>
            <param name="NewValue"></param>
        </member>
        <member name="M:Claron.WIF.GridBox.BoundingBoxRcs">
            <summary>
            Returns the bounding box of the grid in RCS coordinates
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.BoundingBoxInPatientRcs">
            <summary>
            Returns the bounding box of the grid in patient scan coordinates.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.BoundingBoxInAnotherRcs(Claron.WIF.GridBox)">
            <summary>
            Returns the bounding box of the grid in another RCS
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.BoxInAnotherRcs(Claron.WIF.Box,Claron.WIF.GridBox)">
            <summary>
            Returns a bounding box of a given box mapped to another RCS
            </summary>
            <param name="BoxIndex">The box to map, in index coordinates</param>
            <param name="OtherRcs">The RCS to map it to. Must map to the same PatientRcs with this grid.</param>
        </member>
        <member name="M:Claron.WIF.GridBox.BoundingBoxIndex">
            <summary>
            Returns the bounding box of the grid in Index coordinates
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.SpacingSet(System.Double,System.Double,System.Double)">
            <summary>
            Set all three spacing values directly
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.SpacingSet(Claron.WIF.Vector3)">
            <summary>
            Set the spacing values from the given box sides (in RCS units), and the Dims property
            </summary>
            <param name="BoxSides">The length of each side of the box, in RCS units</param>
        </member>
        <member name="M:Claron.WIF.GridBox.SpacingSetFromBoxMm(Claron.WIF.Vector3)">
            <summary>
            Set the spacing values from the bounding box sides provided in mm, keeping Dims
            constant.
            </summary>
            <param name="BoxSidesMm">The length of each side of the box, in mm</param>
        </member>
        <member name="M:Claron.WIF.GridBox.BoxSidesRCS">
            <summary>
            The lengths of of the box sides in RCS coordinate units.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.LinearOffsetToPos(System.Int32)">
            <summary>
            Converts a linear memory offset into the corresponding Xyz position, 
            both assumed to match to the index space geometry of this GridBox.
            </summary>
            <param name="offset">The linear memory offset where (0,0,0) is at offset 0.</param>
            <returns>The x,y,z-voxel coordinate as Vector3_I32 in index coordinates of the Grid.</returns>
        </member>
        <member name="M:Claron.WIF.GridBox.LinearOffsetFromPos(Claron.WIF.Vector3_I32)">
            <summary>
            Converts a Xyz position into the corresponding linear memory offset, 
            both assumed to match to the index space geometry of this GridBox.
            </summary>
            <param name="posXyz">The x,y,z-voxel coordinate as Vector3_I32 in index coordinates of the Grid.</param>
            <returns>The linear memory offset where (0,0,0) is at offset 0.</returns>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsCoord(System.Double,System.Double,System.Double)">
            <summary>
            Returns the coordinates in the GridBox RCS corresponding to the relative fractional position (0 to 1) in the box. The fractional position can be negative or larger than 1.
            </summary>
            <remarks>The box sides can be obtained by RCSCoord(1,1,1)</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsCoord(Claron.WIF.Vector3)">
            <summary>
            Returns the coordinate in the GridBox RCS corresponding to the given grid sample index.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsCoord(Claron.WIF.Vector3_I32)">
            <summary>
            Returns the coordinate in the GridBox RCS corresponding to the given grid sample index.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsCoord(Claron.WIF.Vector3[])">
            <summary>
            Returns the coordinate in the GridBox RCS corresponding to the given grid sample index.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsCoord(System.Collections.Generic.List{Claron.WIF.Vector3_I32})">
            <summary>
            Returns a list of GridBox RCS coordinates corresponding to the input indexes list.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsCoord(System.Collections.Generic.List{Claron.WIF.Vector3})">
            <summary>
            Returns the coordinate in the GridBox RCS corresponding to the given grid sample index.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.IndexToRcs(System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts, in place, Index coordinate to RCS ones.
            </summary>
            <param name="i">The i index value.</param>
            <param name="j">The j index value.</param>
            <param name="k">The k index value.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsToIndex(System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts, in place, RCS coordinate to Index ones.
            </summary>
            <param name="inOutX">Input/output: x coordinate</param>
            <param name="inOutY"></param>
            <param name="inOutZ"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.RcsAtNearestSample(Claron.WIF.Vector3)">
            <summary>
            Returns the RCS coordinates of the nearest integer Index position.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Index(Claron.WIF.Vector3)">
            <summary>
            Returns the sample index of an RCS coordinates clamped to only valid indexes within the grid.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Index(Claron.WIF.Vector3[],System.Boolean)">
            <summary>
            Returns the indexes of an array of RCS coordinates, optionally clamped to only valid indexes within the grid.
            </summary>
            <param name="RCSCoords">An array of the input coordinates</param>
            <param name="Clamped">If true, index values will be clamped to the index range of the grid</param>
        </member>
        <member name="M:Claron.WIF.GridBox.Index(System.Collections.Generic.List{Claron.WIF.Vector3},System.Boolean)">
            <summary>
            Returns the indexes of a list of RCS coordinates, optionally clamped to only valid indexes within the grid.
            </summary>
            <param name="RCSCoords">A list of the input coordinates</param>
            <param name="Clamped">If true, index values will be clamped to the index range of the grid</param>
        </member>
        <member name="M:Claron.WIF.GridBox.Index(Claron.WIF.Vector3,System.Boolean)">
            <summary>
            Returns the sample index of an RCS coordinates, optionally clamped to only valid indexes within the grid.
            </summary>
            <param name="RCSCoord"></param>
            <param name="Clamped">If true, index values will be clamped to the index range of the grid</param>
        </member>
        <member name="M:Claron.WIF.GridBox.Index(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the sample index of a fractional coordinate, optionally clamped to only valid indexes within the grid.
            </summary>
            <param name="Xfract"></param>
            <param name="Yfract"></param>
            <param name="Zfract"></param>
            <param name="Clamped">Default value = true</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.Index(Claron.WIF.Box)">
            <summary>
            Returns the equivalent of the RCS bounding box in Index coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.IndexOfPatientRcs(System.Collections.Generic.List{Claron.WIF.Vector3},System.Boolean)">
            <summary>
            Given a list of positions in PatientScan RCS, returns a new list of those positions in grid coordinates.
            </summary>
            <param name="Vs">The list of input positions in PatientScan RCS</param>
            <param name="Clamped">True if the index positions should all be clamped to the grid box extent. Default value = true</param>
            <returns>New list of position in grid coordinates (either clamped or not)</returns>
            <remarks>Efficient implementation of the coordinate conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.IndexOfPatientRcs(Claron.WIF.Vector3[],System.Boolean)">
            <summary>
            Given an array of positions in PatientScan RCS, returns a new array of those positions in grid coordinates.
            </summary>
            <param name="Vs">The array of input positions in PatientScan RCS</param>
            <param name="Clamped">True if the index positions should all be clamped to the grid box extent. Default value = true</param>
            <returns>New array of position in grid coordinates (either clamped or not)</returns>
            <remarks>Efficient implementation of the coordinate conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.IsIndexXyWithin(Claron.WIF.Vector3)">
            <summary>
            Indicates whether the x.y index coordinates fall within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.IsIndexXyWithin(System.Double,System.Double)">
            <summary>
            Indicates whether the x.y index coordinates fall within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.IsIndexWithin(Claron.WIF.Vector3)">
            <summary>
            Indicates whether an index location falls within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.IsIndexWithin(Claron.WIF.Vector3_I32)">
            <summary>
            Indicates whether an index location falls within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.IsIndexWithin(Claron.WIF.Vector3,System.Double)">
            <summary>
            Indicates whether an index location falls within the grid box bounds, shrunk by a given margin
            (usually a neighborhood around the location where some operator will be applied)
            </summary>
            <param name="IndexCoord">The index position to check</param>
            <param name="Margin">Margin, in index units</param>
        </member>
        <member name="M:Claron.WIF.GridBox.IsRcsWithin(Claron.WIF.Vector3)">
            <summary>
            Indicates whether an RCS location falls within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.IsPrWithin(Claron.WIF.Vector3)">
            <summary>
            Indicates whether a PatientScan RCS location falls within the grid box bounds
            </summary>
            <param name="Pr">Location in PatientScan RCS</param>
        </member>
        <member name="M:Claron.WIF.GridBox.IndexOfPatientRcs(Claron.WIF.Vector3,System.Boolean)">
            <summary>
            Maps a position from PatientScan RCS to grid coordinates.
            </summary>
            <param name="PosInPatient">The input position in PatientScan RCS</param>
            <param name="Clamped">True if the returned index position should all be clamped to the grid box extent. Default value = true</param>
            <remarks>Efficient conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.PatientRcsOfIndex(Claron.WIF.Vector3)">
            <summary>
            Maps a position from grid coordinates to PatientScan RCS.
            </summary>
            <param name="IndexCoord">The input position in gridbox index coordinates</param>
            <remarks>Efficient conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.PatientRcsOfIndex(System.Double,System.Double,System.Double)">
            <summary>
            Maps a position from grid coordinates to PatientScan RCS.
            </summary>
            <param name="Xi">The X index coordinate</param>
            <param name="Yi">The Y index coordinate</param>
            <param name="Zi">The Z index coordiante</param>
            <remarks>Efficient conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.PatientRcsOfFract(System.Double,System.Double,System.Double)">
            <summary>
            Maps a position from grid fract coordinates to PatientScan RCS.
            </summary>
            <remarks>Efficient conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.PatientRcsOfIndex(Claron.WIF.Vector3[])">
            <summary>
            Maps a position from grid coordinates to PatientScan RCS.
            </summary>
            <param name="IndexCoords">An array containing the input positions in gridbox index coordinates</param>
            <remarks>Efficient batch conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.PatientRcsOfIndex(System.Collections.Generic.List{Claron.WIF.Vector3})">
            <summary>
            Maps positions from grid index coordinates to PatientScan RCS.
            </summary>
            <param name="IndexCoords">An array containing the input positions in gridbox index coordinates</param>
            <remarks>Efficient batch conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.PatientRcsOfIndex(System.Collections.Generic.List{Claron.WIF.Vector3_I32})">
            <summary>
            Maps positions from grid index coordinates to PatientScan RCS.
            </summary>
            <param name="IndexCoords">An array containing the input positions in gridbox index coordinates</param>
            <remarks>Efficient batch conversion</remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.Fract(Claron.WIF.Vector3)">
            <summary>
            Returns the fractional coordinate of an RCS coordinate
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Fract(System.Double,System.Double,System.Double)">
            <summary>
            Returns the fractional coordinate of an index
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.CenterRcs">
            <summary>
            Returns the RCS coordinate of the center of the grid box
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.CenterPr">
            <summary>
            Returns the PatientScanRCS coordinate of the center of the grid box
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.ClampIndex(Claron.WIF.Vector3@)">
            <summary>
            Clamps the grid coordinates to fall within grid array indexing bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.ClampIndex(Claron.WIF.Vector3_I32@)">
            <summary>
            Clamps the grid coordinates to fall within grid array indexing bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Contains(System.Int32,System.Int32,System.Int32)">
            <summary>
            Indicates whether a given grid location is within the grid box bounds.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Contains(System.Int32,System.Int32)">
            <summary>
            Indicates whether a given x,y grid location is within the grid box bounds (z is ignored)
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.ClampRcs(Claron.WIF.Vector3@)">
            <summary>
            Clamps each of the RCS coordinates to fall within the grid box
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.ClampLineRcs(Claron.WIF.Vector3@,Claron.WIF.Vector3@)">
            <summary>
            Clamps a line to only the portion that is within the grid box. If
            no such portion exists, the two end points are invalidated.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Contains(Claron.WIF.Vector3_I32)">
            <summary>
            Evaluate whether a given index coordinate falls within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.ContainsIndex(Claron.WIF.Vector3)">
            <summary>
            Evaluate whether a given index coordinate falls within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Contains(Claron.WIF.Vector3)">
            <summary>
            Evaluate whether a given RCS coordinate falls within the grid box bounds
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.ClampFract(Claron.WIF.Vector3@)">
            <summary>
            Clamps the Fract coordinates to fall within [0..1]
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.#ctor(Claron.WIF.GridBox,Claron.WIF.SpaceMapperSimilarity,Claron.WIF.Vector3_I32,Claron.WIF.Vector3)">
            <summary>
            Creates a new GridBox and populates its properties.
            </summary>
            <param name="PatientScanRCS">See <see cref="P:Claron.WIF.GridBox.PatientScanRCS"/> property</param>
            <param name="ToPatientScan">See <see cref="P:Claron.WIF.GridBox.ToPatientScan"/> property</param>
            <param name="Dims">See <see cref="P:Claron.WIF.GridBox.Dims"/> property</param>
            <param name="Spacing">See <see cref="P:Claron.WIF.GridBox.Spacing"/> property</param>
        </member>
        <member name="M:Claron.WIF.GridBox.#ctor(Claron.WIF.Vector3_I32,Claron.WIF.SpaceMapperSimilarity,Claron.WIF.GridBox,Claron.WIF.Vector3)">
            <summary>
            Creates a new GridBox and populates its properties.
            </summary>
            <param name="ToPatientScan">See <see cref="P:Claron.WIF.GridBox.ToPatientScan"/> property</param>
            <param name="Dims">See <see cref="P:Claron.WIF.GridBox.Dims"/> property</param>
            <param name="SpacingMm">See <see cref="P:Claron.WIF.GridBox.SpacingMm"/> property</param>
            <param name="PatientScanRCS">See <see cref="P:Claron.WIF.GridBox.PatientScanRCS"/> property</param>
        </member>
        <member name="M:Claron.WIF.GridBox.Copy">
            <summary>
            Returns a "deep" copy with new UID and new ToPatientScan mapper.
            The ToParientScan would reference the same PatientScanRcs.
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.SetAs(Claron.WIF.GridBox)">
            <summary>
            Sets the properties of this object to be the same as those of another.
            </summary>
            <remarks>
            The LastUpdateTicks is updated only if any property of OtherGrid are different
            </remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.ExpandToSnapToGrid(System.Int32)">
            <summary>
            will expand the box such that the dimensions are snapped to grid locations
            </summary>
            <param name="gridSize">The number of index locations per grid location (eg, 16
            for bricks in bitvol)</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.ExpandToSnapToGridXY(System.Int32)">
            <summary>
            will expand the box such that the dimensions are snapped to grid locations
            in the X and Y dimensions only
            </summary>
            <param name="gridSize">The number of index locations per grid location (eg, 16
            for bricks in bitvol)</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.ExpandToSnapToGrid">
            <summary>
            Same as ExpandToSnapToGrid(16)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.ExpandToSnapToGridXY">
            <summary>
            Same as ExpandToSnapToGridXY(16)
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.MapperTo(Claron.WIF.GridBox)">
            <summary>
            Returns a similarity mapper from this GridBox to another GridBox, assuming they share the same PatientScanRCS.
            </summary>
            <param name="OtherGrid">The other grid. Must be mapped to the same PatientScanRCS as this one.</param>
        </member>
        <member name="M:Claron.WIF.GridBox.Map(Claron.WIF.Vector3,Claron.WIF.GridBox)">
            <summary>
            Maps an RCS coordinate in this GridBox to its RCS coordinate in another GridBox, assuming they
            share PatientScanRCS (not tested).
            </summary>
            <param name="RcsCoord"></param>
            <param name="OtherGrid">The RCS to which to map the point.</param>
        </member>
        <member name="M:Claron.WIF.GridBox.Map(Claron.WIF.Vector3[],Claron.WIF.GridBox)">
            <summary>
            Maps RCS coordinates in this GridBox to their corresponding RCS coordinates in
            another GridBox, assuming they share PatientScanRCS (not tested).
            </summary>
            <param name="RcsCoord"></param>
            <param name="OtherGrid">The grid to which to map the points.</param>
        </member>
        <member name="M:Claron.WIF.GridBox.MapIndex(Claron.WIF.Vector3,Claron.WIF.GridBox)">
            <summary>
            Maps an index coordinate in this GridBox to the index coordinate of another GridBox mapped
            to a shared PatientScanRCS. The coordinates are not clamped to the other GridBox bounds.
            </summary>
            <param name="ThisGridIndex">The index in this GridBox</param>
            <param name="OtherGrid">The other grid. Must be mapped to the same PatientScanRCS as this one.</param>
            <returns>A grid index, or Nothing if mapping is not possible.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.MapIndexes(Claron.WIF.Vector3[],Claron.WIF.GridBox)">
            <summary>
            Maps an array of index coordinate in this GridBox to an array of the index coordinate
            of another GridBox mapped  to a shared PatientScanRCS.
            The coordinates are not clamped to the other GridBox bounds.
            </summary>
            <param name="ThisGridIndexes">The indexes in this GridBox</param>
            <param name="OtherGrid">The other grid. Must be mapped to the same PatientScanRCS as this one.</param>
            <returns>An array of grid indexes, or Nothing if mapping is not possible.</returns>
        </member>
        <member name="M:Claron.WIF.GridBox.MapIndex(Claron.WIF.Vector3,Claron.WIF.GridBox,System.Boolean)">
            <summary>
            Maps an index coordinate in this GridBox to the index coordinate of another GridBox mapped to a shared PatientScanRCS.
            </summary>
            <param name="ThisGridIndex">The index in this GridBox</param>
            <param name="OtherGrid">The other grid. Must be mapped to the same PatientScanRCS as this one.</param>
            <param name="Clamped">If true, the coordinates are clamped to the grid's valid index range. Default value = false</param>
            <returns>A grid index, or Nothing if mapping is not possible.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.MapIndexes(Claron.WIF.Vector3[],Claron.WIF.GridBox,System.Boolean)">
            <summary>
            Maps index coordinates in this GridBox to the index coordinates of another GridBox
            mapped to a shared PatientScanRCS.
            </summary>
            <param name="ThisGridIndexes">The index in this GridBox</param>
            <param name="OtherGrid">The other grid. Must be mapped to the same PatientScanRCS as this one.</param>
            <param name="Clamped">If true, the coordinates are clamped to the grid's valid index range. Default value = false</param>
            <returns>A grid indexes, or Nothing if mapping is not possible.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.MapIndexes(System.Collections.Generic.List{Claron.WIF.Vector3},Claron.WIF.GridBox,System.Boolean)">
            <summary>
            Maps index coordinates in this GridBox to the index coordinates of another GridBox
            mapped to a shared PatientScanRCS.
            </summary>
            <param name="ThisGridIndexes">The index in this GridBox</param>
            <param name="OtherGrid">The other grid. Must be mapped to the same PatientScanRCS as this one.</param>
            <param name="Clamped">If true, the coordinates are clamped to the grid's valid index range. Default value = false</param>
            <returns>A grid indexes, or Nothing if mapping is not possible.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.DistanceInRcs(Claron.WIF.Vector3_I32,Claron.WIF.Vector3_I32)">
            <summary>
            Returns the distance in RCS units between two integer grid locations
            </summary>
            <param name="v0">grid index coordinate 0</param>
            <param name="v1">grid index coordinate 0</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.GridBox.DistanceInRcs(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Returns the distance in RCS space between two index coordinates.
            </summary>
            <param name="index0"></param>
            <param name="index1"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.GridBox.HomoMat4x4GridTo(Claron.WIF.GridBox)">
            <summary>
            Generates a 4X4 homogeneous transform matrix between the index coordinates
            of this GridBox and another one.
            </summary>
            <returns>A 4x4 matrix, or Nothing if the two GridBoxes cannot be mapped</returns>
            <remarks>To transform a vector (x,y,z) to (x',y',z') using a 4x4 homogeneous matrix HM,
            we do: (x',y',z',1) = (x,y,z,1) * HM
            </remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.HomoMat4x4GridTo(Claron.WIF.GridBox,Claron.WIF.Vector3)">
            <summary>
            Generates a 4X4 homogeneous transform matrix between the index coordinates
            of this GridBox and another one. Allows shifting of the grid's origin,
            allowing this function to be used for relative positioning of an object in the grid (eg,
            a plane in the middle of a slab in the depth dimension).
            </summary>
            <param name="OtherGrid">The grid to map to</param>
            <param name="SourceShiftFract">A vector in fract coordinates of this grid that will be
            subtracted from the CenterInSource of the transformation described by the matrix returned.</param>
            <returns>A 4x4 matrix, or Nothing if the two GridBoxes cannot be mapped</returns>
            <remarks>To transform a vector (x,y,z) to (x',y',z') using a 4x4 homogeneous matrix HM,
            we do: (x',y',z',1) = (x,y,z,1) * HM
            </remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.HomoMat4x4GridToPatientScanRcs">
            <summary>
            Generates a 4X4 homogeneous transform matrix from the index coordinates
            of this GridBox to PatientScanRcs coordinates.
            </summary>
            <returns>A 4x4 matrix</returns>
            <remarks>To transform a vector (x,y,z) to (x',y',z') using a 4x4 homogeneous matrix HM,
            we do: (x',y',z',1) = (x,y,z,1) * HM
            </remarks>
        </member>
        <member name="M:Claron.WIF.GridBox.HomoMat4x4GridFromPatientScanRcs">
            <summary>
            Generates a 4X4 homogeneous transform matrix from PatientScanRcs coordinates to
            the index coordinates of this GridBox.
            </summary>
            <returns>A 4x4 matrix</returns>
            <remarks>To transform a vector (x,y,z) to (x',y',z') using a 4x4 homogeneous matrix HM,
            we do: (x',y',z',1) = (x,y,z,1) * HM
            </remarks>
        </member>
        <member name="F:Claron.WIF.GridBox.NeighborSteps6">
            <summary>
            Convenient and efficient access to the 6 neighbors of a voxel on the grid
            </summary>
        </member>
        <member name="F:Claron.WIF.GridBox.NeighborSteps18">
            <summary>
            Convenient and efficient access to the 18 neighbors of a voxel on the grid
            </summary>
        </member>
        <member name="F:Claron.WIF.GridBox.NeighborSteps26">
            <summary>
            Convenient and efficient access to the 26 neighbors of a voxel on the grid
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.InitializeNeighborSteps">
            <summary>
            Gets called from the static class initializer
            </summary>
        </member>
        <member name="M:Claron.WIF.GridBox.Neighbors(Claron.WIF.Vector3_I32,System.Int32)">
            <summary>
            Given an index coordinate, efficiently iterates on the coordinates of its neighbors (with no
            bounds checking, which may be OK if the data being accessed, such as a BitVol, is padded).
            Usage example:
            foreach (Vector3_I32 nbor in Grid.Neighbors(LocationSi, 26)) {
             ....
            }
            
            </summary>
            <param name="locationIndex"></param>
            <param name="Use6_18_or_26">Set to 6 for neighbors 1 index unit away, to 18 
            for neighbors under 1.5 index units away or to 26 for neighbors in all directions.</param>
        </member>
        <member name="M:Claron.WIF.GridBox.NeighborsWithinGrid(Claron.WIF.Vector3_I32,System.Int32)">
            <summary>
            Given an index coordinate, iterates on the coordinates of its neighbors,
            but only those which fall within the grid bounds.
            Usage example:
            foreach (Vector3_I32 nbor in Grid.NeighborsWithinGrid(LocationSi, 26)) {
             ....
            }
            </summary>
            <param name="locationIndex"></param>
            <param name="Use6_18_or_26">Set to 6 for neighbors 1 index unit away, to 18 
            for neighbors under 1.5 index units away or to 26 for neighors in all directions.</param>
        </member>
        <member name="P:Claron.WIF.GridBox.PatientScanRCS">
            <summary>
            The box's reference scan RCS.
            null if not mapped (when the GridBox itself represents the PatientScanRCS).
            NOTE: replacing it does not cause the LastUpdateTicks to be incremented.
            Use LastUpdateIncludingInputsTicks to find out if it has been changed.
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.ToPatientScan">
            <summary>
            The mapper between the box's RCS and the PatientScanRCS.
            Setting it does not replace the actual mapper, only updates its properties (ie, set by value).
            Does not cause the LastUpdateTicks of the GridBox to be incremented.
            Use LastUpdateIncludingInputsTicks to find out if the GridBox has been changed.
            </summary>
            <value></value>
        </member>
        <member name="P:Claron.WIF.GridBox.ToPatientScanByRef">
            <summary>
            The actual mapper between the box's RCS and the PatientScanRCS.
            Unlike ToPatientScan, setting it replaces the actual mapper, which
            will update LastUpdateTicks if the mapper is different.
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.LastUpdateIncludingInputsTicks">
            <summary>
            The maximum of the object's last update ticks and its input objects' last update ticks
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.Dims">
            <summary>
            Dimensions of the sampling grid (not the coordinate range!). Must be positive.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.GridBox.DimX">
            <summary>
            Number of samples in X
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.DimY">
            <summary>
            Number of samples in Y
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.DimZ">
            <summary>
            Number of samples in Z
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.DimXY">
            <summary>
            Dims.X * Dims.Y (number of samples in the XY grid)
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.Ubounds">
            <summary>
            The highest indexes of the grid
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.GridBox.UboundsV3">
            <summary>
            The highest indexes of the grid, as a Vector3 structure
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.GridBox.IndexLast">
            <summary>
            The highest indexes of the grid (as Vector3)
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.GridBox.Spacing">
            <summary>
            The spacing, in RCS units, between samples in each dimension. Must be in the positive range.
            For slice stack grids the spacing is normalized to x-spacing = 1.
            </summary>
        </member>
        <member name="P:Claron.WIF.GridBox.SpacingMm">
            <summary>
            The spacing in millimeters between samples in each dimension (using
            the ToPatientScan mapper. When set, it may affect both RCS spacing 
            and ToPatientScan.Scale. However, the location of
            The grid origin in PatientScanRcs (Pr) is preserved by
            modifying ToPatientScan.CenterInSource.
            </summary>
        </member>
        <member name="T:Claron.WIF.BoxI32">
            <summary>
            Class to represent a box on an integer grid/coordinates (using Vector3_I32 coordinates).
            </summary>
            <remarks>Note: serializable to support ThinClient.</remarks>
        </member>
        <member name="F:Claron.WIF.BoxI32._cornerMin">
            <summary>
            The front lower left corner.
            </summary>
        </member>
        <member name="F:Claron.WIF.BoxI32._cornerMax">
            <summary>
            The back upper right corner.
            </summary>
        </member>
        <member name="M:Claron.WIF.BoxI32.#ctor(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            Creates a box that bounds all the points in a list (in XY only)
            </summary>
            <param name="PointsEnclosed">List of 1 or more points.</param>
        </member>
        <member name="M:Claron.WIF.BoxI32.IsInside(Claron.WIF.Vector3)">
            <summary>
            Returs True if the given point is inside the box.
            </summary>
            <param name="pos">The point to test.</param>
        </member>
        <member name="M:Claron.WIF.BoxI32.IsIntersecting(Claron.WIF.BoxI32)">
            <summary>
            Returns True if the given box intersects with this box.
            </summary>
            <param name="box">The box to test.</param>
        </member>
        <member name="M:Claron.WIF.BoxI32.IsIntersectingInXYPlane(Claron.WIF.BoxI32)">
            <summary>
            Returns True if the given box intersects with this box in XY (Z is ignored)
            </summary>
            <param name="box"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.BoxI32.IsContaining(Claron.WIF.BoxI32)">
            <summary>
            Returns true if the given box is inside this box.
            </summary>
            <param name="box">The box to test.</param>
        </member>
        <member name="M:Claron.WIF.BoxI32.Dilate(System.Int32)">
            <summary>
            Dilates the bounding box by "radius" along all directions. Box size 
            is increased to cornerMin - radius, cornerMax + radius
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Claron.WIF.BoxI32.Dilated(System.Int32)">
            <summary>
            Returns a bounding box dilated by "radius" along all directions. Box size 
            is increased to cornerMin - radius, cornerMax + radius
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Claron.WIF.BoxI32.Dilate(System.Int32,System.Int32)">
            <summary>
            Expands (or shrinks) the bounding box along a given dimension.
            </summary>
            <param name="DimI">The index of the dimentions (eg, 1 for Y)</param>
            <param name="radius">The size to dilate by (or shrink if negative)</param>
        </member>
        <member name="M:Claron.WIF.BoxI32.Dilate(Claron.WIF.Vector3_I32)">
            <summary>
            Dilates the bounding box by "radius" vector along all the 3 directions. Box size 
            is increased to cornerMin.? - radius.?, cornerMax.? + radius.?
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Claron.WIF.BoxI32.ShrinkToIntersection(Claron.WIF.BoxI32)">
            <summary>
            Shrinks this box into the intersecting region with the given box. If the two boxes don't
            intersect then corner max is set equal to corner min.
            </summary>
        </member>
        <member name="M:Claron.WIF.BoxI32.IntersectWith(Claron.WIF.BoxI32)">
            <summary>
            Shrinks this box into the intersecting region with the given box. If the two boxes don't
            intersect then corner max is set equal to corner min.
            </summary>
        </member>
        <member name="M:Claron.WIF.BoxI32.ShrinkToSnapToGrid">
            <summary>
            Sets the limits of the box to multiples of 16
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.BoxI32.ExpandToSnapToGrid(System.Int32)">
            <summary>
            will expand the box such that the extremes are snapped to grid locations
            </summary>
            <param name="gridSize">defaults to 16. Default value = 16</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.BoxI32.ToBox">
            <summary>
            Returns the equivalent Box object.
            </summary>
        </member>
        <member name="P:Claron.WIF.BoxI32.CornerMin">
            <summary>
            The lower left-hand corner of the box.
            If set to a coordinate higher than CornerMax, the corresponding CornerMax
            coordinate is made equal to it.
            </summary>
        </member>
        <member name="P:Claron.WIF.BoxI32.CornerMax">
            <summary>
            Property to get the upper right-hand corner of the box.
            If set to a coordinate lower than CornerMin, the corresponding CornerMin
            coordinate is made equal to it.
            </summary>
            <value></value>
            <returns>The upper right-hand corner of the box as a Triple.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.BoxI32.Dims">
            <summary>
            The size or extent of the box = (CornerMax - CornerMin + (1, 1, 1))
            </summary>
            <value></value>
            <returns>The size of the box.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Box">
            <summary>
            Structure to represent a box (using vector3 representation of coordinates).
            A invalid box representation exists as a structure substitute for Nothing. By default
            operations on an invalid box are undefined, except for ExpandToInclude() which will
            replace the invalid box with the argument to the function.
            </summary>
        </member>
        <member name="F:Claron.WIF.Box._cornerMin">
            <summary>
            The front lower left corner.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Box._cornerMax">
            <summary>
            The back upper right corner.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.#ctor(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Construct from any two opposite corners
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.#ctor(Claron.WIF.Vector3[])">
            <summary>
            Constructor which expands to include all points in the given array.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.#ctor(System.Collections.Generic.List{Claron.WIF.Vector3})">
            <summary>
            Constructor which expands to include all points in the given list.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.InvalidBox">
            <summary>
            Returns an invalid box. Use this when you want to create a blank box into which you want
            to add new points later on via ExpandToInclude().
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.CoordOfFract(System.Double,System.Double,System.Double)">
            <summary>
            Returns the coordinate of a fractional position in the box (0-min, 1-max)
            </summary>
            <param name="FractX"></param>
            <param name="FractY"></param>
            <param name="FractZ"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.SizeGet(System.Int32)">
            <summary>
            The size of the box along a dimension
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.ToBoxI32">
            <summary>
            Returns a BoxI32 with the corner coordinates rounded to the nearest integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.ToBoxI32Encapsulating">
            <summary>
            Returns the smallest BoxI32 encapsulting this box
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.Clone">
            <summary>
            Returns a clone of this box.
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.IsInside(Claron.WIF.Vector3)">
            <summary>
            Returns True if the given point is inside the box.
            </summary>
            <param name="pos">The point to test.</param>
        </member>
        <member name="M:Claron.WIF.Box.ClampToBox(Claron.WIF.Vector3@)">
            <summary>
            Clamps the components of the given vector to the extent of the box.
            No change to the vector is it is already inside the box.
            </summary>
            <param name="pos"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.ClampToBox(Claron.WIF.Vector3)">
            <summary>
            Clamps the components of the given vector to the extent of the box.
            No change to the vector is it is already inside the box.
            </summary>
            <param name="pos"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.ClampToBoxXY(Claron.WIF.Vector3@)">
            <summary>
            Clamps the X and Y components of the given vector to the extent of the box.
            No change to the vector is it is already inside the box.
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.ClampToBoxXY(Claron.WIF.Vector3)">
            <summary>
            Clamps the X and Y components of the given vector to the extent of the box.
            No change to the vector is it is already inside the box.
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.IsIntersecting(Claron.WIF.Box)">
            <summary>
            Returns True if the given box intersects with this box.
            </summary>
            <param name="box">The box to test.</param>
        </member>
        <member name="M:Claron.WIF.Box.IsContaining(Claron.WIF.Box)">
            <summary>
            Returns true if the given box is inside this box.
            </summary>
            <param name="box">The box to test.</param>
        </member>
        <member name="M:Claron.WIF.Box.ShrinkToIntersection(Claron.WIF.Box)">
            <summary>
            Shrinks to the intersection with the given box. May make this box invalid
            if the intersection is empty.
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.IntersectWith(Claron.WIF.Box)">
            <summary>
            Returns a new Box which is the intersection between this and another box.
            The returned box be invalid if the intersection is empty.
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.ExpandToInclude(Claron.WIF.Box)">
            <summary>
            Moves the corners to include the given box as well.
            </summary>
            <param name="box"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.ExpandToInclude(Claron.WIF.Vector3)">
            <summary>
            Moves the corners if needed so that the box will include the given location.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.ExpandToInclude(System.Double,System.Double,System.Double)">
            <summary>
            Moves the corners if needed so that the box will include the given location.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Box.Dilate(System.Double)">
            <summary>
            Increases the size of the box along all three dimensions by the given radius.
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.Erode(System.Double)">
            <summary>
            Decreases the size of the box along all three dimensions by the given radius.
            </summary>
        </member>
        <member name="M:Claron.WIF.Box.IsIntersectedByRay(Claron.WIF.Vector3,Claron.WIF.Vector3,System.Double@,System.Double@)">
            <summary>
            Given a ray starting point and step, returns the distances along the ray
            where it intersects the box. Efficiently calculated.
            </summary>
            <param name="rayBgn">The coordinate where the ray starts</param>
            <param name="RayStepUnitV">The unit step vector of the ray. Must be of length larger than 0</param>
            <param name="intersectionDistA">Output: Distance in step units to first intersection, or Double.NaN is not intersecting</param>
            <param name="intersectionDistB">Output: Distance in step units to second intersection (may be same as intersectionDistA 
            if it "grazes" the box at a corner or edge)</param>
            <returns>False if the line does not intersects the box</returns>
        </member>
        <member name="P:Claron.WIF.Box.IsValid">
            <summary>
            Returns whether the box is valid or not.
            </summary>
        </member>
        <member name="P:Claron.WIF.Box.CornerMin">
            <summary>
            The lower coordinates value corner.
            </summary>
        </member>
        <member name="P:Claron.WIF.Box.CornerMax">
            <summary>
            The higher coordinates value corner.
            </summary>
        </member>
        <member name="P:Claron.WIF.Box.Center">
            <summary>
            The center of the box
            </summary>
        </member>
        <member name="P:Claron.WIF.Box.Size">
            <summary>
            The size of the box = (CornerMax - CornerMin), can be negative if the box is empty
            </summary>
        </member>
        <member name="P:Claron.WIF.Box.CornerPoints">
            <summary>
            Returns the 8 corner points of the box in this order:
            [0]: CornerMin + (0,     0,      0)
            [1]: CornerMin + (width, 0,      0)
            [2]: CornerMin + (width, height, 0)
            [3]: CornerMin + (0,     height, 0)
            [4]: CornerMin + (0,     0,      depth)
            [5]: CornerMin + (width, 0,      depth)
            [6]: CornerMin + (width, height, depth) (CornerMax)
            [7]: CornerMin + (0,     height, depth) 
            </summary>
        </member>
        <member name="T:Claron.WIF.Log">
             <summary>
             An interface class to the .net My.Application.Log
             Logging to the file log and event log are done using My.Application.Log.WriteEntry()
             In addition the last log message is cached and a simple string in memory only log
               is kept in a reference to a System.Windows.Forms.TextBox
            
             All functions are shared, so they can be called from anywhere in the code
             Begin() and TheEnd() are a pair that has to be matched (responsibility of programmer)
               Begin() starts a StopWatch and TheEnd prints the elapsed time to the log
               Multiple timers can run simultaneously (they are maintained on a heap, hence the calls have to match)
             </summary>
             <remarks>
             The FileLog is 
             There is a log file for each day with a clear start marker for each run on that day
             The event Log is in my computer -> manage -> event viewer -> Application
             The string log is in the System.Windows.Forms.TextBox member, just assign it 
             once and the Logger will update the text field
             Visualizer: app.config defines which listeners are defined and what levels they log
             </remarks>
        </member>
        <member name="F:Claron.WIF.Log._instance">
            <summary> The Log class singleton instance. </summary>
        </member>
        <member name="F:Claron.WIF.Log._logFileFlushTimer">
            <summary>
            Returns the timer for the log file.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.CreateInstance(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the Log class. Does nothing if the instance already exists.
            Thus use of logfile and encryption can only be set once at the beginning.
            If you want no logfile or with encryption make sure to call this
            CreateInstance() before calling any LogViewer function.
            </summary>
            <param name="createNewLogFile">Whether to create a new log file for the
            current run.</param>
            <param name="isActiveEncryption">encrypt log file entries or not.</param>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Log._logDir">
            <summary>
            The directory in which the log files are stored.
            </summary>
        </member>
        <member name="F:Claron.WIF.Log._logFileName">
            <summary>
            The log file name.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.GetLogFileName">
            <summary>
            Returns the log file name.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.GetLogFileLocation">
            <summary>
            Returns the log file location.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.GetLogBaseFileNameExtended">
            <summary>
            Returns the log base file name extended with the build type, date run on, and the run number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.GetRunNumber">
            <summary>
            Returns the run number for the application.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.Enter">
            <summary>
             Log function to use when entering a subroutine/function.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.Enter(System.String)">
            <summary>
            Log function to use when entering a subroutine/function.
            </summary>
            <param name="s">Message to use in logging. Default value = ""</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Log.Leave">
            <summary>
            Log function to use when exiting a subroutine/function.
            </summary>
        </member>
        <member name="M:Claron.WIF.Log.Leave(System.String)">
            <summary>
            Log function to use when exiting a subroutine/function.
            </summary>
            <param name="s">Message to use in logging. Default value = ""</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Log.TimerEnter(System.String)">
            <summary>
            Log function to use when timing a section of code. Timer Start.
            </summary>
            <param name="timerLabel">Label for this timer. Needs to match the label on call to TimerLeave().</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Log.TimerEnter(System.String,System.String)">
            <summary>
            Log function to use when timing a section of code. Timer Start.
            </summary>
            <param name="timerLabel">Label for this timer. Needs to match the label on call to TimerLeave().</param>
            <param name="s"></param>
        </member>
        <member name="M:Claron.WIF.Log.TimerLeave(System.String)">
            <summary>
            Log function to use when timing a section of code. Timer Stop.
            </summary>
            <param name="timerLabel">Label for this timer. Needs to match the label on call to TimerEnter().</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Log.TimerLeave(System.String,System.String)">
            <summary>
             Log function to use when timing a section of code. Timer Stop.
            </summary>
            <param name="timerLabel">Label for this timer. Needs to match the label on call to TimerEnter().</param>
            <param name="s"></param>
        </member>
        <member name="M:Claron.WIF.Log.Info(System.String)">
            <summary>
            Logs an informational string
            </summary>
            <param name="infoString">The string to log</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Log.TimeInfo(System.String)">
            <summary>
            Logs an informational string with timestamp
            </summary>
            <param name="infoString"></param>
        </member>
        <member name="M:Claron.WIF.Log.Info(System.Int32)">
            <summary>
            Logs a number.
            </summary>
            <param name="val">The value to log.</param>
        </member>
        <member name="M:Claron.WIF.Log.Warning(System.String)">
            <summary>
            Logs a warning string
            </summary>
            <param name="warningString"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Log.CommitLogString(System.String)">
            <summary>
            Writes the last log message to the active logging objects.
            </summary>
            <param name="logFileStr">The log message to use in the log file.
            </param>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Log.LogFileFlushTimer">
            <summary>
            Returns the timer for the log file.
            </summary>
        </member>
        <member name="P:Claron.WIF.Log.LastMsg">
            <summary>
            The last message string added to the log
            </summary>
        </member>
        <member name="P:Claron.WIF.Log.LastTimer">
            <summary>
            The last stopwatch timer paused by the logger.
            Is from the more recent of either Log.Leave() or Log.TimerLeave();
            </summary>
        </member>
        <member name="P:Claron.WIF.Log.IsActiveConsole">
            <summary>
            Property to get/set whether log messages are sent to the console.
            </summary>
        </member>
        <member name="P:Claron.WIF.Log.IsActiveLogFile">
            <summary>
            Property to get/set whether log messages are sent to the log file.
            </summary>
        </member>
        <member name="E:Claron.WIF.Log.LogWriterEvent">
            <summary>
            Subscription point for injecting custom log handlers invoked on every log message.
            </summary>
        </member>
        <member name="T:Claron.WIF.Log.LogWriterHandler">
            <summary>
            A delegate used for ancillary redirection of logged messages
            </summary>
            <param name="logger">the logger instance</param>
            <param name="message">the logged message</param>
        </member>
        <member name="F:Claron.WIF.LogXml._log">
            <summary>
            The XML logger instance.
            </summary>
        </member>
        <member name="F:Claron.WIF.LogXml._xmlWriter">
            <summary>
            The XML writer.
            </summary>
        </member>
        <member name="F:Claron.WIF.LogXml._xmlWriterFlushTimer">
            <summary>
            Timer used to flush output from XML writer.
            </summary>
        </member>
        <member name="F:Claron.WIF.LogXml._functionInfoStack">
            <summary>
            The function call stack.
            </summary>
        </member>
        <member name="M:Claron.WIF.LogXml.#ctor">
            <summary>
            Private constructor to prevent creation of more than one instance.
            </summary>
        </member>
        <member name="M:Claron.WIF.LogXml.CreateNewInstance(System.String)">
            <summary>
            Creates a new instance of the LogXml class.
            </summary>
            <param name="logFilePath">The directory in which the log file should be written to. Can
            be null in which case the log file will be written into WIF_LOG dir or the application
            dir if WIF_LOG is not defined.</param>
        </member>
        <member name="M:Claron.WIF.LogXml.GetLogFileName(System.String)">
            <summary>
            Returns the log file name to use for the given directory.
            </summary>
        </member>
        <member name="M:Claron.WIF.LogXml.Info(System.Object)">
            <summary>
            Adds a new info element to the log.
            </summary>
            <param name="value">The value for the element.</param>
        </member>
        <member name="M:Claron.WIF.LogXml.Info(System.String,System.Object)">
            <summary>
            Adds a new info element to the log.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="value">The value for the element.</param>
        </member>
        <member name="M:Claron.WIF.LogXml.Close">
            <summary>
            Closes the XML logger.
            </summary>
        </member>
        <member name="P:Claron.WIF.LogXml.XmlWriter">
            <summary>
            Returns the XMl writer.
            </summary>
        </member>
        <member name="P:Claron.WIF.LogXml.XmlWriterFlushTimer">
            <summary>
            Timer used to flush output from XML writer.
            </summary>
        </member>
        <member name="P:Claron.WIF.LogXml.FunctionInfoStack">
            <summary>
            The function call stack.
            </summary>
        </member>
        <member name="P:Claron.WIF.LogXml.Instance">
            <summary>
            The XML logger instance.
            </summary>
        </member>
        <member name="T:Claron.WIF.LogXml.FunctionInfo">
            <summary>
            Class to store function information while logging is taking place.
            </summary>
        </member>
        <member name="F:Claron.WIF.LogXml.FunctionInfo._name">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="F:Claron.WIF.LogXml.FunctionInfo._sw">
            <summary>
            Stopwatch to store time taken for function to execute.
            </summary>
        </member>
        <member name="M:Claron.WIF.LogXml.FunctionInfo.#ctor(System.String)">
            <summary>
            Creates a new function info object.
            </summary>
            <param name="functionName">The name of the function.</param>
        </member>
        <member name="P:Claron.WIF.LogXml.FunctionInfo.Name">
            <summary>
            The name of the function.
            </summary>
        </member>
        <member name="P:Claron.WIF.LogXml.FunctionInfo.TimeTakenMs">
            <summary>
            Returns the time taken by the function in ms. Note that the stopwatch is stopped
            when this property is read.
            </summary>
        </member>
        <member name="T:Claron.WIF.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Claron.WIF.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Claron.WIF.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Claron.WIF.Quaternion">
            <summary>
            Class represents a quaternion.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Quaternion.qx">
            <summary>
            The x-component of the quaternion.
            </summary>
        </member>
        <member name="F:Claron.WIF.Quaternion.qy">
            <summary>
            The y-component of the quaternion.
            </summary>
        </member>
        <member name="F:Claron.WIF.Quaternion.qz">
            <summary>
            The z-component of the quaternion.
            </summary>
        </member>
        <member name="F:Claron.WIF.Quaternion.qa">
            <summary>
            The scalar component of the quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.#ctor(System.Double[])">
            <summary>
            Creates a new quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.Dot(Claron.WIF.Quaternion)">
            <summary>
            Returns the dot product of two quaternions.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.Conjugate">
            <summary>
            Returns the conjugate of this quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.Inverse">
            <summary>
            Returns the inverse of this quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.Normalize">
            <summary>
            Normalizes the quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.Norm">
            <summary>
            THe Norm of the quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.SetFromAxisAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets this quaternion to a unit quaternion representing a rotation about an axis by
            a specified angle. Assumes that the axis vector is normalized.
            </summary>
            <param name="angle">The angle in radians.</param>
            <param name="vx">The x-component of the axis to rotate about.</param>
            <param name="vy">The y-component of the axis to rotate about.</param>
            <param name="vz">The z-component of the axis to rotate about.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Quaternion.ToMatrix">
            <summary>
            Returns the rotation matrix corresponding to this quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.ToMatrixArray">
            <summary>
            Returns the rotation matrix corresponding to this quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.ToMatrixArray(System.Double[]@)">
            <summary>
            Returns the rotation matrix corresponding to this quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.ToArray">
            <summary>
            Converts to an array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.ToRollPitchYaw">
            <summary>
            Converts the assumed normalized quaternion rotation to roll, pitch  and yaw angles in radians (0 ... 2Pi).
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.Exp">
            <summary>
            Returns the exponential of this quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.LogE">
            <summary>
            Returns the logarithm of this quaternion.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.AverageOld(Claron.WIF.Quaternion[])">
            <summary>
            Averages a set of quaternions.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.op_Subtraction(Claron.WIF.Quaternion,Claron.WIF.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.op_Addition(Claron.WIF.Quaternion,Claron.WIF.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.op_Multiply(Claron.WIF.Quaternion,Claron.WIF.Quaternion)">
            <summary>
            Multiplies two quaternions.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.op_Division(Claron.WIF.Quaternion,System.Double)">
            <summary>
            Divides by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.Quaternion.ToString">
            <summary>
            Returns a string representation of the quaternion.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.ISpaceMapper">
            <summary>
            Interface for space mapper classes.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.Map(Claron.WIF.Vector3)">
            <summary>
            Maps a position vector from the source RCS into the target RCS.
            </summary>
            <param name="vec">The position vector in the source RCS.</param>
            <returns>The position vector in the target RCS.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.Map(System.Double,System.Double,System.Double)">
            <summary>
            Maps a position vector from the source RCS into the target RCS.
            </summary>
            <param name="x">The x-coordinate of the position vector in the source
            RCS.</param>
            <param name="y">The y-coordinate of the position vector in the source
            RCS.</param>
            <param name="z">The z-coordinate of the position vector in the source
            RCS.</param>
            <returns>The position vector in the target RCS.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.MapBack(Claron.WIF.Vector3)">
            <summary>
            Maps a position vector from the target RCS into the source RCS.
            </summary>
            <param name="vec">The position vector in the target RCS.</param>
            <returns>The position vector in the source RCS.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.MapBack(System.Double,System.Double,System.Double)">
            <summary>
            Maps a position vector from the target RCS into the source RCS.
            </summary>
            <param name="x">The x-coordinate of the position vector in the target
            RCS.</param>
            <param name="y">The y-coordinate of the position vector in the target
            RCS.</param>
            <param name="z">The z-coordinate of the position vector in the target
            RCS.</param>
            <returns>The position vector in the source RCS.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.InverseI">
            <summary>
            Returns an interface to the inverse space mapper (a space mapper which maps points from
            the target RCS to the source RCS).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.ConcatenateI(Claron.WIF.ISpaceMapper)">
            <summary>
            Returns a new space mapper interface equivalent to applying this space mapper
            followed by the given space mapper.
            </summary>
            <param name="mapper">The space mapper to apply after this space mapper.
            </param>
            <returns>The new space mapper.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.SetToUnity">
            <summary>
            Initializes the space mapper to be an identity transformation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.IsUnity">
            <summary>
            Returns true if the space mapper is an identity transformation to within
             a specified tolerance.
            </summary>
            <returns> Returns true if the space mapper is an identity transformation.</returns>
        </member>
        <member name="M:Claron.WIF.ISpaceMapper.IsUnity(System.Double)">
            <summary>
            Returns true if the space mapper is an identity transformation to within
            a specified tolerance.
            </summary>
            <param name="tolerance">An optional tolerance parameter.</param>
            <returns>Returns true if the space mapper is an identity transformation.
            </returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.SpaceMapperSimilarity">
             <summary>
             Maps coordinates between two isotropic right-hand cartesian coordinate systems,
             Source and Target).
             </summary>
             <remarks>
             Currently, only similarity mapping (translation, rotation, scale) is supported.
             Anisotropic sampling rates are supported by the GridBox class and are, therefore, outside the
             scope of this class.
             The mapping from Source to Target is executed in the following order:
             * Shift (translate) in Source by the negative of the center (fixed) position
             * Rotate and scale in Source around the origin
             * Shift (translate) in Target
            
             Mathematically, mapping a row vector V in Source to row vector V' in Target:
             V' = (V - CS)[R] * Sc + T
             Where CS is the center of the rotation/scaling in Source, [R] is the rotation matrix,
             Sc is the scaling factor and T is the translation vector in Target
            
             Rotations are internally stored and manipulated using quaternions.
             Space mappers can be inverted and concatenated with other mappers to form
             new space mappers.
             </remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.CenterInSourceGet(System.Int32)">
            <summary>
            A component of the center of rotation/scaling (fixed point) in Source.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.CenterInTargetGet(System.Int32)">
            <summary>
            A component of the center of rotation/scaling (fixed point) in Target
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.HomoMat4x4">
            <summary>
            An equivalent homogeneous 4x4 transform matrix (multiplying a row vector on its right)
            </summary>
            <returns>A new 4x4 matrix, flattened to be linear (for efficiency)</returns>
            <remarks>To transform a vector (x,y,z) in S to (x',y',z') in T using a 4x4 homogeneous matrix HM:
            (x',y',z',1) = (x,y,z,1) * HM
            </remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.#ctor(System.String)">
            <summary>
            Reads a mapper from a file.
            </summary>
            <param name="fileName">The file to read the mapper from.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Write(System.String)">
            <summary>
            Writes a mapper to a file.
            </summary>
            <param name="fileName">The file to write the mapper to.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Read(System.String)">
            <summary>
            Reads a mapper from a file.
            </summary>
            <param name="fileName">The file to read the mapper from.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.#ctor(System.Double[])">
            <summary>
            Creates mapper from a HomoMat4x4 by decomposing it into its translation, rotation and scale components.
            http://callumhay.blogspot.com/2010/10/decomposing-affine-transforms.html
            </summary>
            <param name="matrix">The 4x4 homogeneous matrix</param>    
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Map(Claron.WIF.Vector3)">
            <summary>
            Maps a 3D location from Source to Target. Returns a new vector3.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Map(System.Double,System.Double,System.Double)">
            <summary>
            Maps a 3D location from Source to Target. Returns a new vector3.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Map(Claron.WIF.Vector3[])">
            <summary>
            Returns an array of mapped 3D locations (source->target) from a Source array.
            (more efficient than repeated calls to Map). Invalid input vectors are left invalid.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Map(System.Collections.IEnumerable)">
            <summary>
            Returns a list of mapped 3D locations (source->target) from a Source list (or any
            other IEnumerable object).
            (more efficient than repeated calls to Map). Invalid input vectors are left invalid.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.MapByRef(System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps a 3D location from source to target.
            </summary>
            <param name="x">The x-position.</param>
            <param name="y">The y-position.</param>
            <param name="z">The z-position.</param>
            <remarks>Uses reference variables.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.MapBack(Claron.WIF.Vector3)">
            <summary>
            Maps a 3D location back from T back to S. Returns a new vector3.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.MapBack(System.Double,System.Double,System.Double)">
            <summary>
            Maps a 3D location from the target coordinate system to the source
            coordinate system.
            </summary>
            <param name="x">x-coordinate of the point to map back.</param>
            <param name="y">y-coordinate of the point to map back.</param>
            <param name="z">z-coordinate of the point to map back.</param>
            <returns>The mapped back position as a Vector3.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.MapBack(Claron.WIF.Vector3[])">
            <summary>
            Returns an array of 3D locations mapped back (target->source) from the input array.
            (more efficient than repeated calls to MapBack). Invalid input vectors are left invalid.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.MapBackByRef(System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps a 3D location from the target coordinate system into the source
            coordinate system.
            </summary>
            <param name="x">x-coordinate of the point to map back.</param>
            <param name="y">y-coordinate of the point to map back.</param>
            <param name="z">z-coordinate of the point to map back.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateV(Claron.WIF.Vector3)">
            <summary>
            Return a new 3D vector rotated from Source to Target,
            without any pre or post shifts or scaling (pure rotation)
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateBackV(Claron.WIF.Vector3)">
            <summary>
            Return a new 3D vector rotated back from Target to Source,
            without any pre or post shifts (pure rotation)
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAndScaleV(Claron.WIF.Vector3)">
            <summary>
            Return a new 3D vector rotated and scaled from Source to Target, without any pre or post shifts
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAndScaleBackV(Claron.WIF.Vector3)">
            <summary>
            Return a new 3D vector rotated and scaled back from Target to Source, without any pre or post shifts
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Inverse">
            <summary>
            Returns the inverse transform (from Target to Source)
            </summary>
            <remarks>Preserves the LastUpdate property of this mapper</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.InverseI">
            <summary>
            Returns an interface to the inverse transform (from Target to Source)
            </summary>
            <remarks>Preserves the LastUpdate property of this mapper</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Concatenate(Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Returns a new mapping equivalent to applying this, then a subsequent mapping.
            When the subsequent mapping is Nothing, it is treated as a unity mapping, ie,
            a copy of this mapper is returned.
            </summary>
            <remarks>Gets the larger LastUpdate property the two mappers</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.ConcatenateI(Claron.WIF.ISpaceMapper)">
            <summary>
            Returns a new mapper interface equivalent to applying this, then a subsequent mapper.
            When the subsequent mapping is null, it is treated as a unity mapping, ie,
            a copy of this mapper is returned.
            Currently supports only concatenation of another SpaceMapperSimilarity.
            </summary>
            <remarks>Gets the larger LastUpdate property the two mappers</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.SetAs(Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Sets the properties of this mapper to be the same as those of another.
            </summary>
            <remarks>Useful in maintaining a constant reference to the same object while using
            operations such as inversion and concatenation.
            Note that the LastUpdate is updated only if any property of the other SM are different
            </remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.SetAsI(Claron.WIF.ISpaceMapper)">
            <summary>
            Sets the properties of this mapper to be the same as those of another.
            Currently supports only other SpaceMapperSimilarity.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.SetRotationAs(Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Sets the rotation portion of this mapper to be the same as that of another.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotationSetAs(Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Sets the rotation portion of this mapper to be the same as that of another.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.BlendWith(Claron.WIF.SpaceMapperSimilarity,System.Double)">
            <summary>
            Blend the properties with those of another mapper (for interpolation/extrapolation)
            </summary>
            <param name="OtherMapper">The space mapper to blend with</param>
            <param name="MyFraction">The fraction of my contribution to the result, usually in the
            range 0 to 1 (interpolation). Outside that range, extrapolation will occur.</param>
            <remarks>Works for animation.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotationBlendWith(Claron.WIF.SpaceMapperSimilarity,System.Double)">
            <summary>
            Blend the rotation part of the mapping with that of another mapper (for interpolation/extrapolation)
            </summary>
            <param name="OtherMapper">The space mapper to blend with</param>
            <param name="MyFraction">The fraction of my contribution to the result, usually in the
            range 0 to 1 (interpolation). Outside that range, extrapolation will occur.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.InterpolateTo(Claron.WIF.SpaceMapperSimilarity,System.Double)">
            <summary>
            Blend the properties with those of another mapper (for interpolation/extrapolation)
            </summary>
            <param name="OtherMapper">The space mapper to interpolate to</param>
            <param name="OtherFraction">The fraction of the other's contribution to the result,
            usually in the range 0 to 1. Outside that range, extrapolation will occur.</param>
            <remarks>Works for animation.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Clone">
            <summary>
            Returns an exact copy of this mapper
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.IsUnity">
            <summary>
            Returns True iff the mapping is a unity mapping (within tolerance)
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.IsUnity(System.Double)">
            <summary>
            Returns True iff the mapping is a unity mapping (within tolerance)
            </summary>
            <param name="Tolerance"> The Tolerance limit</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.IsUnityRotation">
            <summary>
            Returns True iff there mapping applies no rotation
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotationReset">
            <summary>
            Sets the rotation to unity (ie, no rotation)
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotationSet(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Sets the rotation directly, by providing 2 rotated axis vectors (in target RCS).
            </summary>
            <param name="SourceXinTarget">A vector representing the position of an X
            unit vector (1,0,0) in Source rotated to Target</param>
            <param name="SourceYinTarget">A vector representing the position of a Y
            unit vector (0,1,0) in Source rotated to Target</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotationSet(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Sets the rotation directly from two non co-linear direction vectors in
            source and target. The first direction will always be rotated accurately by the result,
            but the second may not be if the angle between the input directions is different 
            between source and target.
            </summary>
            <param name="V0InSource">Vector of direction 0 in Source space</param>
            <param name="V1InSource">Vector of direction 1 in Source space</param>
            <param name="V0InTarget">Vector 0 in Target space</param>
            <param name="V1InTarget">Vector 1 in Target space</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.SetFrom3ptsInSourceAndTarget(Claron.WIF.Vector3[],Claron.WIF.Vector3[])">
            <summary>
            Sets the mapper from the coordinates of 3 points in
            the source and target system.
            The first point is used as the center, and the other two points define the
            rotation and scaling.
            </summary>
            <param name="PtsInSrc">3 non co-linear points in source.</param>
            <param name="PtsInTgt">Coordinates of the 3 points in Target</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundAxisRadians(Claron.WIF.Vector3,System.Double)">
            <summary>
            Rotate around a given target RCS vector as an Axis by the given angle.
            </summary>
            <param name="AxisInTarget">A vector (any length) in the Target RCS</param>
            <param name="AngleRads">The rotation angle in radians, clockwise when looking in the vector's direction</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundAxisDegrees(Claron.WIF.Vector3,System.Double)">
            <summary>
            Rotate around a given vector as an axis, by the given angle.
            </summary>
            <param name="AxisInTarget">A vector (any length) in the Target RCS.</param>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundSourceAxisRadians(Claron.WIF.Vector3,System.Double)">
            <summary>
            Rotate around a given source RCS vector as an Axis by the given angle.
            </summary>
            <param name="AxisInSource">A vector (any length) in the Target RCS</param>
            <param name="AngleRads">The rotation angle in radians, clockwise when looking in the vector's direction</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundSourceAxisDegrees(Claron.WIF.Vector3,System.Double)">
            <summary>
            Rotate around a given vector as an axis, by the given angle.
            </summary>
            <param name="AxisInSource">A vector (any length) in the Target RCS</param>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundSourceAxisDegreesX(System.Double)">
            <summary>
            Rotate around the x-axis in the source RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but will change the y,z source axes.
            </summary>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundSourceAxisDegreesY(System.Double)">
            <summary>
            Rotate around the y-axis in the source RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but will change the x,z source axes.
            </summary>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundSourceAxisDegreesZ(System.Double)">
            <summary>
            Rotate around the z-axis in the source RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but will change the x,y source axes.
            </summary>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundTargetAxisDegreesX(System.Double)">
            <summary>
            Rotate around the x-axis in the target RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but might change all source axes.
            </summary>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundTargetAxisDegreesY(System.Double)">
            <summary>
            Rotate around the y-axis in the target RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but might change all source axes.
            </summary>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundTargetAxisDegreesZ(System.Double)">
            <summary>
            Rotate around the z-axis in the target RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but might change all source axes.
            </summary>
            <param name="AngleDegs">The rotation angle in degrees, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundTargetAxisRadiansX(System.Double)">
            <summary>
            Rotate around the x-axis in the target RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but might change all source axes.
            </summary>
            <param name="AngleRads">The rotation angle in radians, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundTargetAxisRadiansY(System.Double)">
            <summary>
            Rotate around the y-axis in the target RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but might change all source axes.
            </summary>
            <param name="AngleRads">The rotation angle in radians, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateAroundTargetAxisRadiansZ(System.Double)">
            <summary>
            Rotate around the z-axis in the target RCS, clockwise when looking in the vector's direction.
            Will not change any target axes, but might change all source axes.
            </summary>
            <param name="AngleRads">The rotation angle in radians, clockwise when looking in the vector's direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateEulerRadians(System.Double,System.Double,System.Double)">
            <summary>
            In the Target RCS, rotate around Z, then around  X, then around Z again.
            </summary>
            <param name="AroundZ">Radians rotation around Z, clockwise when looking in the positive Z direction</param>
            <param name="AroundX">Radians rotation around X, clockwise when looking in the positive X direction</param>
            <param name="AroundZ2">Radians rotation around Z again, clockwise when looking in the positive Z direction</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateEulerRadiansinXYZ(System.Double,System.Double,System.Double)">
            <summary>
            Less common euler rotation: In the Target RCS, rotate around X, then around  Y, then around Z.
            </summary>
            <param name="AroundX">Radians rotation around X, clockwise when looking in the positive X direction</param>
            <param name="AroundY">Radians rotation around Y, clockwise when looking in the positive Y direction</param>
            <param name="AroundZ">Radians rotation around Z again, clockwise when looking in the positive Z direction</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.GetEulerAngles">
            <summary>
            Returns the Euler rotation angles corresponding to the quaternions stored in the mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateEulerDegrees(System.Double,System.Double,System.Double)">
            <summary>
            Rotate around Z, then around (new) X, then around (new) Z again. All axes are in target RCS.
            </summary>
            <param name="AroundZ">Degrees rotation around Z, clockwise when looking in the positive Z direction</param>
            <param name="AroundX">Degrees  rotation around X, clockwise when looking in the positive X direction</param>
            <param name="AroundZ2">Degrees  rotation around Z again, clockwise when looking in the positive Z direction</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateByVirtualTrackballInTarget(Claron.WIF.Vector3,Claron.WIF.Vector3,System.Double)">
            <summary>
            Apply rotation by simulating a virtual trackball movement between two locations in the target coordinate space.
            </summary>
            <param name="StartXY">Start movement XY coordinates relative to trackball center (Z is ignored)</param>
            <param name="EndXY">End movement XY coordinates</param>
            <param name="TrackballRadius">The radius of the trackball in Target</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RotateByVirtualTrackballInSource(Claron.WIF.Vector3,Claron.WIF.Vector3,System.Double)">
            <summary>
            Apply rotation by simulating a virtual trackball movement between two locations in the source coordinate space.
            </summary>
            <param name="StartXY">Start movement XY coordinates relative to trackball center (Z is ignored)</param>
            <param name="EndXY">End movement XY coordinates</param>
            <param name="TrackballRadius">The radius of the trackball in Source</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.SameAs(Claron.WIF.SpaceMapperSimilarity,System.Double)">
            <summary>
            Indicates whether the centers, scale and quaternions of a given space mapper are
            equal to those of this mapper within a given value tolerance. Recommended for
            use when it is undesirable that small rounding errors will cause equality to fail.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.SameAs(Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Returns True iff given space mapper is strictly equal to this mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.op_Addition(Claron.WIF.SpaceMapperSimilarity,Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Concatenate two mappers to form a third one
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.RefreshRotMat">
            <summary>
            Refreshes the rotation matrix from the quaternions
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.Mat2Q(System.Double[])">
            <summary>
            Converts a 3x3 rotation matrix to a quaternions vector (4 elements)
            </summary>
            <param name="Mat">the 3x3 rotation matrix (applied on the left of vectors)</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.NormalizeQ(System.Double[])">
            <summary>
            Normalizes a quaternion vector in place (eliminating any scaling)
            </summary>
            <param name="Q">the 4-element quaternion vector to be normalized, indexed X Y Z W</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.ConcatenateQs(System.Double[],System.Double[])">
            <summary>
            Given two normalized quaternions, Q1 and Q2, returns a quaternion that is equivalent
            to rotating by Q1, then by Q2
            </summary>
            <remarks>The formula was taken from MathWorld</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.InterpolateQs(System.Double[],System.Double[],System.Double)">
            <summary>
            Interpolates between two quaternion vectors, p and q.
            </summary>
            <param name="p">A first 4-element quaternion vector, indexed X Y Z W</param>
            <param name="q">A second 4-element quaternion vector</param>
            <param name="t">Interpolation position between 0 and 1 (silently clipped)</param>
            <returns>An interpolated quaternion vector representing an intermediate orientation.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperSimilarity.ToString">
            <summary>
            Generates a string representation of the fields.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperSimilarity.CenterInSource">
            <summary>
            The center of rotation/scaling (fixed point) in Source.
            </summary>
            <remarks>The negative of the shift vector in Source</remarks>
        </member>
        <member name="P:Claron.WIF.SpaceMapperSimilarity.CenterInTarget">
            <summary>
            The center of rotation/scaling (fixed point) in Target
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperSimilarity.Quaternions">
            <summary>
            The normalized quaternions representation of the rotation.
            The indexed members of normalized quaternion Q have the following interpretation,
            when considering a rotation of phi around a unit vector (ux, uy, uv):
            Q(0) := ux * sin(phi/2)
            Q(1) := uy * sin(phi/2)
            Q(2) := uz * sin(phi/2)
            Q(3) := cos(phi/2)
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperSimilarity.RotMat">
            <summary>
            The 3x3 matrix representation of the rotation.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine.X">
            <summary>
            Used to index into the quaternions array.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine.Y">
            <summary>
            Used to index into the quaternions array.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine.Z">
            <summary>
            Used to index into the quaternions array.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine.W">
            <summary>
            Used to index into the quaternions array.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._centerInSource">
            <summary>
            The center in the source coordinate system.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._centerInTarget">
            <summary>
            The point to which the center in the source coordinate system is mapped to in the target
            coordinate system.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._scaleX">
            <summary>
            The scaling factor in the x-direction.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._scaleY">
            <summary>
            The scaling factor in the y-direction.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._scaleZ">
            <summary>
            The scaling factor in the z-direction.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._qs">
            <summary>
            A normalized quaternion representing no rotation.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._rotMat">
            <summary>
            The representation of the rotation as a 3x3 matrix, derived from the quaternions.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._rotMatLastUpdateTicks">
            <summary>
            The last time that the rotation matrix was updated.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._rotMatInputsLastUpdateTicks">
            <summary>
            The last time that the rotation matrix input parameters were updated.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._txy">
            <summary>
            Shearing angle between x- and y-axes.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._txz">
            <summary>
            Shearing angle between x- and z-axes.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._tyz">
            <summary>
            Shearing angle between y- and z-axes.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._shearMatLastUpdateTicks">
            <summary>
            The last time that the shear matrix was updated.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._shearMatInputsLastUpdateTicks">
            <summary>
            The last time that the shear matrix input parameters were updated.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._shearMat">
            <summary>
            The shearing matrix.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._matrixILastUpdateTicks">
            <summary>
            The last time that the inverse matrix was updated.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperAffine._matrixI">
            <summary>
            The inverse matrix.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.#ctor">
            <summary>
            Creates a new affine space mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.#ctor(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Creates a new affine space mapper.
            </summary>
            <param name="centerInSource">The center in the source coordinate system.</param>
            <param name="centerInTarget">The point to which the center in the source coordinate system
            gets mapped to.</param>
            <param name="scaleX">The scaling factor in the x-direction.</param>
            <param name="scaleY">The scaling factor in the y-direction.</param>
            <param name="scaleZ">The scaling factor in the z-direction.</param>
            <param name="qs">The rotation quaternions.</param>
            <param name="txy">Shearing angle.</param>
            <param name="txz">Shearing angle.</param>
            <param name="tyz">Shearing angle.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.#ctor(System.Double[])">
            <summary>
            Creates a new affine space mapper by decomposing the given matrix into its component
            transformations.
            </summary>
            <param name="matrix">The matrix to initialize the affine space mapper from.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.Clone">
            <summary>
            Returns a clone of this mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.RefreshRotMatrix">
            <summary>
            Refreshes the rotation matrix from the quaternions.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.RefreshShearMatrix">
            <summary>
            Refreshes the shearing matrix from the shearing angles.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.HomoMat4x4">
            <summary>
            An equivalent homogeneous 4x4 transform matrix (multiplying a row vector on its right)
            </summary>
            <returns>A new 4x4 matrix, flattened to be linear (for efficiency)</returns>
            <remarks>To transform a vector (x,y,z) in S to (x',y',z') in T using a 4x4 homogeneous matrix HM:
            (x', y', z', 1) = (x, y, z, 1) * HM
            </remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.Mat2Q(System.Double[])">
            <summary>
            Converts a 3x3 rotation matrix to a quaternions vector (4 elements)
            </summary>
            <param name="mat">The 3x3 rotation matrix (applied on the left of vectors)</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.NormalizeQ(System.Double[])">
            <summary>
            Normalizes a quaternion vector in place (eliminating any scaling)
            </summary>
            <param name="q">the 4-element quaternion vector to be normalized, indexed X Y Z W</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.ConcatenateQs(System.Double[],System.Double[])">
            <summary>
            Given two normalized quaternions, Q1 and Q2, returns a quaternion that is equivalent
            to rotating by Q1, then by Q2
            </summary>
            <remarks>The formula was taken from MathWorld</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.InterpolateQs(System.Double[],System.Double[],System.Double)">
            <summary>
            Interpolates between two quaternion vectors, p and q
            </summary>
            <param name="p">A first 4-element quaternion vector, indexed X Y Z W</param>
            <param name="q">A second 4-element quaternion vector</param>
            <param name="t">Interpolation position between 0 and 1 (silently clipped)</param>
            <returns>An interpolated quaternion vector representing an intermediate orientation</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.MapByRef(System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps a 3D location from source to target.
            </summary>
            <param name="x">The x-position.</param>
            <param name="y">The y-position.</param>
            <param name="z">The z-position.</param>
            <remarks>Uses reference variables.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.InverseI">
            <summary>
            Returns the inverse of this mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.Inverse">
            <summary>
            Returns the inverse of this mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.Concatenate(Claron.WIF.SpaceMapperAffine)">
            <summary>
            Returns a new mapping equivalent to applying this, then a subsequent mapping.
            When the subsequent mapping is null, it is treated as a unity mapping, i.e.,
            a copy of this mapper is returned.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.GetEulerRadiansXyz">
            <summary>
            Returns the Euler rotation angles corresponding to the quaternions stored in the mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.RotationReset">
            <summary>
            Sets the rotation to unity (i.e., no rotation).
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.RotateEulerRadiansXyz(System.Double,System.Double,System.Double)">
            <summary>
            Less common Euler rotation: In the target coordinate system, rotate around X, then around 
            Y, then around Z.
            </summary>
            <param name="aroundX">Radians rotation around X, clockwise when looking in the positive X direction</param>
            <param name="aroundY">Radians rotation around Y, clockwise when looking in the positive Y direction</param>
            <param name="aroundZ">Radians rotation around Z again, clockwise when looking in the positive Z direction</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperAffine.RotateAroundAxisRadians(Claron.WIF.Vector3,System.Double)">
            <summary>
            Rotate around a given target vector as an axis by the given angle.
            </summary>
            <param name="axisInTarget">A vector (any length) in the target coordinate system.</param>
            <param name="angleRads">The rotation angle in radians, clockwise when looking in the
            vector's direction.</param>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.CenterInSource">
            <summary>
            The center of rotation/scaling (fixed point) in the source coordinate system.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.CenterInTarget">
            <summary>
            The point to which the center in the source coordinate system is mapped to in the target
            coordinate system.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.ScaleX">
            <summary>
            The scaling factor in the x-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.ScaleY">
            <summary>
            The scaling factor in the y-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.ScaleZ">
            <summary>
            The scaling factor in the z-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.Quaternions">
            <summary>
            The normalized quaternions representation of the rotation.
            The indexed members of normalized quaternion Q have the following interpretation,
            when considering a rotation of phi around a unit vector (ux, uy, uv):
            _qs[0] = ux * sin(phi/2)
            _qs[1] = uy * sin(phi/2)
            _qs[2] = uz * sin(phi/2)
            _qs[3] = cos(phi/2)
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.Txy">
            <summary>
            Shearing angle between x- and y-axes.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.Txz">
            <summary>
            Shearing angle between x- and z-axes.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperAffine.Tyz">
            <summary>
            Shearing angle between y- and z-axes.
            </summary>
        </member>
        <member name="T:Claron.WIF.SpaceMapperElastic">
             <summary>
             Class for doing space mappings using free-form deformations. See Sederberg
             and Parry's paper for more information:
            
             Thomas W. Sederberg and Scott R. Parry,
             Free-form deformation of solid geometric models,
             SIGGRAPH '86: Proceedings of the 13th annual conference on Computer
             graphics and interactive techniques,
             1986, pp. 151--160, doi = http://doi.acm.org/10.1145/15922.15903,
             ACM Press, New York, NY, USA.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._simMapper">
            <summary>
            Internal similarity space mapper used to do global part of
            transformation.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._simMapperInverse">
            <summary>
            Inverse of the space mapper similarity transformation used to
            do the global part of the transformation.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._cpGrid">
            <summary>
            Grid box storing the dimensions and control point spacing of the
            free-form deformations.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._B3">
            <summary>
            Lookup table for the cubic B-spline basis functions.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._B3D1">
            <summary>
            Lookup table for the first derivative of the cubic B-spline basis
            functions.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._B3D2">
            <summary>
            Lookup table for the second derivative of the cubic B-spline basis
            functions.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._dxs">
            <summary>
            Array storing the control point displacements in the x-direction.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._dys">
            <summary>
            Array storing the control point displacements in the y-direction.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._dzs">
            <summary>
            Array storing the control point displacements in the z-direction.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._min">
            <summary>
            The position of the bottom left-hand corner of the control point grid.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._max">
            <summary>
            The position of the top right-hand corner of the control point grid.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._vecX">
            <summary>
            The x-orientation vector.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._vecY">
            <summary>
            The y-orientation vector.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._vecZ">
            <summary>
            The z-orientation vector.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._ci2pr">
            <summary>
            4x4 matrix to transform from control point index to patient scan RCS.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._pr2ci">
            <summary>
            4x4 matrix to transform from patient scan RCS to control point index.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElastic._activeParams">
            <summary>
            Active control point parameters.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.#ctor(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3_I32)">
            <summary>
            Creates a new elastic space mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.#ctor(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3_I32,Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Creates a new elastic space mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.#ctor(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.SpaceMapperSimilarity)">
            <summary>
            Creates a new space mapper with the given control point spacing in mm.
            </summary>
            <param name="min">The position of the bottom left-hand corner of the control point grid.</param>
            <param name="max">The position of the top right-hand corner of the control point grid.</param>
            <param name="vecX"></param>
            <param name="vecY"></param>
            <param name="spacingMm">The spacing between control points in the x-, y-, z-directions stored
            as the components of the vector.</param>
            <param name="simMapper">The similarity space mapper used to calculate
            the global motion. If nothing is specified then a unity transformation
            is used. Default value = null</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.#ctor(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3_I32,Claron.WIF.SpaceMapperSimilarity,System.Double[],System.Double[],System.Double[])">
            <summary>
            Creates a new elastic space mapper with the given control point dimensions.
            </summary>
            <param name="min">The position of the bottom left-hand corner of the control point grid.</param>
            <param name="max">The position of the top right-hand corner of the control point grid.</param>
            <param name="vecX"></param>
            <param name="vecY"></param>
            <param name="nCps">The number of control points in the x-, y-, and z-directions.</param>
            <param name="simMapper">The similarity space mapper used to calculate
            the global motion. If nothing is specified then a unity transformation
            is used. Default value = null</param>
            <param name="dxs">Default value = null</param>
            <param name="dys">Default value = null</param>
            <param name="dzs">Default value = null</param>
            <remarks>The control point spacing is determined from the bounds and
            the number of control points desired.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Initialize(Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3,Claron.WIF.Vector3_I32,Claron.WIF.SpaceMapperSimilarity,System.Double[],System.Double[],System.Double[])">
            <summary>
            Initializes the elastic space mapper.
            </summary>
            <param name="min">The position of the bottom left-hand corner of the control point grid.</param>
            <param name="max">The position of the top right-hand corner of the control point grid.</param>
            <param name="vecX">The x-orientation vector of the control point grid.</param>
            <param name="vecY">The y-orientation vector of the control point grid.</param>
            <param name="nCps">The number of control points in the x-, y-, and z-directions.</param>
            <param name="simMapper">The similarity space mapper used to calculate
            the global motion. If nothing is specified then a unity transformation
            is used. Default value = null</param>
            <param name="dxs">Default value = null</param>
            <param name="dys">Default value = null</param>
            <param name="dzs">Default value = null</param>
            <remarks>The control point spacing is determined from the bounds and
            the number of control points desired.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetControlPointDims">
            <summary>
            Returns the control point dimensions.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetControlPointDisplacementsX">
            <summary>
            Returns the control point displacements in the x-direction.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetControlPointDisplacementsY">
            <summary>
            Returns the control point displacements in the y-direction.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetControlPointDisplacementsZ">
            <summary>
            Returns the control point displacements in the z-direction.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetParameterValues(System.Double[],System.Double[],System.Double[],System.Double@,System.Double[],System.Double[],System.Double[],System.Double[],System.Int32@,System.Int32@,System.Int32@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Returns the space mapper elastic parameters.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Save(System.String)">
            <summary>
            Saves the space mapper elastic parameters.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Load(System.String)">
            <summary>
            Loads a elastic space mapper from the given file.
            </summary>
            <param name="filePath">The file path of the space mapper.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ToByteArray">
            <summary>
            Returns a byte array representing this space mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.FromByteArray(System.Byte[],System.Int32@)">
            <summary>
            Returns a new elastic space mapper from the byte array.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Clone">
            <summary>
            Clones the space mapper.
            </summary>
            <returns>The clone.</returns>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ControlPointIndexToPosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the control point position.
            </summary>
            <param name="x">The x-control point index.</param>
            <param name="y">The y-control point index.</param>
            <param name="z">The z-control point index.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ControlPointIndexToPosition(Claron.WIF.Vector3)">
            <summary>
            Returns the control point position in patient scan coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ControlPointIndicesParameterOffsetsAndPositions">
            <summary>
            Returns the control point locations.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.PositionToControlPointIndex(System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the control point index.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="z">The z position.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.PositionToControlPointIndex(Claron.WIF.Vector3)">
            <summary>
            Returns the control point index.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ControlPointIndexToGridIndex(Claron.WIF.Vector3,Claron.WIF.GridBox)">
            <summary>
            Returns the control point position in grid index coordinates.
            </summary>
            <param name="pos">The input position.</param>
            <param name="grid">The grid which is to be used for the conversion.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ControlPointSpacingInGridIndexCoordinates(Claron.WIF.GridBox)">
            <summary>
            Returns the control point spacing in grid index coordinates.
            </summary>
            <param name="grid">The grid to use for the conversion.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Map(Claron.WIF.Vector3)">
            <summary>
            Maps a position vector from the source to the target.
            </summary>
            <param name="vec">The vector to map.</param>
            <returns>The mapped position.</returns>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Map(System.Double,System.Double,System.Double)">
             <summary>
             Maps a position vector from the source to target.
             </summary>
             <param name="x">The x-coordinate of the position vector to map.
             </param>
             <param name="y">The y-coordinate of the position vector to map.
             </param>
             <param name="z">The z-coordinate of the position vector to map.
             </param>
             <returns>The mapped position.</returns>
             <remarks>The mapping is done by applying first a similarity
             transformation to (x, y, z) to obtain T_sim(x, y, z). Then the
             displacement produced by the free-form deformation is calculated to
             give D_ffd(x, y, z). The final mapped position is then given by the
             sum:
            
             T(x, y, z) = T_sim(x, y, z) + D_ffd(x, y, z).
             </remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.MapByRef(System.Double@,System.Double@,System.Double@)">
             <summary>
             Maps a position vector from the source to target.
             </summary>
             <param name="x">The x-coordinate of the position vector to map.
             </param>
             <param name="y">The y-coordinate of the position vector to map.
             </param>
             <param name="z">The z-coordinate of the position vector to map.
             </param>
             <remarks>The mapping is done by applying first a similarity
             transformation to (x, y, z) to obtain T_sim(x, y, z). Then the
             displacement produced by the free-form deformation is calculated to
             give D_ffd(x, y, z). The final mapped position is then given by the
             sum:
            
             T(x, y, z) = T_sim(x, y, z) + D_ffd(x, y, z).
            
             </remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GlobalMapByRef(System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps a position vector from the source to target (does only global mapping).
            </summary>
            <param name="x">The x-coordinate of the position vector to map.
            </param>
            <param name="y">The y-coordinate of the position vector to map.
            </param>
            <param name="z">The z-coordinate of the position vector to map.
            </param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GlobalMapByRefInverse(System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps a position vector from the target to source (does only global mapping).
            </summary>
            <param name="x">The x-coordinate of the position vector to map.
            </param>
            <param name="y">The y-coordinate of the position vector to map.
            </param>
            <param name="z">The z-coordinate of the position vector to map.
            </param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.LocalDisplacement(System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates local displacement generated by free-form deformation.
            </summary>
            <param name="x">The x-coordinate of the position vector to map.
            </param>
            <param name="y">The y-coordinate of the position vector to map.
            </param>
            <param name="z">The z-coordinate of the position vector to map.
            </param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Jacobian3D(System.Double,System.Double,System.Double,System.Double[0:,0:])">
            <summary>
            Calculates the Jacobian matrix at a given position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="jac"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.B3(System.Int32,System.Double)">
            <summary>
            Returns the value of the i-th cubic B-spline basis function.
            </summary>
            <param name="i">The basis function, 0, 1, 2, or 3.</param>
            <param name="t">The parameter value, should be in range [0, 1].</param>
            <returns>The value of the i-th cubic B-spline basis function.</returns>
            <remarks>An exception is thrown if i is not a valid value, however
            no checks are made on the parameter value t.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.B3(System.Double)">
            <summary>
            Returns the value of the cubic B-spline basis function.
            </summary>
            <param name="t">The parameter values should be in the range [-2, 2].
            </param>
            <returns>The value of the cubic B-spline function.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.B3D1(System.Int32,System.Double)">
            <summary>
            Returns the first derivative of the i-th cubic B-spline basis function.
            </summary>
            <param name="i">The basis function, 0, 1, 2, or 3.</param>
            <param name="t">The parameter value, should be in range [0, 1].</param>
            <returns>The value of the first derivative of the i-th cubic B-spline
            basis function.</returns>
            <remarks>An exception is thrown if i is not a valid value, however no
            checks are made on the parameter value t.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.B3D1(System.Double)">
            <summary>
            Returns the first derivative of the cubic B-spline function.
            </summary>
            <param name="t">The parameter value should be in the range [-2, 2].</param>
            <returns>The value of the first derivative of the cubic B-spline
            function.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.B3D2(System.Int32,System.Double)">
            <summary>
            Returns the second derivative of the i-th cubic B-spline basis function.
            </summary>
            <param name="i">The basis function, 0, 1, 2, or 3.</param>
            <param name="t">The parameter value, should be in range [0, 1].</param>
            <returns>The value of the second derivative of the i-th cubic B-spline
            basis function.</returns>
            <remarks>An exception is thrown if i is not a valid value, however no
            checks are made on the parameter value t.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.B3D2(System.Double)">
            <summary>
            Returns the second derivative of the cubic B-spline function.
            </summary>
            <param name="t">The parameter value should be in the range [-2, 2].</param>
            <returns>The value of the second derivative of the cubic B-spline function.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.MapBack(Claron.WIF.Vector3)">
            <summary>
            Returns the vector in the source which maps to the given target vector.
            </summary>
            <param name="vec"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.MapBack(System.Double,System.Double,System.Double)">
            <summary>
            Returns the vector in the source which maps to the given target vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ConcatenateI(Claron.WIF.ISpaceMapper)">
            <summary>
            TODO: Raj, needs implementation.
            </summary>
            <param name="mapper"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.InverseI">
            <summary>
            TODO: Raj, needs implementation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Inverse">
            <summary>
            TODO: Raj, needs implementation.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.IsUnity(System.Double)">
            <summary>
            Returns true if the space mapper is a unity mapping.
            </summary>
            <param name="tolerance">Optional tolerance value.</param>
            <returns>True if the space mapper is a unity mapping, false otherwise.
            </returns>
            <remarks>If the magnitude of a control point displacement in the x, y,
            and z directions is always less than the tolerance then the mapping is
            considered to be a unity mapping.</remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.SetToUnity">
            <summary>
            Sets the mapper to be a unity mapping.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ResetControlPointDisplacements">
            <summary>
            Sets all control point displacement components to 0.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.SetAs(Claron.WIF.SpaceMapperElastic)">
            <summary>
            Sets this mapper to have the same property values as the given mapper.
            </summary>
            <param name="OtherElasticMapper">The mapper to copy the property values from.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.SimilarTo(Claron.WIF.SpaceMapperElastic,System.Double)">
            <summary>
            Returns true if this mapper produces the same mapping as the given
            mapper.
            </summary>
            <param name="elasticMapper">The mapper to compare to.</param>
            <param name="tolerance">An optional tolerance value used </param>
            <returns>Returns true if this mapper produces the same mapping as the
            given mapper.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ParameterToControlPointGridIndex(System.Int32)">
            <summary>
            Returns the control point indices corresponding to a parameter value.
            </summary>
            <param name="p">The parameter value.</param>
            <returns>An array of 3 Int32's giving the control point index value.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ParameterToControlPointGridIndex(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Converts space mapper parameter number to control point index.
            </summary>
            <param name="p">The parameter number.</param>
            <param name="i">The output control point index.</param>
            <param name="j">The output control point index.</param>
            <param name="k">The output control point index.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.ControlPointGridIndexToParameter(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the control point index into a parameter value.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetControlPointDisplacementX(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the control point displacement in the x-direction for the
            specified control point.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetControlPointDisplacementY(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the control point displacement in the y-direction for the
            specified control point.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.GetControlPointDisplacementZ(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the control point displacement in the z-direction for the
            specified control point.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.SetControlPointDisplacementX(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the control point displacement in the x-direction for the
            specified control point.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
            <param name="val"></param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.SetControlPointDisplacementY(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the control point displacement in the y-direction for the
            specified control point.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
            <param name="val"></param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.SetControlPointDisplacementZ(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the control point displacement in the z-direction for the
            specified control point.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
            <param name="val"></param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.SetControlPointDisplacement(System.Int32,System.Int32,System.Int32,Claron.WIF.Vector3)">
            <summary>
            Sets the control point displacement for the specified control point.
            </summary>
            <param name="i">The control point index value in the x-direction.</param>
            <param name="j">The control point index value in the y-direction.</param>
            <param name="k">The control point index value in the z-direction.</param>
            <param name="val"></param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.BoundingBox(Claron.WIF.GridBox,System.Int32)">
            <summary>
            Returns the bounding box associated with a control point parameter value.
            </summary>
            <param name="refGrid"></param>
            <param name="p">The parameter index.</param>
            <returns>The bounding box of the control point parameter.</returns>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.BoundingBox(Claron.WIF.GridBox,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the bounding box associated with a control point index.
            </summary>
             <param name="refGrid"></param>
            <param name="i">The control point index in the x-direction.</param>
            <param name="j">The control point index in the y-direction.</param>
            <param name="k">The control point index in the z-direction.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Distortion">
            <summary>
            Returns a value giving the amount of distortion generated by the space mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Subdivide">
            <summary>
            Subdivides the control point grid. After subdivision all parameters controlling the deformation
            are set to be True.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Approximate(Claron.WIF.Vector3[],Claron.WIF.Vector3[])">
            <summary>
            Sets the control point displacements in this free-form transformation so that it approximates
            the given displacement field. The control point displacements are set so that the sum of
            squared differences between the approximating field and the displacement field given as input
            is minimized.
            </summary>
            <param name="pts">The locations at which the displacement field is sampled.</param>
            <param name="disps">The displacements.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElastic.Approximate(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Sets the control point displacements in this free-form transformation so that it approximates
            the given displacement field. The control point displacements are set so that the sum of
            squared differences between the approximating field and the displacement field given as input
            is minimized.
            </summary>
            <param name="xs">The x-coordinates of the locations at which the displacement field is
            sampled.</param>
            <param name="ys">The y-coordinates of the locations at which the displacement field is
            sampled.</param>
            <param name="zs">The z-coordinates of the locations at which the displacement field is
            sampled.</param>
            <param name="dxs">The x-coordinates of the displacements.</param>
            <param name="dys">The y-coordinates of the displacements.</param>
            <param name="dzs">The z-coordinates of the displacements.</param>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.B3Prop">
            <summary>
            Lookup table for the cubic B-spline basis functions.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.B3D1Prop">
            <summary>
            Lookup table for the first derivative of the cubic B-spline basis
            functions.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.B3D2Prop">
            <summary>
            Lookup table for the second derivative of the cubic B-spline basis
            functions.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.Dxs">
            <summary>
            Array storing the control point displacements in the x-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.Dys">
            <summary>
            Array storing the control point displacements in the y-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.Dzs">
            <summary>
            Array storing the control point displacements in the z-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.Min">
            <summary>
            The position of the bottom left-hand corner of the control point grid.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.Max">
            <summary>
            The position of the top right-hand corner of the control point grid.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.OrientationVecX">
            <summary>
            The x-orientation vector.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.OrientationVecY">
            <summary>
            The y-orientation vector.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.OrientationVecZ">
            <summary>
            The z-orientation vector.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.Ci2Pr">
            <summary>
            4x4 matrix to transform from control point index to patient scan RCS.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.Pr2Ci">
            <summary>
            4x4 matrix to transform from patient scan RCS to control point index.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.ControlPointGrid">
            <summary>
            Returns the control point grid box.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.ControlPointDims">
            <summary>
            Returns the control point dimensions.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.TotalNumberOfControlPoints">
            <summary>
            Returns the total number of control points.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.DimX">
            <summary>
            Returns the number of control points in the x-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.DimY">
            <summary>
            Returns the number of control points in the y-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.DimZ">
            <summary>
            Returns the number of control points in the z-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.SpaceMapperSimilarity">
            <summary>
            Property to get/set the similarity space mapper.
            </summary>
            <returns>The similarity space mapper.</returns>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.ActiveParams">
            <summary>
            Returns the active control point parameters.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.NumberOfActiveParameters">
            <summary>
            Returns the number of active parameters.
            </summary>
        </member>
        <member name="T:Claron.WIF.SpaceMapperElastic.IndexParameterOffsetPositionTriple">
            <summary>
            A structure to store the index, parameter offset, and position of a control point.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.IndexParameterOffsetPositionTriple.Index">
            <summary>
            The index of the control point.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.IndexParameterOffsetPositionTriple.ParameterOffset">
            <summary>
            The parameter offset of the index.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElastic.IndexParameterOffsetPositionTriple.Position">
            <summary>
            The position of the control point.
            </summary>
        </member>
        <member name="T:Claron.WIF.SpaceMapperElasticMultiLevel">
            <summary>
            Class which implements a multi-level free-form deformation.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElasticMultiLevel._spaceMapperElasticList">
            <summary>
            The list of space mappers used to calculate the total transformation. Note that the
            multi-level transformation can be configured to either concatenate or sum the individual
            component transformations.
            </summary>
        </member>
        <member name="F:Claron.WIF.SpaceMapperElasticMultiLevel._mappingMode">
            <summary>
            The mapping mode.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.#ctor">
            <summary>
            Creates a new multi-level elastic space mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.#ctor(System.Collections.Generic.List{Claron.WIF.SpaceMapperElastic})">
            <summary>
            Creates a new multi-level elastic space mapper with the given list of elastic space mappers.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.AddMapper(Claron.WIF.SpaceMapperElastic)">
            <summary>
            Adds a new mapper.
            </summary>
            <param name="mapper">The mapper to add.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.RemoveMapper(Claron.WIF.SpaceMapperElastic)">
            <summary>
            Removes a mapper.
            </summary>
            <param name="mapper">The mapper to remove.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.RemoveMapper(System.Int32)">
            <summary>
            Removes the mapper at the given index.
            </summary>
            <param name="i">The index of the mapper to remove.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.GetMapper(System.Int32)">
            <summary>
            Returns the mapper at the given index.
            </summary>
            <param name="i">The index of the mapper to retrieve.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.PopMapper">
            <summary>
            Pops out the last mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.PushMapper(Claron.WIF.SpaceMapperElastic)">
            <summary>
            Pushes a new mapper.
            </summary>
            <param name="mapper">The mapper to push.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.ToByteArray">
            <summary>
            Returns a byte representing this space mapper.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.FromByteArray(System.Byte[],System.Int32@)">
            <summary>
            Returns a multi-level elastic space mapper from a byte array.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.Map(Claron.WIF.Vector3)">
            <summary>
            Maps the given position.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.Map(Claron.WIF.Vector3,System.Int32)">
            <summary>
            Maps the given position.
            </summary>
            <param name="vec">The position to map.</param>
            <param name="level">The level to map to.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.Map(System.Double,System.Double,System.Double)">
            <summary>
            Maps the given position.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.Map(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Maps the given position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="level">The level to map to.</param>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.IsUnity">
            <summary>
            Returns true if the mapper is a unit transformation.
            </summary>
        </member>
        <member name="M:Claron.WIF.SpaceMapperElasticMultiLevel.IsUnity(System.Double)">
            <summary>
            Returns true if the mapper is a unit transformation within the given tolerance.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElasticMultiLevel.SpaceMapperElasticCount">
            <summary>
            Returns the number of elastic space mappers.
            </summary>
        </member>
        <member name="P:Claron.WIF.SpaceMapperElasticMultiLevel.MappingMode">
            <summary>
            The mapping mode.
            </summary>
        </member>
        <member name="T:Claron.WIF.SpaceMapperElasticMultiLevel.MappingModeEnum">
            <summary>
            The mapping mode type.
            </summary>
        </member>
        <member name="T:Claron.WIF.ITransformation2D">
            <summary>
            Interface for 2D transformations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ITransformation2D.Transform(System.Double@,System.Double@)">
            <summary>
            Transforms a point.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ITransformation2D.InverseI">
            <summary>
            Returns the inverse of the given transform.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.AffineTransformation2D">
             <summary>
             Class to represent an affine transformation in 2D.
             </summary>
             <remarks>For the moment the transformation is not completely affine
             as no shearing is allowed. Shearing will be added later on. The order in
             which the transformation is done is as follows:
            
             (1) Translation to origin by (RX, RY)
             (2) Rotation anticlockwise by angle Theta radians.
             (3) Scaling by a factor SX in the x-direction, and SY in the y-direction.
             (4) Translation by (TX, TY).
             </remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._tx">
            <summary>
            Translation in the x-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._ty">
            <summary>
            Translation in the y-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._sx">
            <summary>
            Scaling in the x-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._sy">
            <summary>
            Scaling in the y-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._matrix">
            <summary>
            The transformation matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._rx">
            <summary>
            The x-coordinate of the point to rotate about.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._ry">
            <summary>
            The y-coordinate of the point to rotate about.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._theta">
            <summary>
            The angle to rotate by.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.AffineTransformation2D._doingInverse">
            <summary>
            If True then the inverse transformation is being done.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.#ctor">
            <summary>
            Creates a new transformation with default translation, rotation, scaling parameters.
            </summary>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new transformation.
            </summary>
            <param name="rx">Translation needed to move center of rotation to origin in x-direction.</param>
            <param name="ry">Translation needed to move center of rotation to origin in y-direction.</param>
            <param name="sx">Scaling in x-direction.</param>
            <param name="sy">Scaling in y-direction.</param>
            <param name="theta">Rotation angle in anticlockwise direction in radians.</param>
            <param name="tx">Translation in x-direction.</param>
            <param name="ty">Translation in y-direction.</param>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.GetHashCode">
            <summary>
            Returns the hash code for this AffineTransformation2D object.
            </summary>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.SetAs(Claron.WIF.AffineTransformation2D)">
            <summary>
            Sets this transform as another
            </summary>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.Clone">
            <summary>
            Returns a copy of this.
            </summary>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.Transform(System.Double@,System.Double@)">
            <summary>
            Transforms a point.
            </summary>
            <param name="x">The x-coordinate of the point to transform.</param>
            <param name="y">The y-coordinate of the point to transform.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.Transform(Claron.WIF.Vector2)">
            <summary>
            Transforms the given point.
            </summary>
            <param name="vec">The vector to transform.</param>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.Read(System.String)">
            <summary>
            Reads the mapper from the file with the given name.
            </summary>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.Write(System.String)">
            <summary>
            Writes the mapper to the file with the given name.
            </summary>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.UpdateMatrix">
            <summary>
            Updates the transformation matrix.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.InverseI">
            <summary>
            Returns the inverse of the transformation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.Inverse">
            <summary>
            Returns the inverse of the transformation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.SameAs(Claron.WIF.AffineTransformation2D)">
            <summary>
            Returns True if this transformation is equal to the given transformation.
            </summary>
        </member>
        <member name="M:Claron.WIF.AffineTransformation2D.ToString">
            <summary>
            Generates a string representation of the xform params.
            </summary>
        </member>
        <member name="P:Claron.WIF.AffineTransformation2D.TX">
            <summary>
            Property to get/set the translation in the x-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.AffineTransformation2D.TY">
            <summary>
            Property to get/set the translation in the y-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.AffineTransformation2D.SX">
            <summary>
            Property to get/set the scaling in the x-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.AffineTransformation2D.SY">
            <summary>
            Property to get/set the scaling in the y-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.AffineTransformation2D.RX">
            <summary>
            Property to get/set the x-coordinate of the point about which the
            rotation is done.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.AffineTransformation2D.RY">
            <summary>
            Property to get/set the y-coordinate of the point about which the
            rotation is done.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.AffineTransformation2D.Theta">
            <summary>
            Property to get/set the angle of rotation, measured in anticlockwise
            direction and in radians.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.FreeFormTransformation2D">
             <summary>
             Class for doing free-form deformations in 2D. See Sederberg
             and Parry's paper for more information:
            
             Thomas W. Sederberg and Scott R. Parry,
             Free-form deformation of solid geometric models,
             SIGGRAPH '86: Proceedings of the 13th annual conference on Computer
             graphics and interactive techniques,
             1986, pp. 151--160, doi = http://doi.acm.org/10.1145/15922.15903,
             ACM Press, New York, NY, USA.
             </summary>
             <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._nx">
            <summary>
            The number of control points in the x-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._ny">
            <summary>
            The number of control points in the y-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._sx">
            <summary>
            The spacing of control points in the x-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._sy">
            <summary>
            The spacing of control points in the y-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._min">
            <summary>
            The position of the bottom left-hand corner of the control point
            grid defining the free-form transformation.
            </summary>
            <remarks>The position is in physical coordinates.</remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._max">
            <summary>
            The position of the top right-hand corner of the control point grid
            defining the free-form transformation.
            </summary>
            <remarks>The position is in physical coordinates.</remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._affineTransformation">
            <summary>
            The affine transformation component.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._dxs">
            <summary>
            The control point displacements in the x-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._dys">
            <summary>
            The control point displacements in the y-direction.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._activeParams">
            <summary>
            Active control point parameters.
            </summary>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._B3">
            <summary>
            Lookup table for the cubic B-spline basis functions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._B3D1">
            <summary>
            Lookup table for the first derivative of the cubic B-spline basis functions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.FreeFormTransformation2D._B3D2">
            <summary>
            Lookup table for the second derivative of the cubic B-spline basis functions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.#ctor(System.Double[],System.Double[],System.Int32,System.Int32,Claron.WIF.AffineTransformation2D)">
            <summary>
            Creates a new 2D free-form transformation.
            </summary>
            <param name="min">The position of the bottom left-hand corner of
            the control point grid defining the free-form transformation.</param>
            <param name="max">The position of the top right-hand corner of
            the control point grid defining the free-form transformation.</param>
            <param name="nx">The number of control points in the x-direction.</param>
            <param name="ny">The number of control points in the y-direction.</param>
            <param name="affineTransformation">The affine component of the
            transformation. Default value = null
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.Clone">
            <summary>
            Returns a clone of the transformation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.SetAs(Claron.WIF.FreeFormTransformation2D)">
            <summary>
            Sets this transformation from another one.
            </summary>
            <param name="fft">The transformation to set from.</param>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.InitializeLookupTables">
            <summary>
            Initializes the lookup tables.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called after the class has been deserialized.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.Write(System.String)">
            <summary>
            Writes the mapper to the file with the given name.
            </summary>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.GridToPhysical(System.Double@,System.Double@)">
            <summary>
            Transforms from control point grid coordinates to physical space.
            </summary>
            <param name="x">The x control point index.</param>
            <param name="y">The y control point index.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.PhysicalToGrid(System.Double@,System.Double@)">
            <summary>
            Transforms from physical space to control point grid coordinates.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.Transform(System.Double@,System.Double@)">
            <summary>
            Transforms the given point in physical space.
            </summary>
            <param name="x">The x-coordinate of the point to transform (in
            physical coordinates).</param>
            <param name="y">The y-coordinate of the point to transform (in
            physical coordinates).</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.TransformBack(System.Double@,System.Double@)">
            <summary>
            Returns the vector in the source which maps to the given target vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.EliminateAffine">
            <summary>
            Generates an identical FF transform, but without the affine part.
            </summary>
            <remarks>Helps make the transform faster and more efficient</remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.LocalDisplacement(System.Double@,System.Double@)">
            <summary>
            Calculates the displacement generated by the free-form deformation.
            </summary>
            <param name="x">The x-coordinate of the point to calculate the
            displacement at (in physical coordinates).</param>
            <param name="y">The y-coordinate of the point to calculate the
            displacement at (in physical coordinates).</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.Jacobian(System.Double,System.Double,System.Double[0:,0:])">
            <summary>
            Returns the Jacobian matrix of the transformation at the specified point.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="jac">The Jacobian matrix is returned in this array which must
            be initialized as a 2 x 2 array before calling the function.</param>
            <remarks>The determinant of the Jacobian matrix can be interpreted as the
            volume change produced by the free-form transformation.</remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.EulerianStrain(System.Double,System.Double,System.Double[0:,0:])">
            <summary>
            Calculates the Eulerian strain tensor at the specified point.
            </summary>
            <param name="x">The x-coordinate of the point to evaluate the strain at
            in physical coordinates.</param>
            <param name="y">The y-coordinate of the point to evaluate the strain at
            in physical coordinates.</param>
            <param name="mat">The Eulerian strain tensor which must be initialized
            to a 2 x 2 array before calling this function.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.LagrangianStrain(System.Double,System.Double,System.Double[0:,0:])">
            <summary>
            Calculates the Lagrangian strain tensor at the specified point.
            </summary>
            <param name="x">The x-coordinate of the point to evaluate the strain
            at in physical coordinates.</param>
            <param name="y">The y-coordinate of the point to evaluate the strain
            at in physical coordinates.</param>
            <param name="mat">The Lagrangian strain tensor which must be
            initialized to a 2 x 2 array before calling this function.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.PrincipalEulerianStrain(System.Double,System.Double,System.Double[0:,0:],System.Double[])">
            <summary>
            Returns the principal Eulerian strain at the specified point.
            </summary>
            <param name="x">The x-coordinate of the point to evaluate the strain
            at in physical coordinates.</param>
            <param name="y">The y-coordinate of the point to evaluate the strain
            at in physical coordinates.</param>
            <param name="strain">The principal strain directions are returned as
            the column vectors in this matrix. The matrix must be initialized to
            a 2 x 2 matrix before calling this function.</param>
            <param name="strainVals">The principal strain values. The array needs
            to be initialized to have 2 elements before calling this function.
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.PrincipalLagrangianStrain(System.Double,System.Double,System.Double[0:,0:],System.Double[])">
            <summary>
            Returns the principal Lagrangian strain at the specified point.
            </summary>
            <param name="x">The x-coordinate of the point to evaluate the strain
            at in physical coordinates.</param>
            <param name="y">The y-coordinate of the point to evaluate the strain
            at in physical coordiantes.</param>
            <param name="strain">The principal strain directions are returned as
            the column vectors in this matrix. The matrix must be initialized to
            a 2 x 2 matrix before calling this function.</param>
            <param name="strainVals">The princial strain values. The array needs
            to be initialized to have 2 elements before calling this function.
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.EigenVectorsAndEigenValues(System.Double[0:,0:],System.Double[0:,0:],System.Double[])">
            <summary>
            Returns the eigenvectors and eigenvalues of the given 2 x 2 matrix.
            </summary>
            <param name="mat">The matrix to calculate the eigenvectors and
            eigenvalues of.</param>
            <param name="eigVecs">The eigenvectors are returned in this 2 x 2
            matrix which must be initialized to the right size before calling this
            function. The eigenvectors are stored in the columns of the matrix.
            </param>
            <param name="eigVals">The 2 eigenvalues are returned in the array which
            must be initialized before calling this function.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.DistortionMagnitude">
            <summary>
            Calculates the distortion amount for the transformation.
            </summary>
            <returns>A positive value indicating how much deformation is produced by
            the transformation parameter values.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.DistortionMagnitudeContribution(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculates the contribution to the distortion magnitude of the transformation. An
            additional increment to the control point displacment can be specified through the
            cx and cy parameters.
            </summary>
            <param name="ci">The i-index of the control point to move.</param>
            <param name="cj">The j-index of the control point to move.</param>
            <param name="cx">The amount to move in the x-direction.</param>
            <param name="cy">The amount to move in the y-direction.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.SmoothTransformation(System.Double,System.Double)">
            <summary>
            Smoothes the transformation.
            </summary>
            <param name="stp"></param>
            <param name="gradStp"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.SmoothStrain(System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Smoothes the transformation so that the strain does not exceed a
            specified threshold.
            </summary>
            <param name="percentage">The maximum strain allowed.</param>
            <param name="stp">The step size to move in the direction
            of the gradient after evaluating the distortion
            gradient.</param>
            <param name="gradStp">The finite difference step to make in
            the evaluation of the distortion gradient.</param>
            <param name="lx">The number of samples to take in the domain
            of the transformation when calculating the strain.</param>
            <param name="ly">The number of samples to take in the domain
            of the transformation when calculating the strain.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.CalculateDistortionMagnitudeGradientSlow(System.Double)">
            <summary>
            Calculates the gradient of the distortion of the free-form
            transformation with respect to the transformation parameters.
            </summary>
            <remarks>For debugging purposes only.</remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.CalculateDistortionMagnitudeGradient(System.Double)">
            <summary>
            Calculates the gradient of the smoothness of the free-form transformation
            with respect to the transformation parameters.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.CalculateDistortionMagnitudeGradient(System.Int32[],System.Double)">
            <summary>
            Calculates the gradient of the distortion magnitude of the free-form
            transformation with respect to the transformation parameters for the
            specified control point indices.
            </summary>
            <param name="indices">The x and y control point indices in order.</param>
            <param name="stp"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.CalculateControlPointsForWhichStrainExceedsSpecifiedAmount(System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the set of control points for which the strain exceeds a
            specified threshold.
            </summary>
            <param name="percentage">The maximum percentage strain.</param>
            <param name="lx">The number of samples to take in the x-direction
            in evaluating the strain.</param>
            <param name="ly">The number of samples to take in the y-direcion
            in evaluating the strain.</param>
            <returns>Returns an array containing the control point indices at
            whose positions the strain exceeds the specified threshold.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.Subdivide">
            <summary>
            Subdivides the control point grid (i.e. reduces the control point spacing
            by a factor of 2) while retaining the deformation produced by the free-form
            transformation.
            </summary>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.Approximate(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Sets the control point displacements in this free-form transformation so that it approximates
            the given displacement field. The control point displacements are set so that the sum of
            squared differences between the approximating field and the displacement field given as input
            is minimized.
            </summary>
            <param name="xs">The x-coordinates of the locations at which the displacement field is
            sampled.</param>
            <param name="ys">The y-coordinates of the locations at which the displacement field is
            sampled.</param>
            <param name="dxs">The x-coordinates of the displacements.</param>
            <param name="dys">The y-coordinates of the displacements.</param>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.SameAs(Claron.WIF.FreeFormTransformation2D,System.Double)">
            <summary>
            Returns true if the given transformation is the same as this one.
            </summary>
        </member>
        <member name="M:Claron.WIF.FreeFormTransformation2D.InverseI">
            <summary>
            Returns the inverse of the function.
            </summary>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.DXS">
            <summary>
            Returns the control point displacements in the x-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.NX">
            <summary>
            Returns the number of control points in the x-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.TotalNumberOfControlPoints">
            <summary>
            Returns the total number of control points.
            </summary>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.DYS">
            <summary>
            The control point displacements in the y-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.NY">
            <summary>
            Returns the number of control points in the y-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.SX">
            <summary>
            Property to get the control point spacing in the x-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.SY">
            <summary>
            Property to get the control point spacing in the y-direction.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.Min">
            <summary>
            The position of the bottom left-hand corner of the control point
            grid defining the free-form transformation.
            </summary>
            <remarks>The position is in physical coordinates.</remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.Max">
            <summary>
            The position of the top right-hand corner of the control point grid
            defining the free-form transformation.
            </summary>
            <remarks>The position is in physical coordinates.</remarks>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.AffineTransformation">
            <summary>
            Returns the affine portion of the transformation. Can be Nothing.
            </summary>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.ActiveParams">
            <summary>
            Returns the active control point parameters.
            </summary>
        </member>
        <member name="P:Claron.WIF.FreeFormTransformation2D.NumberOfActiveParameters">
            <summary>
            Returns the number of active parameters.
            </summary>
        </member>
        <member name="T:Claron.WIF.Authenticator">
            <summary>
            Class for valid access control for given UserName and Login. Added for AngiClient,
            but may be useful in Angi as well in future.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Authenticator.GetNumberOfConnectedUsers">
            <summary>
            Finds the number of clients connected to server
            </summary>
            <returns>Number of clients</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Authenticator.AuthenticateUser(System.String,System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Verifies login and password, and returns(note: Byref) IsValidUser and IsAdmin
            </summary>
            <param name="UserName">Current user's name</param>
            <param name="Password">Current user's password</param>
            <param name="IsValidUser"></param>
            <param name="IsAdmin"></param>
            <param name="_IsLicenseExpired"></param>
        </member>
        <member name="M:Claron.WIF.Authenticator.UpdateDaysRemainingInDatabse">
            <summary>
            Update Days Remaining Field for all user when Admin Is Logged in
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Authenticator.DeleteUser(System.String)">
            <summary>
            Deletes the given user from the database
            </summary>
            <param name="UserName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Authenticator.IsUserAlreadyExist(System.String)">
            <summary>
            Cheks if given userName already present in the database, and returns true if already present
            </summary>
            <param name="UserName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.UserDetails">
            <summary>
            Provide user details
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.WifShared">
            <summary>
            variables and functions than need to be globally shared across all WIF classes
            </summary>
        </member>
        <member name="F:Claron.WIF.WifShared.GlobalTime">
            <summary>
            Time since WIF started running, at microseconds resolution.
            </summary>
        </member>
        <member name="F:Claron.WIF.WifShared.DicomUidPrefixOfCompany">
            <summary>
            The proper DICOM-assigned string for the company, including the terminating period.
            Should be no more than 24 characters.
            </summary>
        </member>
        <member name="F:Claron.WIF.WifShared.DicomImplementationUidOfCompany">
            <summary>
            Uniquely identifies the implementation which wrote this file and its content. It
             provides an unambiguous identification of the type of implementation which last wrote the 
            file in the event of interchange problems. 
            </summary>
        </member>
        <member name="F:Claron.WIF.WifShared.sponsor">
            <summary>
            Life time lease sponsor for each remote object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.WifShared._counter">
            <summary>
            The global counter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WifShared.GlobalAutoIncrementCounter">
            <summary>
            Returns a positive value that is always 1 more than that returned by the previous call. Thread safe.
            </summary>
        </member>
        <member name="M:Claron.WIF.WifShared.AllFieldsString(System.Object)">
            <summary>
            Provides a textual descriptor of the full state of an object.
            Useful for debugging and logging.
            </summary>
        </member>
        <member name="M:Claron.WIF.WifShared.ComputeStageBgn(Claron.WIF.WifShared.ComputeStageDelegate,Claron.WIF.WifObject)">
            <summary>
            Makes sure previous compute steps are completed.
            Returns true if this step needs to be executed.
            </summary>
            <param name="stagePrev">Address of the previous computation stage, or nothing for first stage.</param>
            <param name="ss">The WifObject, typically the SliceStack, with holds the compute progress state.</param>
            <returns>Returns true if this compute step needs to be executed.</returns>
        </member>
        <member name="M:Claron.WIF.WifShared.ComputeStageEnd(Claron.WIF.WifObject)">
            <summary>
            Records that the current stage has been completed
            </summary>
        </member>
        <member name="T:Claron.WIF.WifShared.ComputeStageDelegate">
            <summary>
            THe delegate for the main ComputeStep subs.
            </summary>
        </member>
        <member name="F:Claron.WIF.RemotingConfig.IsAsync">
            <summary>
            Boolean variable indicating whether client-server communication is Synchronous or Async.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.RemotingConfig.RenderEventsQueLength">
            <summary>
            Maximum number of rendering requests on fly per viewport, (In client server mode)
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.RemotingConfig.RenderRequestInterval">
            <summary>
            Minimum time interval between two rendering requests, (In client server mode)
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.RemotingConfig.ImageCompressionQualityPercents">
            <summary>
            Image compression quality percents (50..100) in client server mode
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.RemotingConfig.DeploymentMode">
            <summary>
            This property is used only once on startup to determine how the application
            is deployed. To Change the deployment mode, simply change its initial assignment.
            </summary>
        </member>
        <member name="M:Claron.WIF.RemotingConfig.IsServerUsed">
            <summary>
            Convenience function
            </summary>
        </member>
        <member name="P:Claron.WIF.RemotingConfig.IsRemotingUsed">
            <summary>
            Convenience function
            </summary>
        </member>
        <member name="T:Claron.WIF.SponsorshipManager">
            <summary>
            Maintains life time lease for each remote object. Used to free memory on server.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.GenerateCrashOnServer">
            <summary>
            Generates a crash on the server, Used for development purpose, to check if server restarts
            automatically after a crash
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.SponsorshipManager.lease_InitialLeaseTime">
            <summary>
            Initial lease time of the remote object
            </summary>
            <remarks></remarks>    
        </member>
        <member name="F:Claron.WIF.SponsorshipManager.lease_SponsorshipTimeout">
            <summary>
            Amount of time to wait for a sponsor to return with a lease renewal time
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.SponsorshipManager.lease_RenewOnCallTime">
            <summary>
            Amount of time by which to renew the lease
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.SponsorshipManager.RegisteredLeaseList">
            <summary>
            List of all the remote objects registered with sponsor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.RegisterRemoteLeaseObj(System.Object)">
            <summary>
            registers given remote object with the sponsor
            </summary>
            <param name="Remoter"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.UnregisterRemoteLeaseObj(System.Object)">
            <summary>
            Unregisters given remote object with the sponsor
            </summary>
            <param name="Remoter"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.UnregisterAllRemoteLeaseObj">
            <summary>
            Unregisters all the remote objects which are registered with sponsor
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.DownLoadBuffer(System.Int32)">
            <summary>
            Download number of bytes specified from server, to measure download speed at the client
            </summary>
            <param name="numBytes"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.DownLoadBufferDouble(System.Int32,System.Int32)">
            <summary>
             Download number of bytes specified from server, to measure download speed at the client
            It fills local time on the server in the firt element of the returned array
            </summary>
            <param name="numBytes"></param>
            <param name="reqID"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.UpLoadBuffer(System.Byte[])">
            <summary>
            Upload given buffer from client to server to measuer upload speed of client
            </summary>
            <param name="LoadedBuff"></param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SponsorshipManager.GetServerTime">
            <summary>
            Returns local time(from the starting of the server) on server
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.ImageByteTo32bBitmap(System.Byte[],System.Drawing.Size,System.Drawing.Bitmap@)">
            <summary>
            Converts a byte image to a 32b (ARGB) bitmap for display, trying to minimize memory re-allocations.
            </summary>
            <param name="inImageByte">The 8b input image</param>
            <param name="ImageSize"></param>
            <param name="outBitmap">The output, can be null or the incorrect size - will be allocated/reallocated
            as needed</param>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.ImageArgbTo32bBitmap(System.UInt32[],System.Drawing.Size,System.Drawing.Bitmap@)">
            <summary>
            Sets a bitmap to show the contents of a 32b (ARGB) image.
            </summary>
            <param name="inImageArgb">The ARGB input image</param>
            <param name="ImageSize"></param>
            <param name="outBitmap">The output, can be null or the incorrect size - will be allocated/reallocated
            as needed</param>
        </member>
        <member name="F:Claron.WIF.BitmapUtils._clearBuffer">
            <summary>
            Buffer used to clear a bitmap.
            </summary>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.Clear(System.Drawing.Bitmap)">
            <summary>
            Clears the given image.
            </summary>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.ChangePixelFormat(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns a new Bitmap with the same dimensions, but a different format than the input one.
            The input bitmap is disposed. The caller is responsible for disposing the returned bitmap.
            </summary>
            <param name="inputBitmap"></param>
            <param name="pf"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.BitmapDiff(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double)">
            <summary>
            Returns a new Bitmap containing the difference between two input Bitmaps,
            biased to 128 and clamped to [0..255]. The returned Bitmap needs to be disposed
            by the caller.
            </summary>
            <param name="bmpA"></param>
            <param name="bmpB"></param>
            <param name="scaleFactor">Default value = 1</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.BitmapNnResampleLarge(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Returns a new nearest-neighbor resampled Bitmap. Should be disposed by the caller.
            </summary>
            <param name="bm"></param>
            <param name="scaleFactor">Default value = 4</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.Resize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resizes the input bitmap and returns it.
            </summary>
            <param name="bm">The input bitmap.</param>
            <param name="w">The new width.</param>
            <param name="h">The new height.</param>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.IppDrawImage(System.IntPtr,System.Int32[],System.Int32[],System.IntPtr,System.Int32[],System.Int32[])">
            <summary>
            Draws an image from source buffer to destination buffer using
            Intel Performance Primitives (IPP) library.
            </summary>
            <param name="pSrc">The source buffer.</param>
            <param name="srcDims">The source image dimensions.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="pDst">The target buffer.</param>
            <param name="dstDims">The target image dimensions.</param>
            <param name="dstRect">The target rectangle.</param>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.IppDrawImage(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Resizes a bitmap using Intel Performance Primitives (IPP) library.
            </summary>
            <param name="srcBmp">The source bitmap.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="tgtBmp">The target bitmap.</param>
            <param name="tgtRect">The target rectangle.</param>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.IppDrawImage(System.Byte[],System.Drawing.Size,System.Drawing.Rectangle,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Byte[])">
            <summary>
            Draws from the given source buffer to the target bitmap.
            </summary>
            <param name="srcBuffer">The source buffer.</param>
            <param name="srcSize">The source image size.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="tgtBmp">The target bitmap.</param>
            <param name="tgtRect">The target rectangle.</param>
            <param name="tgtBuffer">The target buffer. If null then memory is allocated to allow drawing
            to the target bitmap. If this function is to be repeatedly called then it is better to
            allocate the buffer beforehand and reuse the buffer as needed.</param>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.IppDrawImage(System.Byte[],System.Drawing.Size,System.Drawing.Rectangle,System.Byte[],System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Resizes a bitmap using Intel Performance Primitives (IPP) library.
            </summary>
            <param name="srcBuffer">The buffer holding the source bitmap buffer.</param>
            <param name="srcSize">The source bitmap size.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="tgtBuffer">The target buffer. The target buffer can be larger than the
            number of bytes required to hold the target bitmap data.</param>
            <param name="tgtSize">The size of the target bitmap.</param>
            <param name="tgtRect">The target rectangle.</param>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.DoHistogramEqualization(System.Drawing.Bitmap)">
            <summary>
            Does histogram equalization on the given bitmap.
            </summary>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.DoHistogramEqualization(System.Byte[])">
            <summary>
            Does histogram equalization on the the given RGBA values.
            </summary>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.SaveAsJpeg(System.Drawing.Bitmap,System.String,System.Int32)">
            <summary>
            Saves a bitmap as a JPEG image.
            </summary>
            <param name="image">The image to save.</param>
            <param name="fileName">The path to save it under.</param>
            <param name="quality">The quality.</param>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.Colorize(System.Drawing.Bitmap,System.Byte,System.Byte,System.Byte)">
            <summary>
            Takes a gray-scale image and colorizes the pixels by multiplying the intensity of each pixel
            with the given color.
            </summary>
        </member>
        <member name="M:Claron.WIF.BitmapUtils.CreateMagentaGreenBitmap(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Creates a magenta/green view bitmap (for debugging). Magenta component comes from fixed image and green
            component comes from moving image.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils.DeveloperLicenseId">
            <summary>
            Public string that can be modified before first call to IsDeveloper or IsDeveloperLicense,
            to adjust to a non-default developer license ID string
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.RunMultithreaded(System.Int32,System.Threading.ParameterizedThreadStart,System.Object)">
             <summary>
             Runs a computation by executing parallel threads. Each thread is passed, as a parameter,
             a different element of an array. Returns when all threads have completed.
             NOTE: The MultiThreading class now provides a more powerfule and convenient interface, 
             so it is recommended to use it instead.
             </summary>
             <param name="ThreadsNum">The number of threads to use (See SuggestedThreadsCount).
             When set to 1 (or less) the thread function is called directly.</param>
             <param name="ThreadSub">The address of the thread sub or function</param>
             <param name="ThreadDataArray">The array of per-thread objects to pass to each thread
              (or null if no data needs to be passed).</param>
             <example>
             Usage example:
            
              Exception ThreadEx;   //for obtaining thread exceptions
              struct DataPerThread {
                //in/out data structure for each thread
              }
            
              void ParallelizedComputation() {
                var ThreadsData = new DataPerThread[SysUtils.SuggestedThreadsCount];
                //Insert code to initialize DataPerThread for each thread
            
                ThreadEx = null; //reset
                SysUtils.RunMultithreaded(SysUtils.SuggestedThreadsCount, 
                     new System.Threading.ParameterizedThreadStart(ComputeThread), ThreadsData);
                if (ThreadEx != null) throw (ThreadEx);
              }
            
              void ComputeThread(object ThreadData) {
                DataPerThread Data = (DataPerThread)ThreadData;
                try {
                  //compute stuff...
                } catch (Exception ex) {
                  ThreadEx = ex; //pass it up
                }
              }
             </example>
        </member>
        <member name="F:Claron.WIF.SysUtils.Null">
            <summary>
            NULL pointer.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._wifRootPath">
            <summary>
            The WIF root path.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._toolsPath">
            <summary>
            The tools path.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._importedSourcePath">
            <summary>
            The imported source path.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._atlasesPath">
            <summary>
            The atlases path.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._applicationRootPath">
            <summary>
            The application root path.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._applicationBuildDate">
            <summary>
            The application build date.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.PathTmp">
            <summary>
            Return a acceptable location to store temporary results
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.PathTmp(System.String)">
            <summary>
            Return a acceptable location to store temporary results
            </summary>
            <param name="envVariableName">Choose a env variable name to use instead of the default WIF_TEMP</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFRootPath">
            <summary>
            Returns the root path of the WIF development tree (with no final slash).
            If not found, an empty string is returned.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ToolsPath">
            <summary>
            Returns the path of the tools directory (with no final slash). Raises an exception
            if not found.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ImportedSourcePath">
            <summary>
            Returns the path of the ImportedSource directory (with no final slash). Raises an exception
            if not found.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.SearchForDirectory(System.String)">
            <summary>
            Searches for the given directory as a sibling directory of the application executable
            directory and upwards.
            </summary>
            <param name="dirName">The directory to search for.</param>
            <returns>Returns the path found with no final slash. Or null if not found.
            </returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.CreateDirectories(System.String)">
            <summary>
            As needed, creates the given directory (and parent directories if necessary).
            </summary>
            <param name="dirName">The directory to create.</param>
        </member>
        <member name="M:Claron.WIF.SysUtils.SearchForFile(System.String)">
            <summary>
            Searches for the given file in a sibling directory of the application executable
            directory and upwards.
            </summary>
            <param name="relativePathAndName">The full path and name of the file to search for.</param>
            <returns>Returns the path found with no final slash. Raises an exception if not found.
            </returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.GetPathToFfmpegExe">
            <summary>
            Returns the path to the ffmpeg (http://ffmpeg.mplayerhq.hu/) program.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.OutputMediaSettingsPath">
            <summary>
            Returns the path to the output media templates directory (assumes WIF folder exists).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasFullBodyPath">
            <summary>
            Returns the path to the 4-view full body atlas image.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasFullBodyPath2">
            <summary>
            Returns the path to the 4-view full body atlas image (with straighter spine).
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasFullBodyPath3">
            <summary>
            Returns the path to the 4-view full body atlas image (with mirrored spine).
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.SpineAtlasPath">
            <summary>
            Returns the spine atlas path.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasSkullNeckAndSpinePath">
            <summary>
            Returns the skull, neck and spine atlas.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasKidneyLeftPath">
            <summary>
            Returns the path to the 4-view left kidney atlas image.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasKidneyRightPath">
            <summary>
            Returns the path to the 4-view right kidney atlas image.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasSkullAndNeckPath">
            <summary>
            Returns the path to the first skull and neck atlas.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasSkullAndNeckBPath">
            <summary>
            Returns the path to the second skull and neck atlas.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasSkullAndNeckCPath">
            <summary>
            Returns the path to the third skull and neck atlas.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FourViewAtlasHeadAirPath">
            <summary>
            Returns the path to the air atlas.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FullBodyAtlasPath">
            <summary>
            Returns the full body atlas path.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.HeadAtlasPath">
            <summary>
            Returns the head atlas path.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.GetApplicationDirPath">
            <summary>
            Returns the application directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.GetApplicationName">
            <summary>
            Returns the application name.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.GetApplicationCompanyName">
            <summary>
            Returns the company name attribute of the executing assembly.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.GetApplicationVersion">
            <summary>
            Returns the Version object of the application.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ApplicationRootPath">
            <summary>
            Returns the root path of the running application in the standard solution tree. Raises an exception if not found.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._batchRunRootPath">
            <summary>
            The App root path.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.PathOfLargestFixedDrive">
            <summary>
            The path, i.e. "C:\\","D:\\", etc., of the largest fixed drive, the one were one would expect to find DICOM data.
            Use this to avoid the teptation to target drive D:, which in same cases (demo PCs, laptops) might be the DVD drive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.ApplicationBuildDate">
            <summary>
            Returns the build date of the application.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._timeServers">
            <summary>
            The default time servers to query when retrieving the Internet time service time.
            </summary>
            <remarks>List of servers obtained from http://tf.nist.gov/tf-cgi/servers.cgi  updated 2012-02-22</remarks>
        </member>
        <member name="F:Claron.WIF.SysUtils.timeServerRegEx">
            <summary>
            Regex for time obtained from server.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.QueryInternetTimeServer(System.String)">
            <summary>
            Queries the given Internet time server for the time and returns the current time.
            </summary>
            <param name="server">The server to query. If the string is empty or nothing then a list
            of default servers are queried until a response has been received from one of them.</param>
            <returns>The current time, or DateTime.MaxValue if no response was received from any of the
            servers.</returns>
        </member>
        <member name="F:Claron.WIF.SysUtils._webSites">
            <summary>
            Collection of websites to test Internet connectivity for.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.IsInternetConnectionAvailable">
            <summary>
            Returns true if an Internet connection is available.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.GetBuildTypeString">
            <summary>
            Returns the build type string of the currently executing assembly.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.GetPlatformString">
            <summary>
            Returns the platform string (x64 or x86).
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.IsDebugBuild(System.Reflection.Assembly)">
            <summary>
            Returns true if the given assembly is a Debug build.
            </summary>
            <param name="Assembly">The assembly object or Nothing if for this executable. Default value = null</param>
        </member>
        <member name="M:Claron.WIF.SysUtils.Is32b">
            <summary>
            Returns True if the executable is running in 32b mode (otherwise, 64b)
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.Is64b">
            <summary>
            Returns True if the executable is running in 64b mode (otherwise, 32b)
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ToU32(System.Int32)">
            <summary>
            Casts a signed integer value to an unsigned one without overflow.
            Useful for example, for ARGB values.
            </summary>
            <param name="val"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.ToI32(System.UInt32)">
            <summary>
            Casts an unsigned integer value to a signed one without overflow.
            Useful for example, for GlassFXColor values.
            </summary>
            <param name="val"></param>
            <returns></returns>
            <remarks></remarks> 
        </member>
        <member name="M:Claron.WIF.SysUtils.BuildLabel">
            <summary>
            Returns a label of the current application build, containing a build date and
            revision number in an easily readable format.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.BuildLabelWithDateFromLastTwoDigits">
            <summary>
            Returns a label of the current application build, containing a build date and
            revision number in an easily readable format.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.BuildLabelAndResources">
            <summary>
            Returns a label of the current application build, containing a build date and
            revision number in an easily readable format.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.BuildNowLabel">
            <summary>
            Returns a label of the current application build, containing a build date and
            revision number in an easily readable format.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.SysUtils._floatingPointModel">
            <summary>
            The floating point model.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ToStringCollection(System.String[])">
            <summary>
            Converts the given array of strings into a string collection.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils.lastCleanUpTime">
            <summary>
            Cleans the memory heap of all uncollected memory objects, including ones with finalizers.
            Should be called sparely, since it induces two costly generation 2 collections (can take well over 20 msecs)
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.InformGcOfUnmanagedMemoryAllocationChange(System.Int64)">
            <summary>
            Informs the garbage collector when unmanaged memory size grows or shrinks,
            to allow it to consider it in its algorithms. Must sum up to 0 by the end or
            may cause problems.
            </summary>
            <param name="AllocatedBytesDelta">Positive for new allocations, or negative for freed-up
            memory. 0 is ignored.</param>
        </member>
        <member name="M:Claron.WIF.SysUtils.ArrayCopy(System.UInt32[],System.IntPtr,System.Int32)">
            <summary>
            Complements Array.Copy with param combinations it cannot handle.
            </summary>
            <param name="SrcArray">The managed array to copy from</param>
            <param name="TargetPtr">The unsafe memory address of the target buffer to copy to.
            Note that it must be large enough to contain the output of unpredictable results may occur.</param>
            <param name="Length">Number of SrcArray elements to copy</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.ArrayCopy(System.UInt32[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Complements Array.Copy with param combinations it cannot handle.
            </summary>
            <param name="SrcArray">The managed array to copy from</param>
            <param name="TargetPtr">The unsafe memory address of the target buffer to copy to.
            Note that it must be large enough to contain the output of unpredictable results may occur.</param>
            <param name="SrcStartIndex">The index of the SrcArray element from which to start copying.</param>
            <param name="Length">Number of SrcArray elements to copy</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.ArrayCopy(System.IntPtr,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Complements Array.Copy with param combinations it cannot handle.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ArrayCopy(System.Byte[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Complements Array.Copy with param combinations it cannot handle.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ArrayCopy(System.Char[],System.Byte[])">
            <summary>
            Complements Array.Copy with param combinations it cannot handle.
            </summary>
        </member>
        <member name="F:Claron.WIF.SysUtils._SuggestedThreadsCount">
            <summary>
            A suggested thread count for multithreading.
            If never set, or set to 0, subsequently returns the # of processors.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.FileNameFromPath(System.String)">
            <summary>
            Returns the file name (and extension) portion of the path
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.DirectoryFromPath(System.String)">
            <summary>
            Extracts the directory/folder path from a path string. No "\" at the end.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.ReadyForReading(System.String,System.Object)">
             <summary>
            
             </summary>
             <param name="FilePath"></param>
             <param name="SilentUI">Default value = null</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.ReadyForWriting(System.String,System.Object)">
             <summary>
            
             </summary>
             <param name="FilePath"></param>
             <param name="SilentUI">Default value = null</param>
             <returns></returns>
             <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.FileNameError(System.String)">
            <summary>
            Checks the validity of the file name and returns an error message if not valid.
            </summary>
            <param name="name">The file name to check (not the full path!)</param>
            <returns>Nothing if valid, an error message if invalid.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.RemoveInvalidFileNameChars(System.String@)">
            <summary>
            Removes all occurrences of invalid characters in a file name (not path!).
            </summary>
            <param name="Name">The file (not full path!) name</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.DateForFileName(System.DateTime)">
            <summary>
            Returns the date string in the format YYYY-MM-DD
            </summary>
            <param name="time">The time, usually Now</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.TimeForFileName(System.DateTime)">
            <summary>
            Returns the time string in the format HH_MM_SS
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.TimeReferenceMeasureSingleThread">
            <summary>
            A basic math loop that provides a measure for compute time complexity that is relative to the speed of the executing PC.
            Should always take less than 0.2s
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.TimeReferenceMeasureMultiThread">
            <summary>
            A multi threaded math loop that provides a measure for compute time complexity that is relative to the speed of the executing PC.
            Should always take less than 0.2s
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawLineWithShadow(System.Drawing.Graphics,Claron.WIF.Vector3,Claron.WIF.Vector3,System.Drawing.Pen,System.Drawing.Color)">
            <summary>
            Draws shadowed line to be visible on any background (Point version).
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawLineWithShadow(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Pen,System.Drawing.Color)">
            <summary>
            Draws shadowed line to be visible on any background (Point version).
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawLineWithShadow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Color)">
            <summary>
            Draws shadowed line to be visible on any background (PointF version).
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawLineWithShadow(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Color,System.Drawing.PointF[])">
            <summary>
            Draws shadowed lines to be visible on any background.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawLineWithShadow(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Color,System.Drawing.Point[])">
            <summary>
            Draws shadow lines to be visible on any background .
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawPolyLine(System.Drawing.Graphics,System.Drawing.Pen,System.Nullable{System.Drawing.Color},System.Boolean,System.Drawing.PointF[])">
            <summary>
            Draws a polyline with optional shadow and closing line.
            </summary>
            <param name="g">The graphic context for the drawing</param>
            <param name="_pen">The pen to use for the primary line</param>
            <param name="shadowColor">If has value, a wider line with the given color will be draw under 
            the primarly line</param>
            <param name="Closed">Indicates whether to show a closing line connecting the last and first point</param>
            <param name="points">A variable length list of points to connect with the polyline</param>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawEllipseWithShadow(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Pen,System.Nullable{System.Drawing.Color})">
            <summary>
            Draws an axes-aligned ellipse with an optional thin shadow around the line
            </summary>
            <param name="G"></param>
            <param name="rectF">The ellipse' bounding rectangle</param>
            <param name="_pen"></param>
            <param name="shadowColor">The color of the shadow. If has no value, no shadow will be drawn</param>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawRectangleWithShadow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Pen,System.Nullable{System.Drawing.Color})">
            <summary>
            Draws a rectangle with an optional thin shadow around the line
            </summary>
            <param name="G"></param>
            <param name="rect">The rectangle</param>
            <param name="_pen"></param>
            <param name="shadowColor">The color of the shadow. If has no value, no shadow will be drawn</param>
        </member>
        <member name="M:Claron.WIF.SysUtils.DrawFilledRectangleWithShadow(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Pen,System.Nullable{System.Drawing.Color})">
            <summary>
            Draws a filled rectangle with an optional thin shadow around the line
            </summary>
            <param name="G"></param>
            <param name="rect">The rectangle</param>
            <param name="_pen"></param>
            <param name="shadowColor">The color of the shadow. If has no value, no shadow will be drawn</param>
        </member>
        <member name="P:Claron.WIF.SysUtils.IsDeveloperLicense">
            <summary>
            True if a valid developer license was found.
            Internally cached to avoid reopening of license file.
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.IsDeveloper">
            <summary>
            Global state property that is always false if no developer license is present.
            Otherwise (developer license is present) the property is by default true, but can be set to any desired state.
            Preferred use: to disable developer mode rename developer license file to garbage
            Not preferred but possible: assign false to this property during application start.
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.AtlasesPath">
            <summary>
            Returns the path of the atlases directory (with no final slash).  DirectoryNotFoundException is thrown if the
            Atlases directory is not found in the directory this assembly is located or in the parent directories of the
            executable.
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.FloatingPointModel">
            <summary>
            The floating point model to use.
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.SuggestedThreadsCount">
            <summary>
            A suggested thread count for multithreading.
            If never set, or set to 0, subsequently returns the # of processors.
            </summary>
        </member>
        <member name="T:Claron.WIF.SysUtils.FloatingPointModelEnum">
            <summary>
            Enum to specify the floating point model for precompiled dlls. Currently
            affects the WIF registration C++ dlls only.
            </summary>
        </member>
        <member name="T:Claron.WIF.SysUtils.WIFStopWatch">
            <summary>
            An alternative to the .NET StopWatch class with a simpler API and easier access to sub-millisec timing measurements.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFStopWatch.#ctor">
            <summary>
            Creates and immediately starts the watch
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFStopWatch.#ctor(System.String)">
            <summary>
            Creates and immediately starts the watch with a given name.
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFStopWatch.Restart">
            <summary>
            Resets the measurement and start running again
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFStopWatch.Reset">
            <summary>
            Resets the measurement and stay paused
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFStopWatch.StringToSeconds(System.String)">
            <summary>
            Converts a string in the format ##m ##s to seconds.
            </summary>
            <param name="str">The string </param>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFStopWatch.DebugPrint(System.String)">
            <summary>
            Prints the elapsed time to the "Immediate" debug window without affecting
            the measurement (the stopwatch is paused for the print duration). Does nothing
            when not compiled in debug mode.
            </summary>
            <param name="Prestr">A tag/name to print before the elapsed time</param>
        </member>
        <member name="M:Claron.WIF.SysUtils.WIFStopWatch.DebugPrint">
            <summary>
            Prints the elapsed time to the "Immediate" debug window without affecting
            the measurement (the stopwatch is paused for the print duration). Does nothing
            when not compiled in debug mode.
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.WIFStopWatch.Name">
            <summary>
            Returns the name of the stopwatch.
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.WIFStopWatch.Seconds">
            <summary>
            Returns the (unpaused) elapsed seconds (in microsecond resolution) since the watch was created or restarted
            We being set it automatically pauses the timer so the set time will be queryable till the next call to Pause = false
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.WIFStopWatch.Minutes">
            <summary>
            Returns the (unpaused) elapsed microseconds since the watch was created or restarted
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.WIFStopWatch.Microseconds">
            <summary>
            Returns the (unpaused) elapsed microseconds since the watch was created or restarted
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.WIFStopWatch.Milliseconds">
            <summary>
            Returns the (unpaused) elapsed milliseconds since the watch was created or restarted
            </summary>
        </member>
        <member name="P:Claron.WIF.SysUtils.WIFStopWatch.SecondsRemaining">
            <summary>
            A property allowing the StopWatch to act as a count-down timer.
            </summary>
            <value>Sets the countdown timer to the given seconds remaining.</value>
            <returns>How much time, in seconds, is left on the timer (may be negative).</returns>
            <remarks>The count-down is only active when the stop watch is active. </remarks>
        </member>
        <member name="T:Claron.WIF.SysUtils.RAM">
            <summary>
            Represents all the physical memory pages allocated to this process. Helps Track changes due
            to program activities.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.RAM.AddedMB">
            <summary>
            Returns the MBs added since the last time this function was called (or the object was created).
            </summary>
            <remarks>All garbage is collected first</remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.RAM.PrintAdded(System.String)">
            <summary>
            Log the MB added since last time.
            </summary>
            <param name="Label">Default value = ""</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.SysUtils.RAM.MB">
            <summary>
            Provides the MB this process occupies in paged memory
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.RAM.MemPhysicalGB">
            <summary>
            Provides the GB this process occupies in physical memory
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.RAM.MemVirtualGB">
            <summary>
            Provides the GB this process occupies in virtual memory
            </summary>
        </member>
        <member name="M:Claron.WIF.SysUtils.RAM.MemPeakVirtualGB">
            <summary>
            Provides the GB this process occupies in virtual memory
            </summary>
        </member>
        <member name="M:Claron.WIF.Serialization.SaveToFile(System.Object,System.String,System.Boolean)">
            <summary>
            Serializes the object to the specified file in a binary or soap format, optionally
            GZIP compressed.
            </summary>
            <param name="o">object to serialize</param>
            <param name="filePath">Full path at which to save the object. If the file extension is .gz, 
            if will be compressed using GZIP.</param>
            <param name="UseSoapFormatter">If false, a binary formatter is used</param>
        </member>
        <member name="M:Claron.WIF.Serialization.SaveToStream(System.Object,System.IO.Stream)">
            <summary>
            Saves the given object to the given stream.
            </summary>
            <param name="o">The object to serialize.</param>
            <param name="stream">The stream to serialize to.</param>
        </member>
        <member name="M:Claron.WIF.Serialization.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads an object from the given stream.
            </summary>
            <param name="stream">The stream to deserialize from.</param>
        </member>
        <member name="M:Claron.WIF.Serialization.SerializeToByteArray(System.Object)">
            <summary>
            Serializes the object to a byte array in a binary format
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Serialization.SerializeToByteArray(System.Object,System.Boolean)">
            <summary>
            Serializes the object to a byte array in a binary or soap format
            </summary>
            <param name="obj"></param>
            <param name="UseSoapFormatter"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Serialization.DeserializeFromByteArray(System.Byte[])">
            <summary>
            Deserializes an object from a byte array in binaryformat.
            </summary>
        </member>
        <member name="M:Claron.WIF.Serialization.DeserializeFromByteArray(System.Byte[],System.Boolean)">
            <summary>
            Deserializes an object from a byte array in binary or soap format.
            </summary>
        </member>
        <member name="M:Claron.WIF.Serialization.DeserializeFromGzippedByteArray(System.Byte[])">
            <summary>
            Deserializes an object from a GZIP-compressed byte array (binaryformat).
            </summary>
        </member>
        <member name="M:Claron.WIF.Serialization.LoadFromFile(System.String,System.Boolean)">
            <summary>
            Deserializes an object from a file (binary format), optionally decompressing it.
            </summary>
            <param name="filePath">Full path from which to deserialize.
            The file must exist, or an exception will be raised. If the file has a .gz extension
            it is assumed to be compressed, and will be decompressed first.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Claron.WIF.Serialization.SerializableClassFields(System.Type)">
            <summary>
            Returns a list of all the class instance fields (vars/properties) that are serializeable
            </summary>
            <param name="clsType">The class type</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Serialization.SerializeObjectFields(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Int32)">
            <summary>
            Smartly adds all the field values of an object to a SerializationInfo object.
            Looks after WIFobject fields if needed, Filters out events, records the version number.
            </summary>
            <param name="o">The object to be serialized (usually "me")</param>
            <param name="context"> As passed to GetObjectData </param>
            <param name="info"> As passed to GetObjectData </param>
            <param name="SerializationVersion">The current serialization version of the class</param>
            <remarks>About 1.5-2X times slower than default serialization per field.
            but this only rarely causes a noticeable delay.</remarks>
        </member>
        <member name="M:Claron.WIF.Serialization.DeserializeObjectFields(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Int32@,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Deserializes the object fully if it was serialized with the current version,
             or otherwise returns the fields to be handled in a custom manner by the class.
             </summary>
             <param name="o">The object to be deserialized</param>
             <param name="info">As passed to ClassName(ByVal info As SerializationInfo, ByVal context As StreamingContext)</param>
             <param name="context">As passed to ClassName(...</param>
             <param name="outSerializedVersion">Output: the SerializationVersion of the
             object when it was serialized using SerializeObjectFields. If it was not saved
             using SerializeObjectFields a value of 0 is returned</param>
             <param name="outUnrestoredObjectFields">An allocated dictionary to hold the fields in the
             object that were not found in the serialization stream (and were therefore not restored).
             When null, it is ignored.</param>
             <param name="outUnassignedDeserializedFields">An allocated dictionary to hold the fields that
             were in the serialization stream but had no match in the current object field ("abandoned fields").
             When null, it is ignored.</param>
            
             <remarks> Works with objects serialized earlier using any other method as well.
             </remarks>
             <example>
             Example usage (C#):
             
              [System.Serializable()]
              public class Foo : WifObject, ISerializable {
             
             ....
             
              public Foo(SerializationInfo Info, StreamingContext context) {
                 Dictionary &lt;String, Object &gt; Unrestored = new Dictionary&lt;String, Object &gt;();
                 Dictionary &lt;String, Object &gt; SerLeftOvers = new Dictionary&lt;String, Object &gt;();
                 int SerVersion = 0;
                 Serialization.DeserializeObjectFields(this, Info, context, ref SerVersion, Unrestored, SerLeftOvers);
                 if (!Unrestored.ContainsKey("NewProperty")) {
                   this.NewProperty = 1; //Default
                 }
                 if (!SerLeftOvers.ContainsKey("OldName")) {
                   this.NewName = SerLeftOvers("OldName");
                 }
              }
             
             Example usage (VB):
            
            Const SerializationVersion As Integer = 2
            Public Dollars As Double = 0.2 'In version 1 it was: Public cents As Integer
            
            Private Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
              Dim SerVersion As Integer
              Dim Unrestored, SerLeftOvers As New Dictionary(Of String, Object)
              Serialization.DeserializeObjectFields(Me, info, context, SerVersion, Unrestored, SerLeftOvers)
              'Note that the dictionary keys are case-sensitive
              If Unrestored.ContainsKey("Dollars") And SerLeftOvers.ContainsKey("cents") Then
                Dollars = SerLeftOvers("cents") / 100
              End If
            End Sub
            </example>
        </member>
        <member name="M:Claron.WIF.Serialization.CopySerializeableFields(System.Object,System.Object)">
            <summary>
            Sets the serializeable fields of one instance to be the same as another's of the same type.
            </summary>
        </member>
        <member name="M:Claron.WIF.Serialization.SerializeToBase64(System.Object)">
            <summary>
            Returns an array of string lines (instead of a byte array) representation of a serialized
            object compressed using ZIP. Suitable for "printing" objects into a text file
            (or sending them over a communication protocols that accept only short strings).
            </summary>
            <param name="obj">The object to be serialized to a string array</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.ToArgb(System.Drawing.Color)">
            <summary>
            Converts a color structure to a 32b unsigned ARGB value (not signed, as the structure returns).
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.ToArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Combines the 4 color components (0..255 each) into a single Argb value
            </summary>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.ToArgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Combines the 3 color components (0..255 each) into a single Argb value with full opacity (alpha=255)
            </summary>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.RGB2HSL(System.Drawing.Color,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps a red/green/blue color to hue/Saturation/lightness values).
            </summary>
            <param name="clr"></param>
            <param name="H"></param>
            <param name="S"></param>
            <param name="L"></param>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.HSVtoRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Function to convert from HSV values to RGB values.
            </summary>
            <param name="hue">The hue value.</param>
            <param name="saturation">The saturation value.</param>
            <param name="value">The brightness value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.HSVtoRGBTable(System.Int32,System.Int32)">
            <summary>
            Returns an array of RGB values with hue values in the range 0 to 255.
            </summary>
            <param name="saturation">The saturation value.</param>
            <param name="value">The brightness.</param>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.RGBtoHSV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts an RGB value into a HSV value.
            </summary>
            <param name="red">The red value.</param>
            <param name="green">The green value.</param>
            <param name="blue">The blue value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.ColorSpaces._perceptionUniformColors9x7">
            <summary>
            The 9x7 grid of Rgb values for the colors returned by PerceptionUniformColors9x7().
            </summary>
            <remarks>Taken from 7 evenly-distributed maximally-saturated circles
            perpendicular to the black-white axis of the RGB color cube.</remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PerceptionUniformColors9x7(System.Int32,System.Int32)">
            <summary>
            Perceptually uniform distributed nameable colors. Few enough to be recognized individually.
            Returned as .Net Color.
            </summary>
            <param name="hueI">0=grey, 1=red, 2=magenta, 3=purple, 4=blue, 5=cyan, 6=green, 7=yellow, 8=orange</param>
            <param name="brightnessI">0=black, 1=darkest color, 2=medium dark color 3=most saturated color,
            4=medium bright color, 5=brightest color, 6=white</param>
            <returns>The selected color (as .Net Color object).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.Interpolate(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Interpolates a value between two colors in RGB space
            </summary>
            <param name="color0"></param>
            <param name="color1"></param>
            <param name="fraction">Fraction of distance from color0 to color1 (0->color0, 1->color1)</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.Interpolate(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Interpolates a value between two colors in RGB space
            </summary>
            <param name="color0"></param>
            <param name="color1"></param>
            <param name="fraction">Fraction of distance from color0 to color1 (0->color0, 1->color1)</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.InterpolateToArgb(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Interpolates a value between two colors (in RGB space) and returns the result as a 32b unsigned
            Argb value.
            </summary>
            <param name="color0"></param>
            <param name="color1"></param>
            <param name="fraction">Fraction of distance from color0 to color1 (0->color0, 1->color1)</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PerceptionUniformColors9x7asU32(System.Int32,System.Int32)">
            <summary>
            Perceptually uniform distributed nameable colors. Few enough to be recognized individually.
            Returned as U32, i.e. as used by Tissue.BaseRGB
            </summary>
            <param name="hueI">0=gray, 1=red, 2=magenta, 3=purple, 4=blue, 5=cyan, 6=green, 7=yellow, 8=orange</param>
            <param name="brightnessI">0=black, 1=darkest color, 2=medium dark color 3=most saturated color,
            4=medium bright color, 5=brightest color, 6=white</param>
            <returns>The selected color (as simple U32).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PerceptionUniformColors9x7asPen(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perceptually uniform distributed nameable colors. Few enough to be recognized individually.
            Returned as .net Pen.
            </summary>
            <param name="hueI">0=grey, 1=red, 2=magenta, 3=purple, 4=blue, 5=cyan, 6=green, 7=yellow, 8=orange</param>
            <param name="brightnessI">0=black, 1=darkest color, 2=medium dark color 3=most saturated color,
            4=medium bright color, 5=brightest color, 6=white</param>
            <param name="penWidth">The width of the pen.</param>
            <param name="opacity">The opacity of the pen in range [0-255].</param>
            <returns>The selected color as .NET Pen.</returns>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PerceptionUniformColors9x7asPen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Perceptually uniform distributed nameable colors. Few enough to be recognized individually.
            Returned as .net Pen.
            </summary>
            <param name="hueI">0=grey, 1=red, 2=magenta, 3=purple, 4=blue, 5=cyan, 6=green, 7=yellow, 8=orange</param>
            <param name="brightnessI">0=black, 1=darkest color, 2=medium dark color 3=most saturated color,
            4=medium bright color, 5=brightest color, 6=white</param>
            <param name="penWidth"></param>
            <returns>The selected color as .NET Pen.</returns>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PenNextDistinctColor">
            <summary>
            Returns a random color pen, cycling through 27 colors such that subsequent ones look quite different.
            </summary>
            <returns>Pen with a distinct color</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PenNextDistinctColor(System.Int32)">
            <summary>
            Returns a random color pen, cycling through 27 colors such that subsequent ones look quite different.
            TIP: If you are looping through the colors to display and want to make sure you see the same colors
            at every redraw, then you can force the start of the color loop by supplying the forceStart argument.
            Make sure you call this function with the argument only once, outside of the loop, if any.
            </summary>
            <param name="forceStart">Optional value to specify the index of the first color</param>
            <returns>Pen with a distinct color</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PerceptionUniformColorsBadToGood0to1(System.Double)">
            <summary>
            Color scale from red to green in 5 steps.
            Subset of Perceptually uniform distributed nameable colors. Few enough to be recognized individually.
            Returned as .Net Color.
            </summary>
            <param name="fractionGood">expected in [0,1] range, 0=worst, 1=best, values outside the range are clamped to the range boundaries.</param>
            <returns>The selected color (as .Net Color object).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.PerceptionUniformColorsBadToGood0to1asPen(System.Double,System.Int32)">
            <summary>
            Color scale from red to green in 5 steps.
            Subset of Perceptually uniform distributed nameable colors. Few enough to be recognized individually.
            Returned as .Net Pen which can be reused in subsequent calls.
            </summary>
            <param name="fractionGood">expected in [0,1] range, 0=worst, 1=best, values outside the range are clamped to the range boundaries.</param>
            <param name="penWidth"></param>
            <returns>The selected color (as .Net Pen object).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.Interpolate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Interpolate between u and v based on the relative distances of x and y from z.
            </summary>
            <param name="x">Source interval start.</param>
            <param name="y">Source interval internal point.</param>
            <param name="z">Source interval end.</param>
            <param name="u">Destination interval start.</param>
            <param name="v">Destination interval end.</param>
            <returns>Interpolated value in u-v interval.</returns>
            <remarks>Assumes x less y less z, but not u less v.</remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.BuiltLutHump(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a Lut (look up table) for a trapezoid like intensity-to-intensity transfer function,
            i.e. a hump in the middle of zero on both ends of the table.
            </summary>
            <param name="below00">Index of hump start. Below Lut is zero.</param>
            <param name="below05">Index of hump raising edge 50% point.</param>
            <param name="below10">Index of hump top reached.</param>
            <param name="above10">Index of hump top end.</param>
            <param name="above05">Index of hump falling edge 50% point.</param>
            <param name="above00">Index of hump end. Above Lut is zero.</param>
            <param name="maxLutVal">Lut value at hump top.</param>
            <returns>The new Lut.</returns>
            <remarks>Assumes all indices are strong monotone increasing and are in the 0-4095 range.</remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.BuiltLutHumpRgba(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a Lut (look up table) for a trapezoid like intensity-to-Rgba transfer function,
            i.e. a hump in the middle of zero on both ends of the table.
            </summary>
            <param name="below00">Index of hump start.</param>
            <param name="below05">Index of hump raising edge 50% point.</param>
            <param name="below10">Index of hump top reached.</param>
            <param name="above10">Index of hump top end.</param>
            <param name="above05">Index of hump falling edge 50% point.</param>
            <param name="above00">Index of hump end.</param>
            <returns>The new Lut.</returns>
            <remarks>Assumes all indices are strong monotone increasing and are in the 0-4095 range.</remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.BuiltLutArgbRainbowOddReverseScaled(System.Int32,System.Int32,System.Double)">
            <summary>
            Builds a Lut (look up table) for a very colorful but dimmed down CtValue-to-Rgba transfer function.
            All useful visually separating colors are used, each hue presenting its own CtValue range and
            brightness steps to identify CtValue subranges (alternating dark to bright and bright to dark,
            so at each next adjacent hue the brightness remains constant and then changes in the opposite direction).
            The CtValue ranges are non-uniform in size, giving most detail in the area of soft tissuse (Hu -100 to 400).
            The dimming is according to the dimColorsFactor0to1.
            </summary>
            <param name="minus1000HuAsCT">The CtValue for 1000Hu.</param>
            <param name="delta100HuAsCt">The CtValue delta for delta 100Hu.</param>
            <param name="dimColorsFactor0to1">The [0,1] factor to dim all colors by: 0==all black, 1==no dimming.</param>
            <returns>The new Lut.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.BuiltLutArgbRainbowOddReverse(System.Int32,System.Int32)">
            <summary>
            Builds a Lut (look up table) for a very colorful CtValue-to-Rgba transfer function.
            All useful visually separating colors are used, each hue presenting its own CtValue range and
            brightness steps to identify CtValue subranges (alternating dark to bright and bright to dark,
            so at each next adjacent hue the brightness remains constant and then changes in the opposite direction).
            The CtValue ranges are non-uniform in size, giving most detail in the area of soft tissuse (Hu -100 to 400).
            </summary>
            <param name="minus1000HuAsCT">The CtValue for 1000Hu.</param>
            <param name="delta100HuAsCt">The CtValue delta for delta 100Hu.</param>
            <returns>The new Lut.</returns>
            <remarks>BuiltLutArgbRainbowOddReverseScaled() can be used to produce a dimmer version of the same Lut.</remarks>
        </member>
        <member name="M:Claron.WIF.ColorSpaces.BuiltLutArgbRainbow(System.Int32,System.Int32)">
            <summary>
            Builds a Lut (look up table) for a very colorful CtValue-to-Rgba transfer function.
            All useful visually separating colors are used, each hue presenting its own CtValue range and
            brightness steps to identify CtValue subranges (each dark to bright,
            so at each next adjacent hue the brightness jumps from most bright back to most dark).
            The CtValue ranges are non-uniform in size, giving most detail in the area of soft tissuse (Hu -100 to 400).
            </summary>
            <param name="minus1000HuAsCT">The CtValue for 1000Hu.</param>
            <param name="delta100HuAsCt">The CtValue delta for delta 100Hu.</param>
            <returns>The new Lut.</returns>
            <remarks>BuiltLutArgbRainbowOddReverse() is visually more contiguous, make sure to check it out as well.</remarks>
        </member>
        <member name="M:Claron.WIF.MultiThreading.ThreadStartWorkerSub(System.Object)">
            <summary>
            Generic thread function launcher
            </summary>
            <param name="_params">The parameters to pass to the actual ThreadWorkerSub</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.MultiThreading.Run(Claron.WIF.MultiThreading.ThreadWorkerSub,System.Object)">
            <summary>
            Generic multi thread function launcher.
            The threads number is SysUtils.SuggestedThreadsCount.
            </summary>
            <param name="func">The function to run inside each thread</param>
            <param name="threadData">The thread data to hand to each thread</param>
            <remarks>If SysUtils.SuggestedThreadsCount == 1, executes the worker thread directly, to 
            make following flow control easier.
            While it waits for the threads to complete, the UI thread is allowed to proceed,
            so UI events may be raised, possibly leading to reentry.
            If any of the threads encounters an exception, the exception needs to be caught and
            assigned to _threadEx, in which case it will be thrown to the client after the threads
            return.  
            <example>
            
            private class SharedThreadsData {
              public sometype somevar;
              public othertype othervar;
              ...
            }
            
            void ThreadFunction(int myThreadI, int numThreads, object threadData, ref Exception threadEx) {
            try {
              var D = (SharedThreadsData)threadData;
             ....
              } catch (Exception ex) {
                 threadEx = ex; //return to the main thread
              }
            }
            
            calling sequence:
              ...
              var tdata = new SharedThreadsData { somevar = X, othervar = Y, ... };
              MultiThreading.Run(EstimateCurvaturesThread, tdata);
              ...
             </example> 
             </remarks>
        </member>
        <member name="M:Claron.WIF.MultiThreading.Run(Claron.WIF.MultiThreading.ThreadWorkerSub,System.Object,System.Int32)">
            <summary>
            Generic multi thread function launcher.
            </summary>
            <param name="func">The function to run inside each thread</param>
            <param name="threadData">The thread data to hand to each thread</param>
            <param name="numThreads">The number of threads to execute in parallel</param>
            <remarks>If SysUtils.SuggestedThreadsCount == 1, executes the worker thread directly, to 
            make following flow control easier.
            While it waits for the threads to complete, the UI thread is allowed to proceed,
            so UI events may be raised, possibly leading to reentry.
            If any of the threads encounters an exception, the exception needs to be caught and
            assigned to _threadEx, in which case it will be thrown to the client after the threads
            return.  
            <example>
            
            private class SharedThreadsData {
              public sometype somevar;
              public othertype othervar;
              ...
            }
            
            void ThreadFunction(int myThreadI, int numThreads, object threadData, ref Exception threadEx) {
            try {
              var D = (SharedThreadsData)threadData;
             ....
              } catch (Exception ex) {
                 threadEx = ex; //return to the main thread
              }
            }
            
            calling sequence:
              ...
              var tdata = new SharedThreadsData { somevar = X, othervar = Y, ... };
              MultiThreading.Run(EstimateCurvaturesThread, tdata, ThreadsNum);
              ...
             </example> 
             </remarks>
        </member>
        <member name="P:Claron.WIF.MultiThreading.RunningThreadsCount">
            <summary>
            The number of threads forked off and concurrently running (other than the main one)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Claron.WIF.MultiThreading.ThreadStartArguments">
            <summary>
            Generic parameter set for any of the parallel functions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.MultiThreading.ThreadWorkerSub">
            <summary>
            Generic parallel function delegate
            </summary>
            <param name="ThreadIndex">The thread index (0..numThreads-1)</param>
            <param name="numThreads">The total number of threads launched.</param>
            <param name="threadData">Data passed on to this thread (can be any object)</param>
            <param name="threadException">A place to write out any exception that occured
            in the thread so it gets passed back to the calling thread.</param>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.Array2D`1">
            <summary>
            2D array for storing objects of type T.
            </summary>
            <typeparam name="T">The type of the object to store in the array.</typeparam>
        </member>
        <member name="F:Claron.WIF.Array2D`1._dims">
            <summary>
            The dimensions of the array.
            </summary>
        </member>
        <member name="F:Claron.WIF.Array2D`1._values">
            <summary>
            The values of the 2D array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Array2D`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new 2D array.
            </summary>
            <param name="nx">The number of elements in the x-direction.</param>
            <param name="ny">The number of elements in the y-direction.</param>
        </member>
        <member name="P:Claron.WIF.Array2D`1.Dims">
            <summary>
            Returns the dimensions of the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array2D`1.Values">
            <summary>
            Returns the data of the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array2D`1.NX">
            <summary>
            Returns the number of values in the x-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array2D`1.NY">
            <summary>
            Returns the number of values in the y-direction.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array2D`1.Item(System.Int32)">
            <summary>
            Property to get/set a value in the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array2D`1.Length">
            <summary>
            Returns the number of elements in the array.
            </summary>
        </member>
        <member name="T:Claron.WIF.Array3D`1">
            <summary>
            3D array for storing objects of type T.
            </summary>
            <typeparam name="T">The type of the object to store in the array.</typeparam>
        </member>
        <member name="F:Claron.WIF.Array3D`1._dims">
            <summary>
            The dimensions of the array.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Array3D`1._values">
            <summary>
            The values of the 3D array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Array3D`1.ValuesGet(System.Int32)">
            <summary>
            Returns slice k of the 3D array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Array3D`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new 3D array.
            </summary>
            <param name="nx">The number of elements in the x-direction.</param>
            <param name="ny">The number of elements in the y-direction.</param>
            <param name="nz">The number of elements in the z-direction.</param>
        </member>
        <member name="P:Claron.WIF.Array3D`1.Dims">
            <summary>
            Returns the dimensions of the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array3D`1.Values">
            <summary>
            Returns the data of the array.
            </summary>
        </member>
        <member name="T:Claron.WIF.Array3DBoolean">
            <summary>
            3D array for storing objects of type Boolean. This class needed to be a separate class
            from Array3D(of T) since some methods require arithmetic operations on the type T and .NET
            does now allow arithmetic operations on generic types.
            </summary>
        </member>
        <member name="F:Claron.WIF.Array3DBoolean._dims">
            <summary>
            The dimensions of the array.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Array3DBoolean._values">
            <summary>
            The values of the 3D array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Array3DBoolean.ValuesGet(System.Int32)">
            <summary>
            Returns slice k of the 3D array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Array3DBoolean.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new 3D array.
            </summary>
            <param name="nx">The number of elements in the x-direction.</param>
            <param name="ny">The number of elements in the y-direction.</param>
            <param name="nz">The number of elements in the z-direction.</param>
        </member>
        <member name="M:Claron.WIF.Array3DBoolean.AverageDown(System.Int32[])">
            <summary>
            Averages down a 3D array.
            </summary>
            <param name="pixelSizeFactor">The relative size of voxels in the x-, y-, z-directions
            respectively in the new Array3D in comparison to this Array3D.</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Array3DBoolean.AverageDownThreadSub(System.Object)">
            <summary>
            Thread sub for averaging down an Array3D.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array3DBoolean.Dims">
            <summary>
            Returns the dimensions of the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array3DBoolean.Values">
            <summary>
            Returns the data of the array.
            </summary>
        </member>
        <member name="T:Claron.WIF.Array3DBoolean.AverageDownThreadParams">
            <summary>
            Thread parameters for averaging down an Array3D object.
            </summary>
        </member>
        <member name="F:Claron.WIF.Array3DBoolean.AverageDownThreadParams._volT">
            <summary>
            The target volume (volume storing the averaged down values).
            </summary>
        </member>
        <member name="F:Claron.WIF.Array3DBoolean.AverageDownThreadParams._kRange">
            <summary>
            The slice range in the target volume which is allocated to a thread.
            </summary>
        </member>
        <member name="F:Claron.WIF.Array3DBoolean.AverageDownThreadParams._pixelSizeFactor">
            <summary>
            The pixel size factor.
            </summary>
        </member>
        <member name="T:Claron.WIF.Array3DInt32">
            <summary>
            3D array for storing integers.
            </summary>
        </member>
        <member name="F:Claron.WIF.Array3DInt32._dims">
            <summary>
            The dimensions of the array.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Array3DInt32._values">
            <summary>
            The values of the 3D array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Array3DInt32.ValuesGet(System.Int32)">
            <summary>
            Returns slice k of the 3D array.
            </summary>
        </member>
        <member name="M:Claron.WIF.Array3DInt32.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new 3D array.
            </summary>
            <param name="nx">The number of elements in the x-direction.</param>
            <param name="ny">The number of elements in the y-direction.</param>
            <param name="nz">The number of elements in the z-direction.</param>
        </member>
        <member name="M:Claron.WIF.Array3DInt32.InterpolateLinear(System.Double,System.Double,System.Double)">
            <summary>
            Does linear interpolation at the specified location in image coordinates.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <param name="k"></param>
        </member>
        <member name="P:Claron.WIF.Array3DInt32.Dims">
            <summary>
            Returns the dimensions of the array.
            </summary>
        </member>
        <member name="P:Claron.WIF.Array3DInt32.Values">
            <summary>
            Returns the data of the array.
            </summary>
        </member>
        <member name="T:Claron.WIF.AsyncResult`1">
            <summary>
            An abstract implementation of an asynchronous result i.e. any
            result that requires some time to retrieve, compute, load, etc.
            </summary>
            <remarks>
            The actual result is returned in the AsyncResult.Result field
            or the IAsyncResult.AsyncState field.  The result should be retrieved
            only when AsyncResult.IsCompleted is true.
            Alternatively, one may subscribe for the completion event explicitly.  
            Derived classes are responsible for calling AsyncResult.Complete with 
            the result object.  If the result is completed synchronously, then 
            the derived class is responsible for marking the property 
            AsyncResult.CompletedSynchronously appropriately.
            </remarks>
        </member>
        <member name="M:Claron.WIF.AsyncResult`1.Complete(`0)">
            <summary>
            called by concrete class whenever a result becomes available
            </summary>
            <param name="result">the stored result</param>
        </member>
        <member name="M:Claron.WIF.AsyncResult`1.ReportProgress(Claron.WIF.ProgressEventArgs)">
            <summary>
            called by concrete class whenever a progress is to be published
            </summary>
            <param name="e">the progress event</param>
            <remarks>in the case of encapsulated or aggregated results the publisher may be a different object</remarks>
        </member>
        <member name="E:Claron.WIF.AsyncResult`1.CompletedEvent">
            <summary>
            Subscription point for completion notification 
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResult`1.Result">
            <summary>
            The type safe version of IAsyncResult.AsyncState
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResult`1.MaxWait">
            <summary>
            A failsafe maximum time to wait for a synchronous result
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResult`1.SyncResult">
            <summary>
            A blocking call to retrieve the asynchronous result - use with caution
            </summary>
        </member>
        <member name="E:Claron.WIF.AsyncResult`1.ProgressEvent">
            <summary>
            Subscription point for completion notification 
            </summary>
        </member>
        <member name="T:Claron.WIF.AsyncResult`1.CompletedHandler">
            <summary>
            The delegate signature for notification
            </summary>
            <param name="ar">this async result instance</param>
        </member>
        <member name="T:Claron.WIF.AsyncResult`1.Aggregate">
            <summary>
            Aggregate class used to wrap a set of async results and deliver a single completion 
            event once all results are complete.
            </summary>
        </member>
        <member name="M:Claron.WIF.AsyncResult`1.Aggregate.#ctor(Claron.WIF.AsyncResult{`0}[])">
            <summary>
            Wrap a set of of results in one result
            </summary>
            <param name="items">collection of inner results</param>
        </member>
        <member name="P:Claron.WIF.AsyncResult`1.Aggregate.Item(System.Int32)">
            <summary>
            Retrieve the indexed wrapped AsyncResult
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Claron.WIF.AsyncResult`1.Aggregate.Count">
            <summary>
            The number of wrapped AsyncResult instances
            </summary>
        </member>
        <member name="T:Claron.WIF.AsyncResult`1.ProgressHandler">
            <summary>
            The delegate signature for notification
            </summary>
            <param name="me">the reporting instance</param>
            <param name="e">nominal desription of the stage of progression</param>
            <remarks>developers should use derived ProgressEvent args for specific identification of progress</remarks>
        </member>
        <member name="T:Claron.WIF.AsyncResultFactory`2">
            <summary>
            This class facilitates a factory pattern that produces asynchronous results and
            persists those results based on signature identification and .NET serialization.
            </summary>
            <typeparam name="TSource">the input type</typeparam>
            <typeparam name="TResult">the result type</typeparam>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.SuggestedFolder(System.String,System.Type)">
            <summary>
            suggests a folder name based on the concatentation of
            the supplied root path and namespace of the given type.
            </summary>
            <param name="root">root directory; all folders are relative to this path</param>
            <param name="type">class type whose class path specifies the subfolder(s) relative to the root</param>
            <returns>the concatenated path unique to this specified class</returns>
            <remarks>inner classes extend the class path with additional subfolders reflecting the inner class nesting</remarks>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.SuggestedFolder(System.String)">
            <summary>
            returns the suggested folder for this factory class
            </summary>
            <param name="root">root directory; all folders are relative to this path</param>
            <returns>the concatenated path unique to this class</returns>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.RestoreAll(System.String,System.Collections.Generic.ICollection{Claron.WIF.AsyncResultFactory{`0,`1}.Record})">
            <summary>
            restores all persisted records from the specified location
            </summary>
            <param name="path">the full path to the location of the records</param>
            <param name="ledger">the collection of records in which to keep the deserialized instances</param>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.Save(Claron.WIF.AsyncResultFactory{`0,`1}.Record,System.String,System.String,`1)">
            <summary>
            Persist the record and result
            </summary>
            <param name="record">the record instance</param>
            <param name="path">the full path to the persistance location</param>
            <param name="suffix">the record suffix </param>
            <param name="result">the result to persist</param>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.SaveResult(Claron.WIF.AsyncResultFactory{`0,`1}.Record,System.String,System.String,`1)">
            <summary>
            Persist the result
            </summary>
            <param name="record">the corresponding record</param>
            <param name="path">the full path to the persistance location</param>
            <param name="suffix">the record suffix </param>
            <param name="result">the result to persist</param>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.NewBootstrapper">
            <summary>
            factory method used to construct a bootstrapper i.e. a class that knows how to create a result from the source
            </summary>
            <returns>a bootstrapper instance</returns>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.NewDeserializer">
            <summary>
            factory method used to construct a deserializer
            </summary>
            <returns>a deserializer</returns>
            <remarks>generally the default is sufficient; only override if a drastically different persistence schema is used.</remarks>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.GetResult(`0,System.String,System.Object)">
            <summary>
            retrieve the result either from disk, if persisted, or created with the bootstrapper
            </summary>
            <param name="input">input for the operation</param>
            <param name="signature">unique identifier for the input</param>
            <param name="owner">an arbitrary owner (identifier) for the result</param>
            <returns>an asynchronous result</returns>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.GetPersistedResult(System.String,System.Object)">
            <summary>
            retrieve the result from disk, if persisted
            </summary>
            <param name="signature">unique identifier for the input</param>
            <param name="owner">an arbitrary owner (identifier) for the result</param>
            <returns>an asynchronous result if persisted; null otherwise</returns>
            <remarks>override this method if an alternative persistence strategy is used</remarks>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.Persist(`1,System.String)">
            <summary>
            Explicitly persist the result
            </summary>
            <param name="result">the result instance</param>
            <param name="signature">the unique identifier for the result</param>
            <remarks>The initial result from the bootstrapping is automatically persisted.  Call this only
            if the result requires additional persistence (e.g. whenever the result contents change.)</remarks>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.IsPersisted(System.String)">
            <summary>
            check the persistence records to find one corresponding to the provided signature
            </summary>
            <param name="signature">unique identifier for the persisted result</param>
            <returns>true when a record is present; false otherwise</returns>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.Folder">
            <summary>
            the path to the persistence location
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.Suffix">
            <summary>
            override this property when wanting to identify the persistent files with this suffix (e.g. ".data")
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.Records">
            <summary>
            a typically static list of records maintained for this factory
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.Version">
            <summary>
            A unique string identifying the version of the persisted record
            </summary>
            <remarks>The string is used as a unique subdirectory so should only contain file-system valid characters</remarks>
        </member>
        <member name="T:Claron.WIF.AsyncResultFactory`2.BaseBootstrapper">
            <summary>
            A bootstrapper class responsible for construction of the desired result instance
            </summary>
            <remarks>this class is responsible for completing the AsyncResult</remarks>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.BaseBootstrapper.Init(Claron.WIF.AsyncResultFactory{`0,`1}.Record,`0)">
            <summary>
            Entry point to start the process of acquiring the desired result
            </summary>
            <param name="record">the persistable record entry for this result</param>
            <param name="item">the source item to start the bootstrap processing</param>
            <returns>by convention, this method must return itself</returns>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.BaseBootstrapper.Owner">
            <summary>
            the factory which started the bootstrap process
            </summary>
        </member>
        <member name="T:Claron.WIF.AsyncResultFactory`2.BaseDeserializer">
            <summary>
            A deserializer class responsible for restoration of the persisted result instance
            </summary>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.BaseDeserializer.Init(System.String)">
            <summary>
            Entry point to start the process of deserializing the persisted result
            </summary>
            <param name="file">the persisted instance of the class</param>
            <returns>by convention, this method must return itself</returns>
            <remarks>the base implementation performs the read from disk in a worker thread from the system thread pool</remarks>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.BaseDeserializer.Restore(System.String)">
            <summary>
            Restore the persisted result from file
            </summary>
            <param name="file">persistance artifact</param>
            <returns>the persisted instance, unless deserializaton fails in which case a bootstrapped
            instance is returned</returns>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.BaseDeserializer.Stage">
            <summary>
            label used for progress reporting
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.BaseDeserializer.Owner">
            <summary>
            the identity associated with starting the deserializing process
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.BaseDeserializer.Factory">
            <summary>
            In case of deserialization failure, fallback to bootstrapping the result
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.BaseDeserializer.Input">
            <summary>
            In case of deserialization failure, fallback to bootstrapping the result
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.BaseDeserializer.Signature">
            <summary>
            Corresponding signature
            </summary>
        </member>
        <member name="T:Claron.WIF.AsyncResultFactory`2.Record">
            <summary>
            A signature,Guid pair uniquely with persistence services for saving (i) itself (a lightweight record)
            and its corresponding payload (a heavy weight persistable object.)
            </summary>
        </member>
        <member name="F:Claron.WIF.AsyncResultFactory`2.Record.Suffix">
            <summary>
            The suffix used to decorate the persisted record file
            </summary>
        </member>
        <member name="F:Claron.WIF.AsyncResultFactory`2.Record.Signature">
            <summary>
            The signature that uniquely identifies the corresponding result
            </summary>
        </member>
        <member name="M:Claron.WIF.AsyncResultFactory`2.Record.#ctor(System.String)">
            <summary>
            Creates an instance of a record having the supplied signature that should not contain the character '#', or all past that character is ignored.
            </summary>
            <param name="signature">unique identifier</param>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.Record.Name">
            <summary>
            The unique identifier (GUID) for this record and the corresponding persisted result
            </summary>
        </member>
        <member name="P:Claron.WIF.AsyncResultFactory`2.Record.AssociatedData">
            <summary>
            optional user associated data 
            </summary>
            <remarks>associated data is not persisted</remarks>
        </member>
        <member name="T:Claron.WIF.AssociatedDataShim`1">
            <summary>
            A simple serializable reference for associated data classes.  All
            associated data is obliged to be [Serializable] <see cref="T:System.SerializableAttribute"/>
            if the associated WIF object is serialized.  This shim provides
            a means to associate any class (e.g. without serializability) as
            associated data.
            </summary>
            <typeparam name="T">the referent class</typeparam>
        </member>
        <member name="M:Claron.WIF.AssociatedDataShim`1.Bind(Claron.WIF.WifObject,System.Func{`0},System.String)">
            <summary>
            Factory based lazy instantiation or lookup of an associated data instance.  
            If the instance is not present on the associated data, then an instance is 
            created using the supplied constructor delegate. 
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="ctor">the factory constructor</param>
            <param name="moniker">optional instance identification for the bound class</param>
            <returns>The associated data instance</returns>
            <remarks>When a null constructor is supplied, this call only returns associated data
            if it exists.  Otherwise it returns null and is equivalent to a test for bound data.
            Use a lambda function or anonymous delegate if your constructor requires 
            arguments, or if you need to run any initialization code on the instance.
            Of course, simple assignment is all that's implemented here, so the factory
            pattern for returning the instance is up to the caller.
            </remarks>
        </member>
        <member name="M:Claron.WIF.AssociatedDataShim`1.Bind(Claron.WIF.WifObject,System.Func{`0})">
            <summary>
            Factory based lazy instantiation or lookup of an associated data instance.  
            If the instance is not present on the associated data, then an instance is 
            created using the supplied constructor delegate. 
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="ctor">the factory constructor</param>
            <returns>The associated data instance</returns>
        </member>
        <member name="M:Claron.WIF.AssociatedDataShim`1.Unbind(Claron.WIF.WifObject,System.String)">
            <summary>
            Remove the associated data shim from the WIF object
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="moniker">The optional instance identification for the bound class</param>
            <returns>the bound instance, if present; null otherwise</returns>
        </member>
        <member name="M:Claron.WIF.AssociatedDataShim`1.Unbind(Claron.WIF.WifObject)">
            <summary>
            Remove the associated data shim from the WIF object
            </summary>
            <param name="host">The hosting WIF object</param>
            <returns>the bound instance, if present; null otherwise</returns>
        </member>
        <member name="P:Claron.WIF.AssociatedDataShim`1.Value">
            <summary>
            The inner value or referent class instance
            </summary>
        </member>
        <member name="T:Claron.WIF.AssociatedDataBinder">
            <summary>
            A utility class to lazily bind associated data to a WifObject.
            Unlike the AssociatedDataShim class, the serialization obligation of the
            associated data is dependent on the usage of the bound WIF object.  
            All serialized WIF objects must bind serializable data.
            </summary>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Bind``1(Claron.WIF.WifObject,System.Func{``0},System.String)">
            <summary>
            Factory based lazy instantiation or lookup of an associated data instance.  
            If the instance is not present on the associated data, then an instance is 
            created using the supplied constructor delegate. 
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="ctor">the factory constructor</param>
            <param name="moniker">optional instance identification for the bound class</param>
            <returns>The associated data instance</returns>
            <remarks>When a null constructor is supplied, this call only returns associated data
            if it exists.  Otherwise it returns null and is equivalent to a test for bound data.
            Use a lambda function or anonymous delegate if your constructor requires 
            arguments, or if you need to run any initialization code on the instance.
            Of course, simple assignment is all that's implemented here, so the factory
            pattern for returning the instance is up to the caller.
            </remarks>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Get``1(Claron.WIF.WifObject,System.String)">
            <summary>
            Explicit retrieval of an associated data instance using the same naming 
            schema used by Bind.
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="moniker">optional instance identification for the bound value</param>
            <returns>The stored value</returns>
            <remarks>An exception is thrown if no stored value exists</remarks>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Get``1(Claron.WIF.WifObject)">
            <summary>
            Explicit retrieval of an associated data instance using the same naming 
            schema used by Bind.
            </summary>
            <param name="host">The hosting WIF object</param>
            <returns>The stored value</returns>
            <remarks>An exception is thrown if no stored value exists</remarks>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Set``1(Claron.WIF.WifObject,``0,System.String)">
            <summary>
            Explicit setting of an associated data instance using the same naming 
            schema used by Bind.
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="value">the associated data value</param>
            <param name="moniker">optional instance identification for the bound value</param>
            <returns>The set value</returns>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Set``1(Claron.WIF.WifObject,``0)">
            <summary>
            Explicit setting of an associated data instance using the same naming 
            schema used by Bind.
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="value">the associated data value</param>
            <returns>The set value</returns>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Bind``1(Claron.WIF.WifObject,System.Func{``0})">
            <summary>
            Factory based lazy instantiation or lookup of an associated data instance.  
            If the instance is not present on the associated data, then an instance is 
            created using the supplied constructor delegate. 
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="ctor">the factory constructor</param>
            <returns>The associated data instance</returns>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Unbind``1(Claron.WIF.WifObject,System.String)">
            <summary>
            Remove the associated data shim from the WIF object
            </summary>
            <param name="host">The hosting WIF object</param>
            <param name="moniker">The optional instance identification for the bound class</param>
            <returns>the bound instance, if present; null otherwise</returns>
        </member>
        <member name="M:Claron.WIF.AssociatedDataBinder.Unbind``1(Claron.WIF.WifObject)">
            <summary>
            Remove the associated data shim from the WIF object
            </summary>
            <param name="host">The hosting WIF object</param>
            <returns>the bound instance, if present; null otherwise</returns>
        </member>
        <member name="T:Claron.WIF.StatusEventArgs">
            <summary>
            A status event base class that facilitates providing strongly typed status messages in event handlers
            </summary>
        </member>
        <member name="T:Claron.WIF.ProgressEventArgs">
            <summary>
            A progress event base class that facilitates providing strongly typed progress messages in event handlers
            </summary>
        </member>
        <member name="M:Claron.WIF.ProgressEventArgs.#ctor(System.String,System.Double)">
            <summary>
            Create a progress event
            </summary>
            <param name="stage">label for the stage of the progress</param>
            <param name="value">a normalized progress value (0..1)</param>
        </member>
        <member name="M:Claron.WIF.ProgressEventArgs.#ctor(Claron.WIF.ProgressEventArgs)">
            <summary>
            Clone a progress event
            </summary>
            <param name="e">progress event</param>
        </member>
        <member name="M:Claron.WIF.ProgressEventArgs.#ctor(Claron.WIF.ProgressEventArgs,System.Object)">
            <summary>
            Encapsulate a progress event
            </summary>
            <param name="e">progress event</param>
            <param name="owner">encapsulation owner or identity</param>
        </member>
        <member name="T:Claron.WIF.ProgressKeeper">
            <summary>
            Class for an instance to be handed down through the call tree of a background thread to update computation progress and to terminate early if the user so desires.
            </summary>
        </member>
        <member name="M:Claron.WIF.ProgressKeeper.AdvanceToNextFractionInterval">
            <summary>
            Advances the progress to the given fraction interval of the gap at the current stack level.
            For four equal time consuming steps thus call after each like this:
            ProgressKeeper.AdvanceToFraction(0.00, 0.25)
            ProgressKeeper.AdvanceToFraction(0.25, 0.50)
            ProgressKeeper.AdvanceToFraction(0.50, 0.75)
            ProgressKeeper.AdvanceToFraction(0.75, 1.00)
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector3">
            <summary>
            A structure (value-type) representing a 3D vector of double (float 64b).
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.X">
            <summary>
            The x-component.
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.Y">
            <summary>
            The y-component.
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.Z">
            <summary>
            The z-component.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new vector.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.#ctor(System.Double[])">
            <summary>
            Creates a new vector from an array of values.
            </summary>
            <param name="vals">The components of the vector in order x, y, z.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.#ctor(Claron.WIF.Vector3_Obj)">
            <summary>
            Creates a new vector from a Vector3_obj.
            </summary>
            <param name="v">The Vector3_obj to initialize from.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.#ctor(System.Drawing.Point)">
            <summary>
            Creates a new vector from a 2D System.Drawing.Point structure, z component is initialized to 0.
            </summary>
            <param name="p">The point to initialize with.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a new vector from a 2D System.Drawing.Point2F structure, z component is initialized to 0.
            </summary>
            <param name="p">The point to initialize with.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.#ctor(System.Drawing.Size)">
            <summary>
            Creates a new vector from a 2D System.Drawing.Size structure, z component is initialized to 0.
            </summary>
            <param name="s">The Size to initialize with.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.Copy">
            <summary>
            Returns an exact copy of this vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.ParseFromString(System.String)">
            <summary>
            Creates a new Vector3 structure from the given string.
            </summary>
            <param name="s">The string to create the Vector3 structure from.</param>
            <returns>The parsed Vector3.</returns>
        </member>
        <member name="M:Claron.WIF.Vector3.NewInvalid">
            <summary>
            Returns a vector initialized to an invalid state (the x-component of the returned Vector3
            object is set to Double.NaN).
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.NewInvalid(System.Int32)">
            <summary>
            Returns an array of vectors, all initialized to an invalid state (the x-component of the returned Vector3
            object is set to Double.NaN).
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.SetV(System.Double,System.Double,System.Double)">
            <summary>
            Set all coordinates.
            </summary>
            <param name="newX">The new x value.</param>
            <param name="newY">The new y value.</param>
            <param name="newZ">The new z value.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.SetX(System.Double)">
            <summary>
            Sets the X coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.SetY(System.Double)">
            <summary>
            Sets the Y coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.SetZ(System.Double)">
            <summary>
            Sets the Z coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.IsAnyInvalid(Claron.WIF.Vector3[])">
            <summary>
            True iff any of the vectors provided as parameters is invalid
            </summary>
            <param name="Vs">A list of vectors to test</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.Invalidate">
            <summary>
            Invalidates the vector (same as .Invalid = True)
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.IsF64">
            <summary>
            Reports if at least one of the vertices needs the full 64 bit double precision number representation.
            If a lesser precision format is possible to be used without loss of information, false will be returned.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.IsF32">
            <summary>
            Reports if at least one of the vertices needs 32 bit single precision number representation.
            If a lesser precision format is possible to be used without loss of information, false will be returned.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.IsI32">
            <summary>
            Reports if at least one of the vertices needs 32 bit Int32 precision number representation.
            If a lesser precision format is possible to be used without loss of information, false will be returned.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.IsI16">
            <summary>
            Reports if at least one of the vertices needs 16 bit Int16 precision number representation.
            If a lesser precision format is possible to be used without loss of information, false will be returned.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.IsU8">
            <summary>
            Reports if all vertices fit into U8/Byte precision number representation.
            If a higher precision format is needed, false will be returned.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.GetHashCode">
            <summary>
            Returns the hash code of the Vector3 object.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.SimilarTo(Claron.WIF.Vector3)">
            <summary>
            Returns True if the absolute differences between the components of the given Vector3 object
            and this Vector3 object are less than or equal to 1e-07.
            </summary>
            <param name="v3b">The Vector3 object to test.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.SimilarTo(Claron.WIF.Vector3,System.Double)">
            <summary>
            Comparison with some tolerance (desirable, since the floating point math is not
            guaranteed to generate fully repeatable results on most processors).
            </summary>
            <param name="v3b">The Vector3 object to test.</param>
            <param name="Tolerance">The Tolerance, default value = 0.0000001</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.LengthSquared">
            <summary>
            Returns the squared length of the vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.ResizedTo(System.Double)">
            <summary>
            Returns a new Vector3 pointing in the same direction, but rescaled to have
            a given length.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MinComponent">
            <summary>
            Returns the minimum component value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MaxComponent">
            <summary>
            Returns the maximum component value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.AverageComponent">
            <summary>
            Returns the Average component value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MaxAbsComponent">
            <summary>
            Returns the maximum absolute component value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MinAbsComponent">
            <summary>
            Returns the maximum absolute component value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.AverageAbsComponent">
            <summary>
            Returns the Average of the absolute component value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MaxAbsComponentI">
            <summary>
            Returns the index of the component with the maximum absolute value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MinAbsComponentI">
            <summary>
            Returns the index of the component with the maximum absolute value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.BoxVolume">
            <summary>
            Returns the volume of the object, can be negative if an odd number of components are negative.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.RoundMe">
            <summary>
            Rounds all the components to the nearest integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.RoundMe(System.Int32)">
            <summary>
            Rounds all the components to the nearest fraction with the given
            number of decimal digits.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.AbsMe">
            <summary>
            Converts all components to absolute values
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Clamp(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Clamps all components of the vector to be within the given bounds.
            </summary>
            <param name="lowBound">The lower bound.</param>
            <param name="highBound">The upper bound.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.Clamp(Claron.WIF.Box)">
            <summary>
            Clamps all components of the vector to be within the given bounds.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Normalize">
            <summary>
            Returns the normalized vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.NormalizeMe">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.RotateAboutAxis(Claron.WIF.Vector3,System.Double)">
            <summary>
            Rotates this vector about the given axis. 
            In a right handed coordinate system with the thumb pointing along the rotation axis, 
            the rotation direction is along your curled fingers.
            </summary>
            <param name="axisDir">A unit vector defining the rotation axis</param>
            <param name="rads">The rotation angle in radians</param>
        </member>
        <member name="M:Claron.WIF.Vector3.RotateAboutAxisDegrees(Claron.WIF.Vector3,System.Double)">
            <summary>
            Rotates this vector about the given axis. 
            In a right hand coordinate system with the thumb pointing along the rotation axis, 
            the rotation direction is the rotation is along you curled fingers.
            </summary>
            <param name="axisDir">A unit vector defining the rotation axis</param>
            <param name="degrees">The rotation angle in degrees</param>
        </member>
        <member name="M:Claron.WIF.Vector3.Interpolate(Claron.WIF.Vector3,System.Double)">
            <summary>
            Returns a vector which is interpolated between this and another vector.
            </summary>
            <param name="other">The vector to interpolate with</param>
            <param name="fractionOfOther">The fraction of the other in the result (0->only this, 1->only other)</param>
            <returns>The interpolated vector</returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToStr">
            <summary>
            Generates a string representation with 2 decimal digits
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToStr(System.String)">
            <summary>
            Generates a string representation with 2 decimal digits
            </summary>
            <param name="Separator">The separator string (eg, ", ")</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToStr(System.String,System.Int32)">
            <summary>
            Generates a string representation if the vector. The separator and number of 
            decimal digits can be controlled.
            </summary>
            <param name="Separator">Default value = " "</param>
            <param name="DecimalDigits"># of digits in the fraction</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToString">
            <summary>
            Generates a "(12, 1.2, 0.012)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.ToF64Array">
            <summary>
            Returns the vector's contents as an array of 3 Doubles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToQ16Array">
            <summary>
            Returns the vector's contents as an array of 3 longs with 16 bits of fraction and
            48 bits of integer (Q16 representation).
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.ToQ16Array(System.Int64[],System.Int32)">
            <summary>
            Copies the vector's contents to an array of 3 longs with 16 bits of fraction and
            48 bits of integer (Q16 representation).
            </summary>
            <param name="OutArray">The array in which to write the output</param>
            <param name="StartIndex">The index from which to start writing the three components</param>
        </member>
        <member name="M:Claron.WIF.Vector3.FromQ16Array(System.Int64[],System.Int32)">
            <summary>
            Creates a Vector3 from three consecutive elements of an array of
            vectors in Q16 representation (16 bits of fraction and
            48 bits of integer).
            </summary>
            <param name="Array">The input array</param>
            <param name="StartIndex">The index of the first of the 3 components</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.FromPoints(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            Converts a list of 2D points to a list of 3D vectors
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.FromVector2s(System.Collections.Generic.List{Claron.WIF.Vector2},System.Double)">
            <summary>
            Converts a list of Vector2 objects to a list of 3D vectors
            </summary>
            <param name="Vector2s">The input list</param>
            <param name="Z">(optional) The z coordinate value to add during the conversion.</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToBytes">
            <summary>
            Converts a Vector3 efficiently into an array of bytes.
            The binary .NET serializer uses 160 bytes which is a little overkill.
            This function will use 1 byte for several common integer valued vectors.
            4 bytes for all remaining integer valued vectors with v.IsU8 = true.
            7 bytes for all remaining integer valued vectors with v.IsI16 = true.
            13 bytes for all remaining integer valued vectors with v.IsI32 = true.
            13 bytes for all remaining non-integer valued vectors with v.IsF32 = true.
            25 bytes for all remaining non-integer valued vectors with v.IsF64 = true.
            </summary>
            <returns>The vector bit data as byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.ToVector3FromBytes(System.Byte[])">
            <summary>
            Inverse function to ToBytes().
            Restores the Vector3 instance from the given byte array.
            </summary>
            <param name="bytes"></param>
            <returns>THe restored Vector3 instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.ToVector3FromMemoryStream(System.IO.MemoryStream)">
            <summary>
            Reads the Vector3 data from the memory stream and advances the read pointer to the first byte past the Vector3 data.
            </summary>
            <param name="memStream">The MemoryStream with the read pointer at the start of the Vector3 data.</param>
            <returns>The restored Vector3.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.ToVector3_I32">
            <summary>
            Returns an integer vector by rounding each coodinate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.To8Vectors3_I32">
            <summary>
            Returns an array of 8 Vector3_I32 elements, each representing
            a corner of the bounding integer cube around the vector (ie,
            all permutations of floor and ceiling of each coordinate).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToPixelIndexRounded(System.Int32)">
            <summary>
            Assuming the X and Y values are non-negative 2D pixel coordinates, returns a linear 
            pixels array index after rounding.
            </summary>
            <param name="DimX">The image width</param>
        </member>
        <member name="M:Claron.WIF.Vector3.ToPixelIndex(System.Int32)">
            <summary>
            Assuming the X and Y values are non-negative 2D pixel coordinates, returns the
            corresponding linear pixels array index by truncating the coordinates' fractions.
            </summary>
            <param name="DimX">The image width</param>
        </member>
        <member name="M:Claron.WIF.Vector3.ToPoint">
            <summary>
            Returns the X and Y coordinates as a Point by rounding them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.ToSize">
            <summary>
            Returns the X and Y coordinates as a Size struct by rounding them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3.Abs">
            <summary>
            Return a new vector with the absolute value of each component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Round">
            <summary>
            Return a new vector with each component rounded
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Round(System.Int32)">
            <summary>
            Return a new vector with each component is rounded to the nearest fraction 
            with the given number of decimal digits.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Ceiling">
            <summary>
            Return a new vector with each component the closest higher integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Floor">
            <summary>
            Return a new vector with each component the closest lower integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Subtract(Claron.WIF.Vector3)">
            <summary>
            Subtracts the given vector.
            </summary>
            <param name="v">The vector to subtract.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.Add(Claron.WIF.Vector3)">
            <summary>
            Adds the given vector.
            </summary>
            <param name="vec">The vector to add.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.MultiplyByScalar(System.Double)">
            <summary>
            Multiplies the vector by the scalar.
            </summary>
            <param name="s">The scalar to multiply by.</param>
        </member>
        <member name="M:Claron.WIF.Vector3.DivideByScalar(System.Double)">
            <summary>
            Divides the vector by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.UnitV">
            <summary>
            Return a new vector which is a unit vector in the same direction.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.ToPlaneXy">
            <summary>
            Return a new vector which is a unit vector in the same direction.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MaxWith(Claron.WIF.Vector3)">
            <summary>
            Replaces each components by the maximum of its
            value and the the corresponding value of another vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MaxWith(System.Double,System.Double,System.Double)">
            <summary>
            Replaces each components by the maximum of its
            value and the the corresponding value of another vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MinWith(Claron.WIF.Vector3)">
            <summary>
            Replaces each components by the minimum of its
            value and the the corresponding value of another vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.MinWith(System.Double,System.Double,System.Double)">
            <summary>
            Replaces each components by the minimum of its
            value and the the corresponding value of another vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Centroid(System.Collections.Generic.IEnumerable{Claron.WIF.Vector3})">
            <summary>
            Returns the centroid (averaged coordinate) of the given points.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Average(System.Collections.Generic.IEnumerable{Claron.WIF.Vector3})">
            <summary>
            Returns the average of the given vectors.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.op_Multiply(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Components by component multiplication of the two vectors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.op_Multiply(Claron.WIF.Vector3_I32,Claron.WIF.Vector3)">
            <summary>
            Components by component multiplication of the two vectors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.op_Multiply(Claron.WIF.Vector3,Claron.WIF.Vector3_I32)">
            <summary>
            Components by component multiplication of the two vectors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.op_LessThan(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Less than comparison operator.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.op_GreaterThan(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Greater than comparison operator.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Dot(Claron.WIF.Vector3)">
            <summary>
            Computes the dot product (projection of one over the other) of this and the other vector
            </summary>
            <remarks>The dot product is the sum of the products of the members.
            For normalized direction vectors it also is the cosine of the angle between the two vectors.</remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.DistanceTo(Claron.WIF.Vector3)">
            <summary>
            Computes the distance between this and another vector
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.DistanceSquaredTo(Claron.WIF.Vector3)">
            <summary>
            Computes the square of the distance between this and another vector.
            More efficient than DistanceTo, since no square root needs to be computed.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.DistanceXYTo(Claron.WIF.Vector3)">
            <summary>
            Computes the distance between this and another vector, ignoring the Z component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.AngleTo(Claron.WIF.Vector3)">
            <summary>
            Returns the angle, in radians, from this to another vector. The angle is always
            in the range -Pi to Pi. The polarity is determined by the direction of the cross-product
            vector. In 2D, positive means that it is clockwise (when X points right and Y down).
            </summary>
            <param name="OtherV3">Another vector</param>
            <returns>The angle in radians, or 0 if the angle cannot be computed</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.AngleTo0toPi(Claron.WIF.Vector3)">
            <summary>
            Returns the angle, in radians, from this to another vector, in the range 0 to PI.
            Faster than AngleTo, but doesn't indicate rotation polarity.
            </summary>
            <param name="OtherV3">Another vector</param>
            <returns>The angle in radians, or 0 if the angle cannot be computed</returns>
        </member>
        <member name="M:Claron.WIF.Vector3.Cross(Claron.WIF.Vector3)">
            <summary>
            Computes the cross product of this and the other vector.
            The cross product is a new vector oriented perpendicular to the two inputs
            according to the right-hand rule (order matters!). It's length is the area of the parallelogram
            formed by the two vectors (=0 if they are parallel to each other).
            Typical examples: (1,0,0)x(0,1,0)=(0,0,1); (0,1,0)x(0,0,1)=(1,0,0); (0,0,1)x(1,0,0)=(0,-1,0)
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.NonParallel">
            <summary>
            Returns a vector that is not parallel to the current one. However, for (0,0,0) the return will also be (0,0,0).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.Perpendicular">
            <summary>
            Returns a vector that is prependicular to the current one. However, for (0,0,0) the return will also be (0,0,0).
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.DistToLine(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Computes the distance of the Me vector position to the given line represented as point and direction.
            </summary>
            <param name="posOnLine">Position on the line.</param>
            <param name="dirLine">Direction vector of the line. Does not have to be normalized.</param>
            <returns>The distance from the line.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.DistToLineSegment(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Computes the distance of the Me vector position to the given line represented as point and direction.
            </summary>
            <param name="lineSegmentBgn">The bgn of the line segment.</param>
            <param name="lineSegmentEnd">The end of the line segment.</param>
            <returns>The distance from the line.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.NearestPointOnLineSegment(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Computes the point on the given line segment that is nearest to this vector.
            </summary>
            <param name="lineSegmentBgn">The bgn of the line segment.</param>
            <param name="lineSegmentEnd">The end of the line segment.</param>
            <returns>The nearest point (Lot Punkt).</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.DistToLineSegment_NanIfProjectionOntoLineSegmentMissesSegment(Claron.WIF.Vector3,Claron.WIF.Vector3)">
            <summary>
            Computes the distance of the Me vector position to the given line represented as point and direction.
            </summary>
            <param name="lineSegmentBgn">The bgn of the line segment.</param>
            <param name="lineSegmentEnd">The end of the line segment.</param>
            <returns>The distance from the line.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.ClosestI(Claron.WIF.Vector3[])">
            <summary>
            Returns the index in the given array of the closest location
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Closest(Claron.WIF.Vector3[])">
            <summary>
            Returns the closest coordinate in the given array
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.FarthestI(Claron.WIF.Vector3[])">
            <summary>
            Returns the index in the given array of the farthest location
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Farthest(Claron.WIF.Vector3[])">
            <summary>
            Returns the farthest coordinate in the given array
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Equals(Claron.WIF.Vector3)">
            <summary>
            NOTE: use of SimilarTo is recommended in most circumstances, due to small floating-point errors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.CompareTo(Claron.WIF.Vector3)">
            <summary>
            Returns a value comparing the length of this vector with another
            vector for the IComparable interface (negative if this vector is shorter).
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.NewArray(System.Double[])">
            <summary>
            Returns an array of vectors made from triplets of coordinates provided.
            If N coordinates are provided, N\3 vectors are returned.
            For testing convenience and programming elegance.
            </summary>
            <param name="coords">A linear list of triplets of coordinates.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3.NewArray(System.Collections.Generic.List{System.Drawing.Point})">
            <summary>
            Returns an array of vectors initialized from a list of 2D points. The Z coordinate is set to 0.
            For testing convenience and programming elegance.
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3._rand">
            <summary>
            Used for generating random vectors.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.RandomV(System.Double,System.Double,System.Double)">
            <summary>
            Returns a vector with its components pseudo-randomly scaled up to the given magnitudes
            </summary>
            <param name="MagnitudeX">Max manitude in X (can be negative)</param>
            <param name="MagnitudeY"></param>
            <param name="MagnitudeZ"></param>
        </member>
        <member name="M:Claron.WIF.Vector3.RandomV(Claron.WIF.Vector3)">
            <summary>
            Returns a vector with each of its components pseudo-randomly scaled up to the given vector's magnitude
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.RandomV(System.Double)">
            <summary>
            Returns a pseudo-random vector of given length (with both positive and negative components)
            </summary>
            <param name="Length">The desired length of the vector</param>
        </member>
        <member name="M:Claron.WIF.Vector3.RandomVReset">
            <summary>
            Resets the pseudo-randomizer, so it will generate the same sequence of 
            pseudo-random vectors on subsequent calls to RandomV.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3.Test">
            <summary>
            Runs some regression tests to check the integrity of the class. An error triggers a break in debug mode.
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.VAAA">
            <summary> (10, 10, 10) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.VEEE">
            <summary> (14, 14, 14) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.VFFF">
            <summary> (15, 15, 15) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.VGGG">
            <summary> (16, 16, 16) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.VVVV">
            <summary> (31, 31, 31) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.VWWW">
            <summary> (32, 32 32) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x15">
            <summary> (16, 16, 16) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x16">
            <summary> (16, 16, 16) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x32">
            <summary> (32, 32, 32) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x48">
            <summary> (48, 48, 48) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x64">
            <summary> (64, 64, 64) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x128">
            <summary> (128, 128, 128) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x256">
            <summary> (256, 256, 256) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3.V3x512">
            <summary> (512, 512, 512) </summary>
        </member>
        <member name="P:Claron.WIF.Vector3.Item(System.Int32)">
            <summary>
            A coordinate member, indexed 0 to 2.
            Less efficient than access using X, Y, Z.
            </summary>
            <param name="i">The index to return, 0 = x, 1 = y, otherwise = z.</param>
        </member>
        <member name="P:Claron.WIF.Vector3.XY">
            <summary>
            Returns X*Y (2D area)
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3.Length">
            <summary>
            Property to get/set the length of the vector. Setting the length to 1 can be used to scale it
            to a unit vector.
            </summary>
            <remarks>If a 0-length vector is assigned a non-0 length, the length is assigned to the X
            coordinate.</remarks>
        </member>
        <member name="P:Claron.WIF.Vector3.LengthXY">
            <summary>
            The length of the vector's projection on the XY plane (ie, ignoring its Z
            component)
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3.Invalid">
            <summary>
            Allows the vector to be tagged as invalid (filling the role of "null" in a class). A
            Vector3 object is invalid if its x-component is equal to Double.NaN.
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3.IsValid">
            <summary>
            True iff the vector was not marked as invalid.
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3.IsInvalid">
            <summary>
            True iff the vector was marked as invalid.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector3_F32">
            <summary>
            A structure (value-type) representing a 3D vector of singles (float 32b).
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.NewInvalid">
            <summary>
            Returns a vector initialized to an invalid state
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.SetV(System.Single,System.Single,System.Single)">
            <summary>
            Set all coordinates
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Invalidate">
            <summary>
            Invalidates the vector (same as .Invalid = True)
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.SimilarTo(Claron.WIF.Vector3_F32)">
            <summary>
             Comparison with some tolerance (desirable, since the floating point math is not
            guaranteed to generate fully repeatable results on most processors).
            </summary>
            <param name="v3b"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.SimilarTo(Claron.WIF.Vector3_F32,System.Single)">
            <summary>
            Comparison with some tolerance (desirable, since the floating point math is not
            guaranteed to generate fully repeatable results on most processors).
            </summary>
            <param name="v3b"></param>
            <param name="Tolerance"> Default value = 0.0000001</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.RoundMe">
            <summary>
            Rounds all the components to the nearest integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.AbsMe">
            <summary>
            Converts all componets to absolute values
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.ToStr">
            <summary>
             Generates a "12 1.2 0.012" string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.ToStr(System.String,System.Int32)">
            <summary>
            Generates a "12 1.2 0.012" string representation. The separator and number of significant digits can be modified.
            </summary>
            <param name="Separator"> Default value = " "</param>
            <param name="significantDigits"> Default value = 2</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.ToString">
            <summary>
            Generates a "(12, 1.2, 0.012)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Abs">
            <summary>
            Return a new vector with the absolute value of each component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Round">
            <summary>
            Return a new vector with each component rounded
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Round(System.Int32)">
            <summary>
            Return a new vector with each component is rounded to the nearest fraction 
            with the given number of decimal digits.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Subtract(Claron.WIF.Vector3_F32)">
            <summary>
            Subtracts the given vector.
            </summary>
            <param name="v">The vector to subtract.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Add(Claron.WIF.Vector3_F32)">
            <summary>
            Adds the given vector.
            </summary>
            <param name="vec">The vector to add.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.MultiplyByScalar(System.Single)">
            <summary>
            Multiplies the vector by the scalar.
            </summary>
            <param name="s">The scalar to multiply by.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.DivideByScalar(System.Single)">
            <summary>
            Divides the vector by a scalar.
            </summary>
            <param name="s">The scalar to divide by.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.op_Addition(Claron.WIF.Vector3_F32,Claron.WIF.Vector3_F32)">
            <summary>
            Adds two vectors and return a new one with the result.
            "Add" is faster if the result is one of the operands.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.op_Subtraction(Claron.WIF.Vector3_F32,Claron.WIF.Vector3_F32)">
            <summary>
            Subtract two vectors and return a new one with the result.
            "Subtract" is faster if the result is one of the operands.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.op_Multiply(Claron.WIF.Vector3_F32,System.Double)">
            <summary>
            Multiplies a vector by a scalar and returns a new one with the result.
            "MultiplyByScalar" is faster if the result is the operand vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.op_Multiply(System.Double,Claron.WIF.Vector3_F32)">
            <summary>
            Multiplies a vector by a scalar and returns a new one with the result.
            "MultiplyByScalar" is faster if the result is the operand vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.op_Division(Claron.WIF.Vector3_F32,System.Double)">
            <summary>
            Divides a vector by a scalar and returns a new one with the result.
            "DivideByScalar" is faster if the result is the operand vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.op_Multiply(Claron.WIF.Vector3_F32,Claron.WIF.Vector3_F32)">
            <summary>
            Components by component multiplication of the two vectors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Dot(Claron.WIF.Vector3_F32)">
            <summary>
            Computes the dot product (projection of one over the other) of this and the other vector
            </summary>
            <remarks>The dot product is the sum of the products of the members </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Cross(Claron.WIF.Vector3_F32)">
            <summary>
            Computes the cross product of this and the other vector
            </summary>
            <remarks> The cross product is a new vector oriented perpendicular to the two inputs
            according to the right-hand rule (order matters!). It's length is the area of the parallelogram
            formed by the two vectors.
            </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Equals(Claron.WIF.Vector3_F32)">
            <summary>
            Caution: use of SimilarTo is recommended in most circumstances, due to small floating-point errors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_F32.Test">
            <summary>
            Runs some regression tests to check the integrity of the class. An error triggers a break in debug mode.
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_F32.Item(System.Int32)">
            <summary>
            A coordinate member, indexed 0 to 2.
            Less efficient than access using X, Y, Z
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_F32.Length">
            <summary>
            The length of the vector. Can be used to scale it to a unit vector.
            </summary>
            <remarks>If a 0-length vector is assigned a non-0 length, the length is assigned to the X coordinate</remarks>
        </member>
        <member name="P:Claron.WIF.Vector3_F32.Invalid">
            <summary>
            Allows the vector to be tagged as invalid (filling the role of "null" in a class)
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_F32.IsValid">
            <summary>
            True iff the vector was not marked as invalid.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector3_I32">
            <summary>
            A structure (value-type) representing a 3D vector of int32 values.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.SetV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set all coordinates
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.MinComponent">
            <summary>
            Returns the value of the smallest component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.MaxComponent">
            <summary>
            Returns the value of the largest component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.MaxAbsComponent">
            <summary>
            Returns the index of the component with the maximum absolute value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.MaxAbsComponentI">
            <summary>
            Returns the index of the component with the maximum absolute value.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.MaxWith(Claron.WIF.Vector3_I32)">
            <summary>
            Replaces each components by the maximum of its
            value and the the corresponding value of another vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.MinWith(Claron.WIF.Vector3_I32)">
            <summary>
            Replaces each components by the minimum of its
            value and the the corresponding value of another vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.XY">
            <summary>
            X * Y
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.ToLinearIndex(System.Int32,System.Int32)">
            <summary>
            Returns the linear index of this vector in a 3D array of a given dimensions.
            No boundary checking is performed (this vector is assumed to be within the given
            array dimensions)
            </summary>
            <param name="DimsXY">The number of pixels in a slice (DimX*DimY)</param>
            <param name="DimX">The number of pixels in a row</param>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.FromLinearIndex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new Vector3_I32 set with coordinates derived from a given linear index in
            a 3D array.
            </summary>
            <param name="Idx">The linear index input</param>
            <param name="DimsXY">The number of pixels in a slice (DimX*DimY)</param>
            <param name="DimX">The number of pixels in a row</param>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.ToStr">
            <summary>
            Generates a "12 1 0" string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.ToStr(System.String)">
            <summary>
            Generates a "12 1 0" string representation. The separator can be modified.
            </summary>
            <param name="Separator"> Default value = " "</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.ToString">
            <summary>
            Generates a "(12, 1, 0)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Abs">
            <summary>
            Return a new vector with the absolute value of each component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.IsNull">
            <summary>
            Indicates whether all members are 0
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.AbsMe">
            <summary>
            Converts all componets to absolute values
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Negate">
            <summary>
            Negates all the components
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Subtract(Claron.WIF.Vector3_I32)">
            <summary>
            Subtracts the given vector.
            </summary>
            <param name="v">The vector to subtract.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Add(Claron.WIF.Vector3_I32)">
            <summary>
            Adds the given vector.
            </summary>
            <param name="vec">The vector to add.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.MultiplyByScalar(System.Int32)">
            <summary>
            Multiplies the vector by the scalar.
            </summary>
            <param name="s">The scalar to multiply by.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.op_Multiply(Claron.WIF.Vector3_I32,Claron.WIF.Vector3_I32)">
            <summary>
            Components by component multiplication of the two vectors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Dot(Claron.WIF.Vector3_I32)">
            <summary>
            Computes the dot product (projection of one over the other) of this and the other vector
            </summary>
            <remarks>The dot product is the sum of the products of the members </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Cross(Claron.WIF.Vector3_I32)">
            <summary>
            Computes the cross product of this and the other vector
            </summary>
            <remarks> The cross product is a new vector oriented perpendicular to the two inputs
            according to the right-hand rule (order matters!). It's length is the area of the parallelogram
            formed by the two vectors.
            </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Equals(Claron.WIF.Vector3_I32)">
            <summary>
            Caution: use of SimilarTo is recommended in most circumstances, due to small floating-point errors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.StepsToNeighbors26">
            <summary>
            Returns an array of incremental steps to the 26 neighbors of a location.
            Computed once, then cached
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Average(System.Collections.Generic.IEnumerable{Claron.WIF.Vector3_I32})">
            <summary>
            Returns the centroid (averaged coordinate) of the given points, rounded to the nearest
            integer coordinates.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.AverageF(System.Collections.Generic.IEnumerable{Claron.WIF.Vector3_I32})">
            <summary>
            Returns the centroid (averaged coordinate) of the given points as a Vector3,
            with no coordinate rounding.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.NewArray(System.Int32[])">
            <summary>
            Returns an array of vectors made from triplets of coordinates provided.
            If N coordinates are provided, N\3 vectors are returned.
            For testing convenience and programming elegance.
            </summary>
            <param name="coords">A linear list of triplets of coordinates.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.NewArray(System.Collections.Generic.List{Claron.WIF.Vector3})">
            <summary>
            Returns an array of vectors initialized from a list of Vector3 vectors.
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32._rand">
            <summary>
            Used for generating random numbers.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.RandomV(System.Double,System.Double,System.Double)">
            <summary>
            Returns a vector with its components pseudo-randomly scaled up to the given magnitudes
            </summary>
            <param name="MagnitudeX">Max manitude in X (can be negative)</param>
            <param name="MagnitudeY"></param>
            <param name="MagnitudeZ"></param>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.RandomV(Claron.WIF.Vector3)">
            <summary>
            Returns a vector with each of its components pseudo-randomly scaled up to the given vector's magnitude
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.RandomV(System.Double)">
            <summary>
            Returns a pseudo-random vector of given length (with both positive and negative components)
            </summary>
            <param name="Length">The desired length of the vector</param>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.RandomVReset">
            <summary>
            Resets the pseudo-randomizer, so it will generate the same sequence of 
            pseudo-random vectors on subsequent calls to RandomV.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I32.Test">
            <summary>
            Runs some regression tests to check the integrity of the class. An error triggers a break in debug mode.
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.VAAA">
            <summary> (10, 10, 10) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.VEEE">
            <summary> (14, 14, 14) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.VFFF">
            <summary> (15, 15, 15) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x15">
            <summary> (16, 16, 16) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x16">
            <summary> (16, 16, 16) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x32">
            <summary> (32, 32, 32) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x48">
            <summary> (48, 48, 48) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x64">
            <summary> (64, 64, 64) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x128">
            <summary> (128, 128, 128) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x256">
            <summary> (256, 256, 256) </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_I32.V3x512">
            <summary> (512, 512, 512) </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_I32.Item(System.Int32)">
            <summary>
            A coordinate member, indexed 0 to 2.
            Less efficient than access using X, Y, Z
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_I32.Length">
            <summary>
            The length of the vector. Can be used to scale it to a unit vector.
            </summary>
            <remarks>If a 0-length vector is assigned a non-0 length, the length is assigned to the X coordinate</remarks>
        </member>
        <member name="T:Claron.WIF.Vector3_I16">
            <summary>
            A structure (value-type) representing a 3D vector of int16 values.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.SetV(System.Int16,System.Int16,System.Int16)">
            <summary>
            Set all coordinates
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.ToStr(System.String)">
            <summary>
            Generates a "12 1 0" string representation. The separator can be modified.
            </summary>
            <param name="Separator"> Default value = " "</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.ToString">
            <summary>
            Generates a "(12, 1, 0)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.Abs">
            <summary>
            Return a new vector with the absolute value of each component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.AbsMe">
            <summary>
            Converts all componets to absolute values
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.Subtract(Claron.WIF.Vector3_I16)">
            <summary>
            Subtracts the given vector.
            </summary>
            <param name="v">The vector to subtract.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.Add(Claron.WIF.Vector3_I16)">
            <summary>
            Adds the given vector.
            </summary>
            <param name="vec">The vector to add.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.MultiplyByScalar(System.Int16)">
            <summary>
            Multiplies the vector by the scalar.
            </summary>
            <param name="s">The scalar to multiply by.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.op_Multiply(Claron.WIF.Vector3_I16,Claron.WIF.Vector3_I16)">
            <summary>
            Components by component multiplication of the two vectors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.Dot(Claron.WIF.Vector3_I16)">
            <summary>
            Computes the dot product (projection of one over the other) of this and the other vector
            </summary>
            <remarks>The dot product is the sum of the products of the members </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.Cross(Claron.WIF.Vector3_I16)">
            <summary>
            Computes the cross product of this and the other vector
            </summary>
            <remarks> The cross product is a new vector oriented perpendicular to the two inputs
            according to the right-hand rule (order matters!). It's length is the area of the parallelogram
            formed by the two vectors.
            </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.Equals(Claron.WIF.Vector3_I16)">
            <summary>
            Caution: use of SimilarTo is recommended in most circumstances, due to small floating-point errors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_I16.Test">
            <summary>
            Runs some regression tests to check the integrity of the class. An error triggers a break in debug mode.
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_I16.Length">
            <summary>
            The length of the vector. Can be used to scale it to a unit vector.
            </summary>
            <remarks>If a 0-length vector is assigned a non-0 length, the length is assigned to the X coordinate</remarks>
        </member>
        <member name="T:Claron.WIF.Vector3_Obj">
            <summary>
            An object (reference type) representnig a 3D vector or location.
            </summary>
        </member>
        <member name="F:Claron.WIF.Vector3_Obj._tris">
            <summary>
            Triangles which use this vertex.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.SetV(System.Double,System.Double,System.Double)">
            <summary>
            Set all coordinates
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.SimilarTo(Claron.WIF.Vector3_Obj)">
            <summary>
            Comparison with some tolerance (desirable, since the floating point
            math is not guaranteed to generate fully repeatable results on most processors).
            </summary>
            <param name="v3b"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.SimilarTo(Claron.WIF.Vector3_Obj,System.Double)">
            <summary>
            Comparison with some tolerance (desirable, since the floating point
            math is not guaranteed to generate fully repeatable results on most processors).
            </summary>
            <param name="v3b"></param>
            <param name="Tolerance"> Default value = 0.0000001</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.ToStr">
            <summary>
            Generates a "12 1.2 0.012" string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.ToStr(System.String,System.Int32)">
            <summary>
            Generates a "12 1.2 0.012" string representation. The separator and number of significant digits can be modified.
            </summary>
            <param name="separator"> Default value = " "</param>
            <param name="significantDigits"> Default value = 2</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.ToString">
            <summary>
            Generates a default "(0., 0., 0.)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.RoundMe">
            <summary>
            Rounds all the components to the nearest integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.AbsMe">
            <summary>
            Converts all componets to absolute values
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Abs">
            <summary>
            Return a new vector with the absolute value of each component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Round">
            <summary>
            Return a new vector with each component rounded
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Negate">
            <summary>
            Negates all the components.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Subtract(Claron.WIF.Vector3_Obj)">
            <summary>
            Subtracts the given vector.
            </summary>
            <param name="vec">The vector to subtract.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Add(Claron.WIF.Vector3_Obj)">
            <summary>
            Adds the given vector.
            </summary>
            <param name="vec">The vector to add.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.MultiplyByScalar(System.Double)">
            <summary>
            Multiplies the vector by the scalar.
            </summary>
            <param name="s">The scalar to multiply by.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.op_Multiply(System.Double,Claron.WIF.Vector3_Obj)">
            <summary>
            Operator to multiply a vector by a scalar.
            </summary>
            <param name="a">The scale factor.</param>
            <param name="vec">The vector to multiply.</param>
            <returns>The scaled vector.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Dot(Claron.WIF.Vector3_Obj)">
            <summary>
            Computes the dot product (projection of one over the other) of this and the other vector
            </summary>
            <remarks>The dot product is the sum of the products of the members </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Cross(Claron.WIF.Vector3_Obj)">
            <summary>
            Computes the cross product of this and the other vector
            </summary>
            <remarks> The cross product is a new vector oriented perpendicular to the two inputs
            according to the right-hand rule (order matters!). It's length is the area of the parallelogram
            formed by the two vectors.
            </remarks>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Normalize">
            <summary>
            Returns the normalized vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.NormalizeMe">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector3_Obj.Test">
            <summary>
            Runs some regression tests to check the integrity of the class. An error triggers a break in debug mode.
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_Obj.Triangles">
            <summary>
            Returns the triangles which use this vertex.
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_Obj.Item(System.Int32)">
            <summary>
            A coordinate member, indexed 0 to 2
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_Obj._F64">
            <summary>
            Return an equivalent Vector3 representation
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector3_Obj.Length">
            <summary>
            The length of the vector. Can be used to scale it to a unit vector.
            </summary>
            <remarks>If a 0-length vector is assigned a non-0 length, the length is assigned to the X coordinate</remarks>
        </member>
        <member name="T:Claron.WIF.Triangle_Obj">
            <summary>
            Triangle object.
            </summary>
        </member>
        <member name="F:Claron.WIF.Triangle_Obj._verts">
            <summary>
            The vertices defining the triangle.
            </summary>
        </member>
        <member name="M:Claron.WIF.Triangle_Obj.#ctor(Claron.WIF.Vector3_Obj,Claron.WIF.Vector3_Obj,Claron.WIF.Vector3_Obj)">
            <summary>
            Creates a new triangle with the given vertices.
            </summary>
        </member>
        <member name="P:Claron.WIF.Triangle_Obj.Vertices">
            <summary>
            Returns the triangles vertices.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector2">
            <summary>
            A structure (value-type) representing a 2D vector of double (float 64b).
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.NewInvalid">
            <summary>
            Returns a vector initialized to an invalid state
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Invalidate">
            <summary>
            Invalidates the vector (same as .Invalid = True)
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Centroid(Claron.WIF.Vector2[])">
            <summary>
            Returns the centroid of the given vectors.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.SimilarTo(Claron.WIF.Vector2)">
            <summary>
            Comparison with some tolerance (desirable, since the floating
            point math is not guaranteed to generate fully repeatable results on most processors).
            </summary>
            <param name="v2b"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector2.DistanceTo(Claron.WIF.Vector2)">
            <summary>
            Computes the distance between this and another vector
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.SimilarTo(Claron.WIF.Vector2,System.Double)">
            <summary>
            Comparison with some tolerance (desirable, since the floating
            point math is not guaranteed to generate fully repeatable results on most processors).
            </summary>
            <param name="v2b"></param>
            <param name="Tolerance"> Default value = 0.0000001</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.RoundMe">
            <summary>
            Rounds all the components to the nearest integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.AbsMe">
            <summary>
            Converts all componets to absolute values
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.NormalizeMe">
            <summary>
            Normalizes this Vector2 object.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.ToStr">
            <summary>
            Generates a "12 0.012" string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.Vector2.ToStr(System.String,System.Int32)">
            <summary>
            Generates a "12 0.012" string representation. The separator and number of significant digits can be modified.
            </summary>
            <param name="separator"> Default value = " "</param>
            <param name="significantDigits"> Default value = 2</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.ToString">
            <summary>
            Generates a "(12, 0.012)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Abs">
            <summary>
            Return a new vector with the absolute value of each component
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Round">
            <summary>
            Return a new vector with each component rounded
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Ceiling">
            <summary>
            Return a new vector with each component the closest higher integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Floor">
            <summary>
            Return a new vector with each component the closest lower integer
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Subtract(Claron.WIF.Vector2)">
            <summary>
            Subtracts the given vector.
            </summary>
            <param name="v">The vector to subtract.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.Add(Claron.WIF.Vector2)">
            <summary>
            Adds the given vector.
            </summary>
            <param name="vec">The vector to add.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.MultiplyByScalar(System.Double)">
            <summary>
            Multiplies the vector by the scalar.
            </summary>
            <param name="s">The scalar to multiply by.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.DivideByScalar(System.Double)">
            <summary>
            Divides the vector by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.UnitV">
            <summary>
            Return a new vector which is a unit vector in the same direction.
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.MaxWith(Claron.WIF.Vector2)">
            <summary>
            Replaces each components by the maximum of its
            value and the the corresponding value of another vector.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.MinWith(Claron.WIF.Vector2)">
            <summary>
            Replaces each components by the minimum of its
            value and the the corresponding value of another vector.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.op_Multiply(Claron.WIF.Vector2,Claron.WIF.Vector2)">
            <summary>
            Components by component multiplication of the two vectors
            </summary>
        </member>
        <member name="M:Claron.WIF.Vector2.Dot(Claron.WIF.Vector2)">
            <summary>
            Computes the dot product (projection of one over the other) of this and the other vector
            </summary>
            <remarks>The dot product is the sum of the products of the members </remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.AngleTo(Claron.WIF.Vector2)">
            <summary>
            Returns the angle, in radians, from this to another vector. The angle is always
            in the range -Pi to Pi (positive -> clockwise)
            </summary>
            <param name="OtherV2">Another vector</param>
            <returns>The angle in radians, or 0 if the angle cannot be computed</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Vector2.Equals(Claron.WIF.Vector2)">
            <summary>
            Caution: use of SimilarTo is recommended in most circumstances, due to small floating-point errors
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector2.Item(System.Int32)">
            <summary>
            A coordinate member, indexed 0 to 1.
            Less efficient than access using X, Y
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector2.Length">
            <summary>
            The length of the vector. Can be used to scale it to a unit vector.
            </summary>
            <remarks>If a 0-length vector is assigned a non-0 length, the length is assigned to the X coordinate</remarks>
        </member>
        <member name="P:Claron.WIF.Vector2.Invalid">
            <summary>
            Allows the vector to be tagged as invalid (filling the role of "null" in a class)
            </summary>
        </member>
        <member name="P:Claron.WIF.Vector2.IsValid">
            <summary>
            True iff the vector was not marked as invalid.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector2ComparerX">
            <summary>
            Compares x-component of Vector2 structures.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector2ComparerY">
            <summary>
            Compares y-component of Vector2 structures.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector3ComparerX">
            <summary>
            Compares x-component of Vector3 structures.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector3ComparerY">
            <summary>
            Compares y-component of Vector3 structures.
            </summary>
        </member>
        <member name="T:Claron.WIF.Vector3ComparerZ">
            <summary>
            Compares z-component of Vector3 structures.
            </summary>
        </member>
        <member name="T:Claron.WIF.VectorN">
            <summary>
            Class to represent vectors of any number of dimensions.
            </summary>
        </member>
        <member name="F:Claron.WIF.VectorN._vals">
            <summary>
            The values of the vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.ValueGet(System.Int32)">
            <summary>
            Property to get/set an element of the vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.#ctor(System.Int32)">
            <summary>
            Creates a new vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.#ctor(System.Double[])">
            <summary>
            Creates a new vector with the given values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorN.Clone">
            <summary>
            Creates a clone of this vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.NormalizeMe">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.Normalize">
            <summary>
            Returns a new normalized vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.ToMatrix">
            <summary>
            Converts the vector into a matrix (as a matrix with 1 column).
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.ToMatrix(System.Int32)">
            <summary>
            Converts the vector into matrix with nCols columns. Each column of
            the matrix is a copy of the vector.
            </summary>
            <param name="nCols"></param>
        </member>
        <member name="M:Claron.WIF.VectorN.ToMatrix(Claron.WIF.VectorN[])">
            <summary>
            Converts the given the vectors into a matrix where the ith column of the matrix
            is the same as the ith vector.
            </summary>
            <param name="vecs">The vectors to create the matrix from.</param>
        </member>
        <member name="M:Claron.WIF.VectorN.RandomizeMe">
            <summary>
            Returns a random vector with each element taking a value between (-1, 1).
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.RandomizeMe(System.Double,System.Double)">
            <summary>
            Randomizes the elements in the vector.
            </summary>
            <param name="min">The minimum value that the elements can take. Default value = -1</param>
            <param name="max">The maximum value that the elements can take. Default value = 1</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorN.Randomize(System.Double,System.Double)">
            <summary>
            Randomizes the elements in the vector.
            </summary>
            <param name="min">The minimum value that the elements can take. Default value = -1</param>
            <param name="max">The maximum value that the elements can take. Default value = 1</param>
        </member>
        <member name="M:Claron.WIF.VectorN.Mean(Claron.WIF.VectorN[])">
            <summary>
            Returns the mean of the given vectors.
            </summary>
            <param name="vecs">The vectors to calculate the mean of.</param>
        </member>
        <member name="M:Claron.WIF.VectorN.ToStr(System.String,System.Int32)">
            <summary>
            Generates a "12 1.2 0.12 0.012" string representation. The separator and number of significant digits can be modified.
            </summary>
            <param name="Separator"> Default value = " "</param>
            <param name="significantDigits"> Default value = 2</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorN.ToString">
            <summary>
            Generates a "(12, 1.2, 0.12, 0.012)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.ToVector3">
            <summary>
            Exports the first 3 values as a Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.VectorN.op_Addition(Claron.WIF.VectorN,Claron.WIF.VectorN)">
            <summary>
            Adds two vectors.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.op_Subtraction(Claron.WIF.VectorN,Claron.WIF.VectorN)">
            <summary>
            Subtracts two vectors.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.op_Multiply(System.Double,Claron.WIF.VectorN)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.op_Division(Claron.WIF.VectorN,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.Dot(Claron.WIF.VectorN)">
            <summary>
            Returns the dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorN.Test">
            <summary>
            Runs some tests on the vector class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.VectorN.Values">
            <summary>
            Returns the elements of the vector.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.VectorN.Length">
            <summary>
            Returns the length of the vector.
            </summary>
        </member>
        <member name="P:Claron.WIF.VectorN.LengthSquared">
            <summary>
            Returns the length of the vector squared. Faster thatn Length
            since no square root needs to be computed.
            </summary>
        </member>
        <member name="P:Claron.WIF.VectorN.NElements">
            <summary>
            Returns the number of elements in the vector.
            </summary>
        </member>
        <member name="T:Claron.WIF.VectorNComplex">
            <summary>
            Class to represent complex vectors of any number of dimensions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.VectorNComplex._vals">
            <summary>
            The values of the vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.ValueGet(System.Int32)">
            <summary>
            To get an element of the vector.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.ValueSet(System.Int32,Claron.WIF.Complex)">
            <summary>
            To set an element of the vector.
            </summary>
            <param name="i"></param>
            <param name="NewValue">The NewValue to set</param>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.#ctor(System.Int32)">
            <summary>
            Creates a new vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.#ctor(Claron.WIF.Complex[])">
            <summary>
            Creates a new vector with the given values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.Clone">
            <summary>
            Creates a clone of this vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.ConjugateMe">
            <summary>
            Conjugates this vector.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.Conjugate">
            <summary>
            Returns the conjugate of the vector.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.NormalizeMe">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.Normalize">
            <summary>
            Returns a new normalized vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.ToMatrixComplex">
            <summary>
            Converts the vector into a matrix (as a matrix with 1 column).
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.RandomizeMe(System.Double,System.Double)">
            <summary>
            Randomizes the elements in the vector.
            </summary>
            <param name="min">The minimum value that the real and imaginary components can take. Default value = -1</param>
            <param name="max">The maximum value that the real and imaginary components can take. Default value = 1</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.Randomize(System.Double,System.Double)">
            <summary>
            Randomizes the elements in the vector.
            </summary>
            <param name="min">The minimum value that the real and imaginary components can take. Default value = -1</param>
            <param name="max">The maximum value that the real and imaginary components can take. Default value = 1</param>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.ToString">
            <summary>
            Returns a string representation.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.op_Addition(Claron.WIF.VectorNComplex,Claron.WIF.VectorNComplex)">
            <summary>
            Adds two vectors.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.op_Subtraction(Claron.WIF.VectorNComplex,Claron.WIF.VectorNComplex)">
            <summary>
            Subtracts two vectors.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.op_Multiply(System.Double,Claron.WIF.VectorNComplex)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.op_Division(Claron.WIF.VectorNComplex,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.Dot(Claron.WIF.VectorNComplex)">
            <summary>
            Returns the dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Claron.WIF.VectorNComplex.Test">
            <summary>
            Runs some tests on the vector class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.VectorNComplex.Values">
            <summary>
            Returns the elements of the vector.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.VectorNComplex.Length">
            <summary>
            Returns the length of the vector.
            </summary>
        </member>
        <member name="P:Claron.WIF.VectorNComplex.NElements">
            <summary>
            Returns the number of elements in the vector.
            </summary>
        </member>
        <member name="T:Claron.WIF.Complex">
            <summary>
            Class to represent complex numbers.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Complex._re">
            <summary>
            The real part of the complex number.
            </summary>
        </member>
        <member name="F:Claron.WIF.Complex._im">
            <summary>
            The imaginary part of the complex number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new complex number.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Complex.ToString">
            <summary>
            Returns a string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.FromPolar(System.Double,System.Double)">
            <summary>
            Returns the complex number z = r exp(i * t)
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.ToPolar(Claron.WIF.Complex)">
            <summary>
            Returns the polar form of the given complex number.
            </summary>
            <param name="z">The complex number to get the polar form of.</param>
            <returns>r is the first element, and theta is the second element.</returns>
        </member>
        <member name="M:Claron.WIF.Complex.Pow(Claron.WIF.Complex,System.Double)">
            <summary>
            Raises a complex number to a power.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.Abs">
            <summary>
            Returns the absolute value (magnitude) of this complex number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.op_Addition(Claron.WIF.Complex,Claron.WIF.Complex)">
            <summary>
            Adds two complex numbers.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.op_Subtraction(Claron.WIF.Complex,Claron.WIF.Complex)">
            <summary>
            Subtracts two complex numbers.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.op_Multiply(Claron.WIF.Complex,Claron.WIF.Complex)">
            <summary>
            Multiplies two complex numbers.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.op_Multiply(Claron.WIF.Complex,System.Double)">
            <summary>
            Multiplies by a real number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.op_Multiply(System.Double,Claron.WIF.Complex)">
            <summary>
            Multiplies by a real number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.op_Division(Claron.WIF.Complex,System.Double)">
            <summary>
            Divides a complex number by a real number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.Conjugate">
            <summary>
            Returns the conjugate of the complex number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.op_Division(Claron.WIF.Complex,Claron.WIF.Complex)">
            <summary>
            Divides a complex number by another complex number.
            </summary>
        </member>
        <member name="M:Claron.WIF.Complex.Test">
            <summary>
            Tests the class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Claron.WIF.Complex.Re">
            <summary>
            Property to get/set the real part.
            </summary>
        </member>
        <member name="P:Claron.WIF.Complex.Im">
            <summary>
            Property to get/set the imaginary part.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.TriStateEnum">
            <summary>
            Enum to represent three states, True, False, and
            Unknown.
            </summary>
        </member>
        <member name="T:Claron.WIF.Polygon">
            <summary>
            A structure (value-type) representing a flat polygon with vertices of type Vector3.
            </summary>
        </member>
        <member name="M:Claron.WIF.Polygon.GetHashCode">
            <summary>
            Returns the hash code for the Polygon.
            </summary>
        </member>
        <member name="T:Claron.WIF.WIFLicense">
            <summary>
            Handles the creating and verifying the license files for various WIF bases products. e.g. Angi, VR2, ThinsightBasic, ThinsightAdvanced.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WIFLicense.VerifyLicense(System.String,System.Int32@,System.Boolean,System.String@,System.Int32@,System.String@)">
            <summary>
            Evaluates whether a usage license stored in a file is valid on this computer.
            </summary>
            <param name="FilePathOrName">The license file path or name. If a full path is not provided, the file will be
            first searched in the application executable's directory, then in the user's private Documents directory</param>
            <param name="outNumDaysRemaining">Output: If the license was valid, the number of days
            remaining before expiry. If the expiry day has passed, the number will be negative.</param>
            <param name="UseInternetTimeServerIfAvailable">Optional: If true (default) and an Internet connection is available,
            outDaysValidRemaining is computed using an Internet time server to foil users who
            move the clock back. Otherwise, the system clock is used. </param>
            <param name="outProductName"></param>
            <param name="outMaxUsersAllowed"></param>
            <param name="_VR2ErrorString"></param>
            <returns>True iff the license file is found and is valid, even when the expirey date has passed.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WIFLicense.VerifyLicense(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Verifies the existence of a valid license for the given product.
            </summary>
            <param name="productName"></param>
            <param name="isUsingRemoters"></param>
            <param name="showMsg">If true as a failure in validation then shows a message box with problem information and MAC address information.
            If false, error reporting is suppressed.</param>
            <param name="givenDir"></param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.WIFLicense.VerifyLicense(System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Verifies the existence of a valid license for the given product and loads the extended information if valid.
            </summary>
            <param name="productName"></param>
            <param name="isUsingRemoters"></param>
            <param name="showMsg">If true as a failure in validation then shows a message box with problem information and MAC address information.
            If false, error reporting is suppressed.</param>
            <param name="givenDir"></param>
            <param name="loadExtendedInformation">flag indicating to load the extended licensing information (all the new NIL information)</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.WIFLicense.VerifyLicenseFile(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Verifies if the specified license file is valid
            </summary>
            <param name="productName"></param>
            <param name="isUsingRemoters"></param>
            <param name="showMsg">If true as a failure in validation then shows a message box with problem 
            information and WAC address information. If false, error reporting is suppressed.</param>
            <param name="licenseFilePath">License file to check</param>
            <returns></returns>
        </member>
        <member name="M:Claron.WIF.WIFLicense.VerifyLicense(System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies the existence of a valid license for the given product.
            </summary>
            <param name="productName"></param>
            <param name="isUsingRemoters"></param>
            <param name="showMsg">If true as a failure in validation then shows a message box with problem information and WAC address information.
            If false, error reporting is suppressed.</param>
            <returns></returns>
        </member>
        <member name="F:Claron.WIF.Licensing._key">
            <summary>
            The private key.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.Licensing._iv">
            <summary>
            The initialization vector.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.Licensing.EncryptString(System.String)">
            <summary>
            Encrypts the given plain text using the triple data encryption standard (TripleDES).
            </summary>
        </member>
        <member name="M:Claron.WIF.Licensing.DecryptString(System.String)">
            <summary>
            Decrypts the given cypher text.
            </summary>
        </member>
        <member name="M:Claron.WIF.Licensing.GetMacAddressOfLocalMachine">
            <summary>
            Provides the MAC (media access control) address of the local machine
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.WifObjectMarshalByRef">
            <summary>
            A version of WifObject which also inherits from MarshalByRefObject, and can therefore
            be created on a server by the client. Due to the extra overhead of another level of inheritence,
            for classes that do not need to inherit from MarahslByRef, it is better to inherit from WifObject.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.WifObjectMarshalByRef._lastUpdateTicks">
            <summary>
            The last GlobalAutoIncrementCounter value when any property of this object has been modified.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.WifObjectMarshalByRef.UpdatedStackTraceEnabled">
            <summary>
            Controls whether the stack trace is recorded whenever Updated()
            is called.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Claron.WIF.WifObjectMarshalByRef.UpdatedStackTrace">
            <summary>
            A stack trace showing where in the code the last update of this object
            occurred.
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.AssociatedDataGet(System.String)">
            <summary>
            Convenient and efficient access to an item in AssociatedData
            </summary>
            <param name="Key">The key (name) of the item</param>
            <returns>The data value or Nothing if such key was never set.</returns>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.AssociatedDataSet(System.String,System.Object)">
            <summary>
             Convenient and efficient access to an item in AssociatedData
            </summary>
            <param name="Key">The key (name) of the item</param>
            <param name="NewValue">The NewValue to set</param>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.ModifyUidIfContentsChanged">
            <summary>
            Should be called before serializing or comparing to other objects
            in case the UID should uniquely reflect the contents.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.#ctor">
            <summary>
            Calls Updated
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.Updated">
            <summary>
            Notify that the object was updated
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.UpdateIfNewer(System.Int64)">
            <summary>
            Call to update an object upon (potential) change of one of its members.
            </summary>
            <param name="otherLastUpdateTicks">The lastUpdateTicks of the recently updated member.</param>
            <remarks></remarks>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Ensure a deserialized object gets a correct _lastUpdateTicks value.
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.CopyProps(Claron.WIF.WifObjectMarshalByRef,Claron.WIF.WifObjectMarshalByRef)">
            <summary>
            Deep copy of WifObject properties (other than GUID) from Source to Target
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.SwapProps(Claron.WIF.WifObjectMarshalByRef)">
            <summary>
            Swaps AssociatedData, LastUpdate and UID with the other object (perhaps deserialized)
            </summary>
        </member>
        <member name="M:Claron.WIF.WifObjectMarshalByRef.PropertyUpdate(System.Double@,System.Double)">
            <summary>
            If the NewVal &lt;&gt; PropVal, PropVal is updated and the last update time is recorded
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObjectMarshalByRef.LastUpdateTicks">
            <summary>
            The value of GlobalAutoIncrementCounter() at the last time the object was updated.
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObjectMarshalByRef.AssociatedData">
            <summary>
            A dictionary for the application to associate data (in string format) with this object.
            </summary>
            <remarks> Created only on first use.</remarks>
        </member>
        <member name="P:Claron.WIF.WifObjectMarshalByRef.AdString">
            <summary>
            Provides the contents of AssociatedData in a string format for debugging
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObjectMarshalByRef.UID">
            <summary>
            A DICOM-compliant unique ID string for this instance.
            Cannot be changed directly (only by changing this object's GuidHex or the general
            property DicomUidPrefixOfCompany)
            </summary>
            <remarks>Will generate a new UID if never assigned, or if UidReset was called</remarks>
        </member>
        <member name="P:Claron.WIF.WifObjectMarshalByRef.GuidHex">
            <summary>
            The globally unique 32 hex chars string representing the part of the UID
            which follows ClaronUIDPrefix.
            If set to Nothing or an invalid value, it will be automatically reassigned on the next access.
            </summary>
        </member>
        <member name="P:Claron.WIF.WifObjectMarshalByRef.TicksOnUidSet">
            <summary>
            The value of _lastUpdateTicks when UID was set, to allow updating the
            UID when it is required to uniquely reflect the state of the object's data contents.
            Returns 0 if the UID was never accessed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Claron.WIF.BoolObj">
            <summary>
            An object (reference type) representing a bool and having a last update tick via inheritance from WifObject.
            </summary>
        </member>
        <member name="M:Claron.WIF.BoolObj.ToString">
            <summary>
            Generates a "(12, 1.2, 0.012)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.BoolObj.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
        </member>
        <member name="P:Claron.WIF.BoolObj.IsTrue">
            <summary>
            A coordinate member, indexed 0 to 2
            </summary>
        </member>
        <member name="T:Claron.WIF.StringObj">
            <summary>
            An object (reference type) representing a string and having a last update tick via inheritance from WifObject.
            </summary>
        </member>
        <member name="M:Claron.WIF.StringObj.ToString">
            <summary>
            Generates a "(12, 1.2, 0.012)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.StringObj.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
        </member>
        <member name="P:Claron.WIF.StringObj.Value">
            <summary>
            A coordinate member, indexed 0 to 2
            </summary>
        </member>
        <member name="T:Claron.WIF.F64Obj">
            <summary>
            An object (reference type) representing a F64 and having a last update tick via inheritance from WifObject.
            </summary>
        </member>
        <member name="M:Claron.WIF.F64Obj.ToString">
            <summary>
            Generates a "(12, 1.2, 0.012)" string representation.
            </summary>
        </member>
        <member name="M:Claron.WIF.F64Obj.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
        </member>
        <member name="P:Claron.WIF.F64Obj.Value">
            <summary>
            A coordinate member, indexed 0 to 2
            </summary>
        </member>
    </members>
</doc>
